begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* airbrush_blob.h: routines for manipulating scan converted convex  *         polygons.  *    * Copyright 1998, Owen Taylor<otaylor@gtk.org>  *  *> Please contact the above author before modifying the copy<  *> of this file in the GIMP distribution. Thanks.<  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  * */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__AIRBRUSHBLOB_H__
end_ifndef

begin_define
DECL|macro|__AIRBRUSHBLOB_H__
define|#
directive|define
name|__AIRBRUSHBLOB_H__
end_define

begin_typedef
DECL|enum|__anon27ab1f320103
typedef|typedef
enum|enum
block|{
DECL|enumerator|CROSS
name|CROSS
init|=
literal|0
block|,
DECL|enumerator|CROSS_LEFT
name|CROSS_LEFT
init|=
literal|1
block|,
DECL|enumerator|CROSS_RIGHT
name|CROSS_RIGHT
init|=
literal|2
block|,
DECL|enumerator|CROSS_WHOLE_LINE
name|CROSS_WHOLE_LINE
init|=
literal|3
block|,
DECL|enumerator|CROSS_NORMAL
name|CROSS_NORMAL
init|=
literal|4
DECL|typedef|CrossType
block|}
name|CrossType
typedef|;
end_typedef

begin_typedef
DECL|enum|__anon27ab1f320203
typedef|typedef
enum|enum
block|{
DECL|enumerator|RIGHT_LEFT
name|RIGHT_LEFT
init|=
literal|0
block|,
DECL|enumerator|LEFT_RIGHT
name|LEFT_RIGHT
init|=
literal|1
block|,
DECL|enumerator|TOP_BOT
name|TOP_BOT
init|=
literal|2
block|,
DECL|enumerator|BOT_TOP
name|BOT_TOP
init|=
literal|3
block|,
DECL|enumerator|NONE
name|NONE
init|=
literal|4
DECL|typedef|MoveType
block|}
name|MoveType
typedef|;
end_typedef

begin_comment
comment|/* The AirBlob, which is a abstract of a real AirBrushBlob */
end_comment

begin_typedef
DECL|typedef|AirBlob
typedef|typedef
name|struct
name|_AirBlob
name|AirBlob
typedef|;
end_typedef

begin_typedef
DECL|typedef|AirPoint
typedef|typedef
name|struct
name|_AirPoint
name|AirPoint
typedef|;
end_typedef

begin_typedef
DECL|typedef|SupportLine
typedef|typedef
name|struct
name|_SupportLine
name|SupportLine
typedef|;
end_typedef

begin_struct
DECL|struct|_AirPoint
struct|struct
name|_AirPoint
block|{
DECL|member|x
name|int
name|x
decl_stmt|;
DECL|member|y
name|int
name|y
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
DECL|struct|_SupportLine
struct|struct
name|_SupportLine
block|{
DECL|member|size
name|double
name|size
decl_stmt|;
DECL|member|dist
name|double
name|dist
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
DECL|struct|_AirBlob
struct|struct
name|_AirBlob
block|{
DECL|member|direction_abs
name|double
name|direction_abs
decl_stmt|;
DECL|member|direction
name|double
name|direction
decl_stmt|;
DECL|member|ycenter
name|double
name|ycenter
decl_stmt|;
DECL|member|xcenter
name|double
name|xcenter
decl_stmt|;
DECL|member|main_line
name|SupportLine
name|main_line
decl_stmt|;
DECL|member|minor_line
name|SupportLine
name|minor_line
decl_stmt|;
DECL|member|maincross_line
name|SupportLine
name|maincross_line
decl_stmt|;
DECL|member|minorcross_line
name|SupportLine
name|minorcross_line
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* The AirLine is a reslut of a AirBlob */
end_comment

begin_typedef
DECL|typedef|AirLine
typedef|typedef
name|struct
name|_AirLine
name|AirLine
typedef|;
end_typedef

begin_struct
DECL|struct|_AirLine
struct|struct
name|_AirLine
block|{
DECL|member|xcenter
name|int
name|xcenter
decl_stmt|;
DECL|member|ycenter
name|int
name|ycenter
decl_stmt|;
DECL|member|line
name|AirPoint
name|line
index|[
literal|16
index|]
decl_stmt|;
DECL|member|min_x
DECL|member|min_y
name|int
name|min_x
decl_stmt|,
name|min_y
decl_stmt|;
DECL|member|max_x
DECL|member|max_y
name|int
name|max_x
decl_stmt|,
name|max_y
decl_stmt|;
DECL|member|width
DECL|member|height
name|int
name|width
decl_stmt|,
name|height
decl_stmt|;
DECL|member|nlines
name|int
name|nlines
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
DECL|typedef|AirBrushBlobPoint
typedef|typedef
name|struct
name|_AirBrushBlobPoint
name|AirBrushBlobPoint
typedef|;
end_typedef

begin_typedef
DECL|typedef|AirBrushBlobSpan
typedef|typedef
name|struct
name|_AirBrushBlobSpan
name|AirBrushBlobSpan
typedef|;
end_typedef

begin_typedef
DECL|typedef|AirBrushBlob
typedef|typedef
name|struct
name|_AirBrushBlob
name|AirBrushBlob
typedef|;
end_typedef

begin_struct
DECL|struct|_AirBrushBlobPoint
struct|struct
name|_AirBrushBlobPoint
block|{
DECL|member|x
name|int
name|x
decl_stmt|;
DECL|member|y
name|int
name|y
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
DECL|struct|_AirBrushBlobSpan
struct|struct
name|_AirBrushBlobSpan
block|{
DECL|member|left
name|int
name|left
decl_stmt|;
DECL|member|angle_left
name|double
name|angle_left
decl_stmt|;
DECL|member|angle_left_abs
name|double
name|angle_left_abs
decl_stmt|;
DECL|member|dist_left
name|double
name|dist_left
decl_stmt|;
DECL|member|right
name|int
name|right
decl_stmt|;
DECL|member|angle_right
name|double
name|angle_right
decl_stmt|;
DECL|member|angle_right_abs
name|double
name|angle_right_abs
decl_stmt|;
DECL|member|dist_right
name|double
name|dist_right
decl_stmt|;
DECL|member|cross_type
name|CrossType
name|cross_type
decl_stmt|;
DECL|member|x_cross
name|int
name|x_cross
decl_stmt|;
DECL|member|center
name|int
name|center
decl_stmt|;
DECL|member|dist
name|double
name|dist
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
DECL|struct|_AirBrushBlob
struct|struct
name|_AirBrushBlob
block|{
DECL|member|y
name|int
name|y
decl_stmt|;
DECL|member|height
name|int
name|height
decl_stmt|;
DECL|member|width
name|int
name|width
decl_stmt|;
DECL|member|min_x
name|int
name|min_x
decl_stmt|;
DECL|member|max_x
name|int
name|max_x
decl_stmt|;
DECL|member|move
name|MoveType
name|move
decl_stmt|;
DECL|member|direction_abs
name|double
name|direction_abs
decl_stmt|;
DECL|member|direction
name|double
name|direction
decl_stmt|;
DECL|member|cross
name|CrossType
name|cross
decl_stmt|;
DECL|member|data
name|AirBrushBlobSpan
name|data
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
DECL|typedef|AirBrush
typedef|typedef
name|struct
name|_AirBrush
name|AirBrush
typedef|;
end_typedef

begin_struct
DECL|struct|_AirBrush
struct|struct
name|_AirBrush
block|{
DECL|member|airbrush_blob
name|AirBrushBlob
name|airbrush_blob
decl_stmt|;
DECL|member|airblob
name|AirBlob
name|airblob
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|AirBlob
modifier|*
name|create_air_blob
parameter_list|(
name|double
name|xc
parameter_list|,
name|double
name|yc
parameter_list|,
name|double
name|xt
parameter_list|,
name|double
name|yt
parameter_list|,
name|double
name|xr
parameter_list|,
name|double
name|yr
parameter_list|,
name|double
name|xb
parameter_list|,
name|double
name|yb
parameter_list|,
name|double
name|xl
parameter_list|,
name|double
name|yl
parameter_list|,
name|double
name|direction_abs
parameter_list|,
name|double
name|direction
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|AirBlob
modifier|*
name|trans_air_blob
parameter_list|(
name|AirBlob
modifier|*
name|airblob_last
parameter_list|,
name|AirBlob
modifier|*
name|airblob_present
parameter_list|,
name|double
name|dist
parameter_list|,
name|int
name|xc
parameter_list|,
name|int
name|yc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|AirLine
modifier|*
name|create_air_line
parameter_list|(
name|AirBlob
modifier|*
name|airblob
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|AirBrushBlob
modifier|*
name|airbrush_blob_convex_union
parameter_list|(
name|AirBrushBlob
modifier|*
name|b1
parameter_list|,
name|AirBrushBlob
modifier|*
name|b2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|AirBrushBlob
modifier|*
name|airbrush_blob_ellipse
parameter_list|(
name|double
name|xc
parameter_list|,
name|double
name|yc
parameter_list|,
name|double
name|xt
parameter_list|,
name|double
name|yt
parameter_list|,
name|double
name|xr
parameter_list|,
name|double
name|yr
parameter_list|,
name|double
name|xb
parameter_list|,
name|double
name|yb
parameter_list|,
name|double
name|xl
parameter_list|,
name|double
name|yl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|airbrush_blob_bounds
parameter_list|(
name|AirBrushBlob
modifier|*
name|b
parameter_list|,
name|int
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|y
parameter_list|,
name|int
modifier|*
name|width
parameter_list|,
name|int
modifier|*
name|height
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __AIRBRUSHBLOB_H__ */
end_comment

end_unit

