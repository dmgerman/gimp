begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* The GIMP -- an image manipulation program  * Copyright (C) 1995 Spencer Kimball and Peter Mattis  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/*  * This file is supposed to contain the generic (read: C) implementation  * of the pixelfiddeling paint-functions.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PAINT_FUNCS_GENERIC_H__
end_ifndef

begin_define
DECL|macro|__PAINT_FUNCS_GENERIC_H__
define|#
directive|define
name|__PAINT_FUNCS_GENERIC_H__
end_define

begin_define
DECL|macro|INT_MULT (a,b,t)
define|#
directive|define
name|INT_MULT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|t
parameter_list|)
value|((t) = (a) * (b) + 0x80, ((((t)>> 8) + (t))>> 8))
end_define

begin_comment
comment|/* This version of INT_MULT3 is very fast, but suffers from some    slight roundoff errors.  It returns the correct result 99.987    percent of the time */
end_comment

begin_define
DECL|macro|INT_MULT3 (a,b,c,t)
define|#
directive|define
name|INT_MULT3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|t
parameter_list|)
value|((t) = (a) * (b) * (c)+ 0x7F5B, \                             ((((t)>> 7) + (t))>> 16))
end_define

begin_comment
comment|/*   This version of INT_MULT3 always gives the correct result, but runs at   approximatly one third the speed. */
end_comment

begin_comment
comment|/*  #define INT_MULT3(a,b,c,t) (((a) * (b) * (c)+ 32512) / 65025.0)  */
end_comment

begin_define
DECL|macro|INT_BLEND (a,b,alpha,tmp)
define|#
directive|define
name|INT_BLEND
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|alpha
parameter_list|,
name|tmp
parameter_list|)
value|(INT_MULT((a)-(b), alpha, tmp) + (b))
end_define

begin_define
DECL|macro|RANDOM_TABLE_SIZE
define|#
directive|define
name|RANDOM_TABLE_SIZE
value|4096
end_define

begin_comment
comment|/* A drawable has an alphachannel if contains either 4 or 2 bytes data  * aka GRAYA and RGBA and thus the macro below works. This will have  * to change if we support bigger formats. We'll do it so for now because  * masking is always cheaper than passing parameters over the stack.      */
end_comment

begin_comment
comment|/* FIXME: Move to a global place */
end_comment

begin_define
DECL|macro|HAS_ALPHA (bytes)
define|#
directive|define
name|HAS_ALPHA
parameter_list|(
name|bytes
parameter_list|)
value|(~bytes& 1)
end_define

begin_comment
comment|/* FIXME: Move to a more global place */
end_comment

begin_struct
DECL|struct|apply_layer_mode_struct
struct|struct
name|apply_layer_mode_struct
block|{
DECL|member|bytes1
name|guchar
name|bytes1
range|:
literal|3
decl_stmt|;
DECL|member|bytes2
name|guchar
name|bytes2
range|:
literal|3
decl_stmt|;
DECL|member|src1
name|guchar
modifier|*
name|src1
decl_stmt|;
DECL|member|src2
name|guchar
modifier|*
name|src2
decl_stmt|;
DECL|member|dest
name|guchar
modifier|*
modifier|*
name|dest
decl_stmt|;
DECL|member|x
name|gint
name|x
decl_stmt|;
DECL|member|y
name|gint
name|y
decl_stmt|;
DECL|member|opacity
name|guint
name|opacity
decl_stmt|;
DECL|member|length
name|guint
name|length
decl_stmt|;
DECL|member|combine
name|CombinationMode
name|combine
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
DECL|variable|no_mask
specifier|static
specifier|const
name|guchar
name|no_mask
init|=
name|OPAQUE_OPACITY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|variable|add_lut
specifier|static
name|guchar
name|add_lut
index|[
literal|511
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|variable|random_table
specifier|static
name|gint
name|random_table
index|[
name|RANDOM_TABLE_SIZE
index|]
decl_stmt|;
end_decl_stmt

begin_function
name|void
DECL|function|color_pixels (guchar * dest,const guchar * color,guint w,guint bytes)
name|color_pixels
parameter_list|(
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|color
parameter_list|,
name|guint
name|w
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
comment|/* dest % bytes and color % bytes must be 0 or we will crash       when bytes = 2 or 4.      Is this safe to assume?  Lets find out.      This is 4-7X as fast as the simple version.      */
if|#
directive|if
name|defined
argument_list|(
name|sparc
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparc__
argument_list|)
name|guchar
name|c0
decl_stmt|,
name|c1
decl_stmt|,
name|c2
decl_stmt|,
name|c3
decl_stmt|;
else|#
directive|else
name|guchar
name|c0
decl_stmt|,
name|c1
decl_stmt|,
name|c2
decl_stmt|;
name|guint32
modifier|*
name|longd
decl_stmt|,
name|longc
decl_stmt|;
name|guint16
modifier|*
name|shortd
decl_stmt|,
name|shortc
decl_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|bytes
condition|)
block|{
case|case
literal|1
case|:
name|memset
argument_list|(
name|dest
argument_list|,
operator|*
name|color
argument_list|,
name|w
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|#
directive|if
name|defined
argument_list|(
name|sparc
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparc__
argument_list|)
name|c0
operator|=
name|color
index|[
literal|0
index|]
expr_stmt|;
name|c1
operator|=
name|color
index|[
literal|1
index|]
expr_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
name|dest
index|[
literal|0
index|]
operator|=
name|c0
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|c1
expr_stmt|;
name|dest
operator|+=
literal|2
expr_stmt|;
block|}
else|#
directive|else
name|shortc
operator|=
operator|(
operator|(
name|guint16
operator|*
operator|)
name|color
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|shortd
operator|=
operator|(
name|guint16
operator|*
operator|)
name|dest
expr_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
operator|*
name|shortd
operator|=
name|shortc
expr_stmt|;
name|shortd
operator|++
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* sparc || __sparc__ */
break|break;
case|case
literal|3
case|:
name|c0
operator|=
name|color
index|[
literal|0
index|]
expr_stmt|;
name|c1
operator|=
name|color
index|[
literal|1
index|]
expr_stmt|;
name|c2
operator|=
name|color
index|[
literal|2
index|]
expr_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
name|dest
index|[
literal|0
index|]
operator|=
name|c0
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|c1
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|c2
expr_stmt|;
name|dest
operator|+=
literal|3
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|#
directive|if
name|defined
argument_list|(
name|sparc
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparc__
argument_list|)
name|c0
operator|=
name|color
index|[
literal|0
index|]
expr_stmt|;
name|c1
operator|=
name|color
index|[
literal|1
index|]
expr_stmt|;
name|c2
operator|=
name|color
index|[
literal|2
index|]
expr_stmt|;
name|c3
operator|=
name|color
index|[
literal|3
index|]
expr_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
name|dest
index|[
literal|0
index|]
operator|=
name|c0
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|c1
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|c2
expr_stmt|;
name|dest
index|[
literal|3
index|]
operator|=
name|c3
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
else|#
directive|else
name|longc
operator|=
operator|(
operator|(
name|guint32
operator|*
operator|)
name|color
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|longd
operator|=
operator|(
name|guint32
operator|*
operator|)
name|dest
expr_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
operator|*
name|longd
operator|=
name|longc
expr_stmt|;
name|longd
operator|++
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* sparc || __sparc__ */
break|break;
default|default:
while|while
condition|(
name|w
operator|--
condition|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|color
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|blend_pixels (const guchar * src1,const guchar * src2,guchar * dest,guchar blend,guint w,guint bytes,guint has_alpha)
name|blend_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guchar
name|blend
parameter_list|,
name|guint
name|w
parameter_list|,
name|guint
name|bytes
parameter_list|,
name|guint
name|has_alpha
parameter_list|)
block|{
name|guint
name|b
decl_stmt|;
specifier|const
name|guchar
name|blend2
init|=
operator|(
literal|255
operator|-
name|blend
operator|)
decl_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|bytes
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|src1
index|[
name|b
index|]
operator|*
name|blend2
operator|+
name|src2
index|[
name|b
index|]
operator|*
name|blend
operator|)
operator|/
literal|255
expr_stmt|;
name|src1
operator|+=
name|bytes
expr_stmt|;
name|src2
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|shade_pixels (const guchar * src,guchar * dest,const guchar * col,guchar blend,guint w,guint bytes,guint has_alpha)
name|shade_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|col
parameter_list|,
name|guchar
name|blend
parameter_list|,
name|guint
name|w
parameter_list|,
name|guint
name|bytes
parameter_list|,
name|guint
name|has_alpha
parameter_list|)
block|{
specifier|const
name|guchar
name|blend2
init|=
operator|(
literal|255
operator|-
name|blend
operator|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha
operator|)
condition|?
name|bytes
operator|-
literal|1
else|:
name|bytes
decl_stmt|;
name|guint
name|b
decl_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|src
index|[
name|b
index|]
operator|*
name|blend2
operator|+
name|col
index|[
name|b
index|]
operator|*
name|blend
operator|)
operator|/
literal|255
expr_stmt|;
if|if
condition|(
name|has_alpha
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src
index|[
name|alpha
index|]
expr_stmt|;
comment|/* alpha channel */
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|extract_alpha_pixels (const guchar * src,const guchar * mask,guchar * dest,guint w,guint bytes)
name|extract_alpha_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
specifier|const
name|guchar
modifier|*
name|mask
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|w
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
specifier|const
name|guint
name|alpha
init|=
name|bytes
operator|-
literal|1
decl_stmt|;
name|gint
name|tmp
decl_stmt|;
if|if
condition|(
name|mask
condition|)
block|{
specifier|const
name|guchar
modifier|*
name|m
init|=
name|mask
decl_stmt|;
while|while
condition|(
name|w
operator|--
condition|)
block|{
operator|*
name|dest
operator|++
operator|=
name|INT_MULT
argument_list|(
name|src
index|[
name|alpha
index|]
argument_list|,
operator|*
name|m
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|m
operator|++
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|w
operator|--
condition|)
block|{
operator|*
name|dest
operator|++
operator|=
name|INT_MULT
argument_list|(
name|src
index|[
name|alpha
index|]
argument_list|,
name|OPAQUE_OPACITY
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|darken_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|darken_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|;
name|guchar
name|s1
decl_stmt|,
name|s2
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|s1
operator|=
name|src1
index|[
name|b
index|]
expr_stmt|;
name|s2
operator|=
name|src2
index|[
name|b
index|]
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|s1
operator|<
name|s2
operator|)
condition|?
name|s1
else|:
name|s2
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|lighten_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|lighten_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|;
name|guchar
name|s1
decl_stmt|,
name|s2
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|s1
operator|=
name|src1
index|[
name|b
index|]
expr_stmt|;
name|s2
operator|=
name|src2
index|[
name|b
index|]
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|s1
operator|<
name|s2
operator|)
condition|?
name|s2
else|:
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|hue_only_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|hue_only_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
name|gint
name|r1
decl_stmt|,
name|g1
decl_stmt|,
name|b1
decl_stmt|;
name|gint
name|r2
decl_stmt|,
name|g2
decl_stmt|,
name|b2
decl_stmt|;
comment|/*  assumes inputs are only 4 byte RGBA pixels  */
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|r1
operator|=
name|src1
index|[
literal|0
index|]
expr_stmt|;
name|g1
operator|=
name|src1
index|[
literal|1
index|]
expr_stmt|;
name|b1
operator|=
name|src1
index|[
literal|2
index|]
expr_stmt|;
name|r2
operator|=
name|src2
index|[
literal|0
index|]
expr_stmt|;
name|g2
operator|=
name|src2
index|[
literal|1
index|]
expr_stmt|;
name|b2
operator|=
name|src2
index|[
literal|2
index|]
expr_stmt|;
name|gimp_rgb_to_hsv_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsv_int
argument_list|(
operator|&
name|r2
argument_list|,
operator|&
name|g2
argument_list|,
operator|&
name|b2
argument_list|)
expr_stmt|;
name|r1
operator|=
name|r2
expr_stmt|;
comment|/*  set the destination  */
name|gimp_hsv_to_rgb_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|dest
index|[
literal|0
index|]
operator|=
name|r1
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|g1
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|b1
expr_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
literal|3
index|]
argument_list|,
name|src2
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|src2
index|[
literal|3
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|saturation_only_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|saturation_only_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
name|guint
name|r1
decl_stmt|,
name|g1
decl_stmt|,
name|b1
decl_stmt|;
name|guint
name|r2
decl_stmt|,
name|g2
decl_stmt|,
name|b2
decl_stmt|;
comment|/*  assumes inputs are only 4 byte RGBA pixels  */
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|r1
operator|=
name|src1
index|[
literal|0
index|]
expr_stmt|;
name|g1
operator|=
name|src1
index|[
literal|1
index|]
expr_stmt|;
name|b1
operator|=
name|src1
index|[
literal|2
index|]
expr_stmt|;
name|r2
operator|=
name|src2
index|[
literal|0
index|]
expr_stmt|;
name|g2
operator|=
name|src2
index|[
literal|1
index|]
expr_stmt|;
name|b2
operator|=
name|src2
index|[
literal|2
index|]
expr_stmt|;
name|gimp_rgb_to_hsv_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsv_int
argument_list|(
operator|&
name|r2
argument_list|,
operator|&
name|g2
argument_list|,
operator|&
name|b2
argument_list|)
expr_stmt|;
name|g1
operator|=
name|g2
expr_stmt|;
comment|/*  set the destination  */
name|gimp_hsv_to_rgb_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|dest
index|[
literal|0
index|]
operator|=
name|r1
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|g1
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|b1
expr_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
literal|3
index|]
argument_list|,
name|src2
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|src2
index|[
literal|3
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|value_only_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|value_only_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
name|guint
name|r1
decl_stmt|,
name|g1
decl_stmt|,
name|b1
decl_stmt|;
name|guint
name|r2
decl_stmt|,
name|g2
decl_stmt|,
name|b2
decl_stmt|;
comment|/*  assumes inputs are only 4 byte RGBA pixels  */
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|r1
operator|=
name|src1
index|[
literal|0
index|]
expr_stmt|;
name|g1
operator|=
name|src1
index|[
literal|1
index|]
expr_stmt|;
name|b1
operator|=
name|src1
index|[
literal|2
index|]
expr_stmt|;
name|r2
operator|=
name|src2
index|[
literal|0
index|]
expr_stmt|;
name|g2
operator|=
name|src2
index|[
literal|1
index|]
expr_stmt|;
name|b2
operator|=
name|src2
index|[
literal|2
index|]
expr_stmt|;
name|gimp_rgb_to_hsv_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsv_int
argument_list|(
operator|&
name|r2
argument_list|,
operator|&
name|g2
argument_list|,
operator|&
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|=
name|b2
expr_stmt|;
comment|/*  set the destination  */
name|gimp_hsv_to_rgb_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|dest
index|[
literal|0
index|]
operator|=
name|r1
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|g1
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|b1
expr_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
literal|3
index|]
argument_list|,
name|src2
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|src2
index|[
literal|3
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|color_only_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|color_only_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
name|guint
name|r1
decl_stmt|,
name|g1
decl_stmt|,
name|b1
decl_stmt|;
name|guint
name|r2
decl_stmt|,
name|g2
decl_stmt|,
name|b2
decl_stmt|;
comment|/*  assumes inputs are only 4 byte RGBA pixels  */
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|r1
operator|=
name|src1
index|[
literal|0
index|]
expr_stmt|;
name|g1
operator|=
name|src1
index|[
literal|1
index|]
expr_stmt|;
name|b1
operator|=
name|src1
index|[
literal|2
index|]
expr_stmt|;
name|r2
operator|=
name|src2
index|[
literal|0
index|]
expr_stmt|;
name|g2
operator|=
name|src2
index|[
literal|1
index|]
expr_stmt|;
name|b2
operator|=
name|src2
index|[
literal|2
index|]
expr_stmt|;
name|gimp_rgb_to_hls_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hls_int
argument_list|(
operator|&
name|r2
argument_list|,
operator|&
name|g2
argument_list|,
operator|&
name|b2
argument_list|)
expr_stmt|;
comment|/*  transfer hue and saturation to the source pixel  */
name|r1
operator|=
name|r2
expr_stmt|;
name|b1
operator|=
name|b2
expr_stmt|;
comment|/*  set the destination  */
name|gimp_hls_to_rgb_int
argument_list|(
operator|&
name|r1
argument_list|,
operator|&
name|g1
argument_list|,
operator|&
name|b1
argument_list|)
expr_stmt|;
name|dest
index|[
literal|0
index|]
operator|=
name|r1
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|g1
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|b1
expr_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
literal|3
index|]
argument_list|,
name|src2
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|src2
index|[
literal|3
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|multiply_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|multiply_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|,
name|tmp
decl_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|INT_MULT
argument_list|(
name|src1
index|[
name|b
index|]
argument_list|,
name|src2
index|[
name|b
index|]
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|INT_MULT
argument_list|(
name|src1
index|[
name|b
index|]
argument_list|,
name|src2
index|[
name|b
index|]
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|INT_MULT
argument_list|(
name|src1
index|[
name|b
index|]
argument_list|,
name|src2
index|[
name|b
index|]
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|divide_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|divide_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|,
name|result
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|result
operator|=
operator|(
operator|(
name|src1
index|[
name|b
index|]
operator|*
literal|256
operator|)
operator|/
operator|(
literal|1
operator|+
name|src2
index|[
name|b
index|]
operator|)
operator|)
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
name|MIN
argument_list|(
name|result
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|screen_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|screen_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|,
name|tmp
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
literal|255
operator|-
name|INT_MULT
argument_list|(
operator|(
literal|255
operator|-
name|src1
index|[
name|b
index|]
operator|)
argument_list|,
operator|(
literal|255
operator|-
name|src2
index|[
name|b
index|]
operator|)
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|overlay_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|overlay_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|,
name|tmp
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|dest
index|[
name|b
index|]
operator|=
name|INT_MULT
argument_list|(
name|src1
index|[
name|b
index|]
argument_list|,
name|src1
index|[
name|b
index|]
operator|+
name|INT_MULT
argument_list|(
literal|2
operator|*
name|src2
index|[
name|b
index|]
argument_list|,
literal|255
operator|-
name|src1
index|[
name|b
index|]
argument_list|,
name|tmp
argument_list|)
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|dodge_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|dodge_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|,
name|tmp
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|tmp
operator|=
name|src1
index|[
name|b
index|]
operator|<<
literal|8
expr_stmt|;
name|tmp
operator|/=
literal|256
operator|-
name|src2
index|[
name|b
index|]
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|guchar
operator|)
name|CLAMP
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|burn_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|burn_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|;
comment|/* FIXME: Is the burn effect supposed to be dependant on the sign of this    * temporary variable? */
name|gint
name|tmp
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|tmp
operator|=
operator|(
literal|255
operator|-
name|src1
index|[
name|b
index|]
operator|)
operator|<<
literal|8
expr_stmt|;
name|tmp
operator|/=
name|src2
index|[
name|b
index|]
operator|+
literal|1
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|guchar
operator|)
name|CLAMP
argument_list|(
literal|255
operator|-
name|tmp
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|hardlight_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|hardlight_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|,
name|tmp
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|src2
index|[
name|b
index|]
operator|>
literal|128
condition|)
block|{
name|tmp
operator|=
operator|(
operator|(
name|gint
operator|)
literal|255
operator|-
name|src1
index|[
name|b
index|]
operator|)
operator|*
operator|(
operator|(
name|gint
operator|)
literal|255
operator|-
operator|(
operator|(
name|src2
index|[
name|b
index|]
operator|-
literal|128
operator|)
operator|<<
literal|1
operator|)
operator|)
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|guchar
operator|)
name|CLAMP
argument_list|(
literal|255
operator|-
operator|(
name|tmp
operator|>>
literal|8
operator|)
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
operator|(
name|gint
operator|)
name|src1
index|[
name|b
index|]
operator|*
operator|(
operator|(
name|gint
operator|)
name|src2
index|[
name|b
index|]
operator|<<
literal|1
operator|)
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|guchar
operator|)
name|CLAMP
argument_list|(
name|tmp
operator|>>
literal|8
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|add_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|add_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|add_lut
index|[
name|src1
index|[
name|b
index|]
operator|+
name|src2
index|[
name|b
index|]
index|]
expr_stmt|;
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|subtract_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|subtract_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|;
name|gint
name|diff
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|diff
operator|=
name|src1
index|[
name|b
index|]
operator|-
name|src2
index|[
name|b
index|]
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|diff
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|diff
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|difference_pixels (const guchar * src1,const guchar * src2,guchar * dest,guint length,guint bytes1,guint bytes2)
name|difference_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src1
parameter_list|,
specifier|const
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes1
parameter_list|,
name|guint
name|bytes2
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|alpha
init|=
operator|(
name|has_alpha1
operator|||
name|has_alpha2
operator|)
condition|?
name|MAX
argument_list|(
name|bytes1
argument_list|,
name|bytes2
argument_list|)
operator|-
literal|1
else|:
name|bytes1
decl_stmt|;
name|guint
name|b
decl_stmt|;
name|gint
name|diff
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|diff
operator|=
name|src1
index|[
name|b
index|]
operator|-
name|src2
index|[
name|b
index|]
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
operator|(
name|diff
operator|<
literal|0
operator|)
condition|?
operator|-
name|diff
else|:
name|diff
expr_stmt|;
block|}
if|if
condition|(
name|has_alpha1
operator|&&
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|MIN
argument_list|(
name|src1
index|[
name|alpha
index|]
argument_list|,
name|src2
index|[
name|alpha
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|has_alpha2
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|dissolve_pixels (const guchar * src,guchar * dest,gint x,gint y,gint opacity,gint length,gint sb,gint db,guint has_alpha)
name|dissolve_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|gint
name|x
parameter_list|,
name|gint
name|y
parameter_list|,
name|gint
name|opacity
parameter_list|,
name|gint
name|length
parameter_list|,
name|gint
name|sb
parameter_list|,
name|gint
name|db
parameter_list|,
name|guint
name|has_alpha
parameter_list|)
block|{
name|gint
name|alpha
decl_stmt|,
name|b
decl_stmt|;
name|gint
name|rand_val
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ENABLE_MP
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
comment|/* The glibc 2.1 documentation recommends using the SVID random functions    * instead of rand_r    */
name|struct
name|drand48_data
name|seed
decl_stmt|;
name|glong
name|temp_val
decl_stmt|;
name|srand48_r
argument_list|(
name|random_table
index|[
name|y
operator|%
name|RANDOM_TABLE_SIZE
index|]
argument_list|,
operator|&
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|x
condition|;
name|b
operator|++
control|)
name|lrand48_r
argument_list|(
operator|&
name|seed
argument_list|,
operator|&
name|temp_val
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ENABLE_MP
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
comment|/* If we are running with multiple threads rand_r give _much_ better    * performance than rand    */
name|guint
name|seed
decl_stmt|;
name|seed
operator|=
name|random_table
index|[
name|y
operator|%
name|RANDOM_TABLE_SIZE
index|]
expr_stmt|;
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|x
condition|;
name|b
operator|++
control|)
name|rand_r
argument_list|(
operator|&
name|seed
argument_list|)
expr_stmt|;
else|#
directive|else
comment|/* Set up the random number generator */
name|srand
argument_list|(
name|random_table
index|[
name|y
operator|%
name|RANDOM_TABLE_SIZE
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|x
condition|;
name|b
operator|++
control|)
name|rand
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|alpha
operator|=
name|db
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
comment|/*  preserve the intensity values  */
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|src
index|[
name|b
index|]
expr_stmt|;
comment|/*  dissolve if random value is> opacity  */
if|#
directive|if
name|defined
argument_list|(
name|ENABLE_MP
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
name|lrand48_r
argument_list|(
operator|&
name|seed
argument_list|,
operator|&
name|temp_val
argument_list|)
expr_stmt|;
name|rand_val
operator|=
name|temp_val
operator|&
literal|0xff
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ENABLE_MP
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
name|rand_val
operator|=
operator|(
name|rand_r
argument_list|(
operator|&
name|seed
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
else|#
directive|else
name|rand_val
operator|=
operator|(
name|rand
argument_list|()
operator|&
literal|0xff
operator|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|has_alpha
condition|)
name|dest
index|[
name|alpha
index|]
operator|=
operator|(
name|rand_val
operator|>
name|src
index|[
name|alpha
index|]
operator|)
condition|?
literal|0
else|:
name|src
index|[
name|alpha
index|]
expr_stmt|;
else|else
name|dest
index|[
name|alpha
index|]
operator|=
operator|(
name|rand_val
operator|>
name|opacity
operator|)
condition|?
literal|0
else|:
name|OPAQUE_OPACITY
expr_stmt|;
name|dest
operator|+=
name|db
expr_stmt|;
name|src
operator|+=
name|sb
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|replace_pixels (guchar * src1,guchar * src2,guchar * dest,guchar * mask,gint length,gint opacity,gboolean * affect,gint bytes1,gint bytes2)
name|replace_pixels
parameter_list|(
name|guchar
modifier|*
name|src1
parameter_list|,
name|guchar
modifier|*
name|src2
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guchar
modifier|*
name|mask
parameter_list|,
name|gint
name|length
parameter_list|,
name|gint
name|opacity
parameter_list|,
name|gboolean
modifier|*
name|affect
parameter_list|,
name|gint
name|bytes1
parameter_list|,
name|gint
name|bytes2
parameter_list|)
block|{
name|gint
name|alpha
decl_stmt|;
name|gint
name|b
decl_stmt|;
name|gdouble
name|a_val
decl_stmt|,
name|a_recip
decl_stmt|,
name|mask_val
decl_stmt|;
name|gdouble
name|norm_opacity
decl_stmt|;
name|gint
name|s1_a
decl_stmt|,
name|s2_a
decl_stmt|;
name|gint
name|new_val
decl_stmt|;
if|if
condition|(
name|bytes1
operator|!=
name|bytes2
condition|)
block|{
name|g_warning
argument_list|(
literal|"replace_pixels only works on commensurate pixel regions"
argument_list|)
expr_stmt|;
return|return;
block|}
name|alpha
operator|=
name|bytes1
operator|-
literal|1
expr_stmt|;
name|norm_opacity
operator|=
name|opacity
operator|*
operator|(
literal|1.0
operator|/
literal|65536.0
operator|)
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|mask_val
operator|=
name|mask
index|[
literal|0
index|]
operator|*
name|norm_opacity
expr_stmt|;
comment|/* calculate new alpha first. */
name|s1_a
operator|=
name|src1
index|[
name|alpha
index|]
expr_stmt|;
name|s2_a
operator|=
name|src2
index|[
name|alpha
index|]
expr_stmt|;
name|a_val
operator|=
name|s1_a
operator|+
name|mask_val
operator|*
operator|(
name|s2_a
operator|-
name|s1_a
operator|)
expr_stmt|;
if|if
condition|(
name|a_val
operator|==
literal|0
condition|)
comment|/* In any case, write out versions of the blending function */
comment|/* that result when combinations of s1_a, s2_a, and         */
comment|/* mask_val --> 0 (or mask_val -->1)                        */
block|{
comment|/* Case 1: s1_a, s2_a, AND mask_val all approach 0+:               */
comment|/* Case 2: s1_a AND s2_a both approach 0+, regardless of mask_val: */
if|if
condition|(
name|s1_a
operator|+
name|s2_a
operator|==
literal|0.0
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|new_val
operator|=
literal|0.5
operator|+
operator|(
name|gdouble
operator|)
name|src1
index|[
name|b
index|]
operator|+
name|mask_val
operator|*
operator|(
operator|(
name|gdouble
operator|)
name|src2
index|[
name|b
index|]
operator|-
operator|(
name|gdouble
operator|)
name|src1
index|[
name|b
index|]
operator|)
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
name|affect
index|[
name|b
index|]
condition|?
name|MIN
argument_list|(
name|new_val
argument_list|,
literal|255
argument_list|)
else|:
name|src1
index|[
name|b
index|]
expr_stmt|;
block|}
block|}
comment|/* Case 3: mask_val AND s1_a both approach 0+, regardless of s2_a  */
elseif|else
if|if
condition|(
name|s1_a
operator|+
name|mask_val
operator|==
literal|0.0
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|dest
index|[
name|b
index|]
operator|=
name|src1
index|[
name|b
index|]
expr_stmt|;
block|}
block|}
comment|/* Case 4: mask_val -->1 AND s2_a -->0, regardless of s1_a         */
elseif|else
if|if
condition|(
literal|1.0
operator|-
name|mask_val
operator|+
name|s2_a
operator|==
literal|0.0
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|dest
index|[
name|b
index|]
operator|=
name|affect
index|[
name|b
index|]
condition|?
name|src2
index|[
name|b
index|]
else|:
name|src1
index|[
name|b
index|]
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|a_recip
operator|=
literal|1.0
operator|/
name|a_val
expr_stmt|;
comment|/* possible optimization: fold a_recip into s1_a and s2_a              */
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
block|{
name|new_val
operator|=
literal|0.5
operator|+
name|a_recip
operator|*
operator|(
name|src1
index|[
name|b
index|]
operator|*
name|s1_a
operator|+
name|mask_val
operator|*
operator|(
name|src2
index|[
name|b
index|]
operator|*
name|s2_a
operator|-
name|src1
index|[
name|b
index|]
operator|*
name|s1_a
operator|)
operator|)
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
name|affect
index|[
name|b
index|]
condition|?
name|MIN
argument_list|(
name|new_val
argument_list|,
literal|255
argument_list|)
else|:
name|src1
index|[
name|b
index|]
expr_stmt|;
block|}
block|}
name|dest
index|[
name|alpha
index|]
operator|=
name|affect
index|[
name|alpha
index|]
condition|?
name|a_val
operator|+
literal|0.5
else|:
name|s1_a
expr_stmt|;
name|src1
operator|+=
name|bytes1
expr_stmt|;
name|src2
operator|+=
name|bytes2
expr_stmt|;
name|dest
operator|+=
name|bytes2
expr_stmt|;
name|mask
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|swap_pixels (guchar * src,guchar * dest,guint length)
name|swap_pixels
parameter_list|(
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|)
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|src
operator|=
operator|*
name|src
operator|^
operator|*
name|dest
expr_stmt|;
operator|*
name|dest
operator|=
operator|*
name|dest
operator|^
operator|*
name|src
expr_stmt|;
operator|*
name|src
operator|=
operator|*
name|src
operator|^
operator|*
name|dest
expr_stmt|;
name|src
operator|++
expr_stmt|;
name|dest
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|scale_pixels (const guchar * src,guchar * dest,guint length,gint scale)
name|scale_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|gint
name|scale
parameter_list|)
block|{
name|gint
name|tmp
decl_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|dest
operator|++
operator|=
operator|(
name|guchar
operator|)
name|INT_MULT
argument_list|(
operator|*
name|src
argument_list|,
name|scale
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|add_alpha_pixels (const guchar * src,guchar * dest,guint length,guint bytes)
name|add_alpha_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|alpha
decl_stmt|,
name|b
decl_stmt|;
name|alpha
operator|=
name|bytes
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|bytes
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|src
index|[
name|b
index|]
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
name|OPAQUE_OPACITY
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|alpha
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|flatten_pixels (const guchar * src,guchar * dest,const guchar * bg,guint length,guint bytes)
name|flatten_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|bg
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|alpha
decl_stmt|,
name|b
decl_stmt|;
name|gint
name|t1
decl_stmt|,
name|t2
decl_stmt|;
name|alpha
operator|=
name|bytes
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|INT_MULT
argument_list|(
name|src
index|[
name|b
index|]
argument_list|,
name|src
index|[
name|alpha
index|]
argument_list|,
name|t1
argument_list|)
operator|+
name|INT_MULT
argument_list|(
name|bg
index|[
name|b
index|]
argument_list|,
operator|(
literal|255
operator|-
name|src
index|[
name|alpha
index|]
operator|)
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|alpha
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|gray_to_rgb_pixels (const guchar * src,guchar * dest,guint length,guint bytes)
name|gray_to_rgb_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|b
decl_stmt|;
name|gint
name|dest_bytes
decl_stmt|;
name|gboolean
name|has_alpha
decl_stmt|;
name|has_alpha
operator|=
operator|(
name|bytes
operator|==
literal|2
operator|)
condition|?
name|TRUE
else|:
name|FALSE
expr_stmt|;
name|dest_bytes
operator|=
operator|(
name|has_alpha
operator|)
condition|?
literal|4
else|:
literal|3
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|bytes
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|has_alpha
condition|)
name|dest
index|[
literal|3
index|]
operator|=
name|src
index|[
literal|1
index|]
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|dest_bytes
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|apply_mask_to_alpha_channel (guchar * src,const guchar * mask,guint opacity,guint length,guint bytes)
name|apply_mask_to_alpha_channel
parameter_list|(
name|guchar
modifier|*
name|src
parameter_list|,
specifier|const
name|guchar
modifier|*
name|mask
parameter_list|,
name|guint
name|opacity
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|glong
name|tmp
decl_stmt|;
name|src
operator|+=
name|bytes
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|opacity
operator|==
literal|255
condition|)
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|src
operator|=
name|INT_MULT
argument_list|(
operator|*
name|src
argument_list|,
operator|*
name|mask
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|mask
operator|++
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|src
operator|=
name|INT_MULT3
argument_list|(
operator|*
name|src
argument_list|,
operator|*
name|mask
argument_list|,
name|opacity
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|mask
operator|++
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|combine_mask_and_alpha_channel (guchar * src,const guchar * mask,guint opacity,guint length,guint bytes)
name|combine_mask_and_alpha_channel
parameter_list|(
name|guchar
modifier|*
name|src
parameter_list|,
specifier|const
name|guchar
modifier|*
name|mask
parameter_list|,
name|guint
name|opacity
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|mask_val
decl_stmt|;
name|gint
name|alpha
decl_stmt|;
name|gint
name|tmp
decl_stmt|;
name|alpha
operator|=
name|bytes
operator|-
literal|1
expr_stmt|;
name|src
operator|+=
name|alpha
expr_stmt|;
if|if
condition|(
name|opacity
operator|!=
literal|255
condition|)
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|mask_val
operator|=
name|INT_MULT
argument_list|(
operator|*
name|mask
argument_list|,
name|opacity
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|mask
operator|++
expr_stmt|;
operator|*
name|src
operator|=
operator|*
name|src
operator|+
name|INT_MULT
argument_list|(
operator|(
literal|255
operator|-
operator|*
name|src
operator|)
argument_list|,
name|mask_val
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
else|else
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|src
operator|=
operator|*
name|src
operator|+
name|INT_MULT
argument_list|(
operator|(
literal|255
operator|-
operator|*
name|src
operator|)
argument_list|,
operator|*
name|mask
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|mask
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|copy_gray_to_inten_a_pixels (const guchar * src,guchar * dest,guint length,guint bytes)
name|copy_gray_to_inten_a_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|b
decl_stmt|;
name|gint
name|alpha
decl_stmt|;
name|alpha
operator|=
name|bytes
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
operator|*
name|src
expr_stmt|;
name|dest
index|[
name|b
index|]
operator|=
name|OPAQUE_OPACITY
expr_stmt|;
name|src
operator|++
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|initial_channel_pixels (const guchar * src,guchar * dest,guint length,guint bytes)
name|initial_channel_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|alpha
decl_stmt|,
name|b
decl_stmt|;
name|alpha
operator|=
name|bytes
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
name|dest
index|[
name|alpha
index|]
operator|=
name|OPAQUE_OPACITY
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
name|src
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|initial_indexed_pixels (const guchar * src,guchar * dest,const guchar * cmap,guint length)
name|initial_indexed_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|cmap
parameter_list|,
name|guint
name|length
parameter_list|)
block|{
name|gint
name|col_index
decl_stmt|;
comment|/*  This function assumes always that we're mapping from    *  an RGB colormap to an RGBA image...    */
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|col_index
operator|=
operator|*
name|src
operator|++
operator|*
literal|3
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|cmap
index|[
name|col_index
operator|++
index|]
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|cmap
index|[
name|col_index
operator|++
index|]
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|cmap
index|[
name|col_index
operator|++
index|]
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|OPAQUE_OPACITY
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|initial_indexed_a_pixels (const guchar * src,guchar * dest,const guchar * mask,const guchar * cmap,guint opacity,guint length)
name|initial_indexed_a_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|mask
parameter_list|,
specifier|const
name|guchar
modifier|*
name|cmap
parameter_list|,
name|guint
name|opacity
parameter_list|,
name|guint
name|length
parameter_list|)
block|{
name|gint
name|col_index
decl_stmt|;
name|guchar
name|new_alpha
decl_stmt|;
specifier|const
name|guchar
modifier|*
name|m
decl_stmt|;
name|glong
name|tmp
decl_stmt|;
if|if
condition|(
name|mask
condition|)
name|m
operator|=
name|mask
expr_stmt|;
else|else
name|m
operator|=
operator|&
name|no_mask
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|col_index
operator|=
operator|*
name|src
operator|++
operator|*
literal|3
expr_stmt|;
name|new_alpha
operator|=
name|INT_MULT3
argument_list|(
operator|*
name|src
argument_list|,
operator|*
name|m
argument_list|,
name|opacity
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src
operator|++
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|cmap
index|[
name|col_index
operator|++
index|]
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|cmap
index|[
name|col_index
operator|++
index|]
expr_stmt|;
operator|*
name|dest
operator|++
operator|=
name|cmap
index|[
name|col_index
operator|++
index|]
expr_stmt|;
comment|/*  Set the alpha channel  */
operator|*
name|dest
operator|++
operator|=
operator|(
name|new_alpha
operator|>
literal|127
operator|)
condition|?
name|OPAQUE_OPACITY
else|:
name|TRANSPARENT_OPACITY
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|m
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|initial_inten_pixels (const guchar * src,guchar * dest,const guchar * mask,guint opacity,const gint * affect,guint length,guint bytes)
name|initial_inten_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|mask
parameter_list|,
name|guint
name|opacity
parameter_list|,
specifier|const
name|gint
modifier|*
name|affect
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|b
decl_stmt|;
name|gint
name|tmp
decl_stmt|;
name|gint
name|l
decl_stmt|;
specifier|const
name|guchar
modifier|*
name|m
decl_stmt|;
name|guchar
modifier|*
name|destp
decl_stmt|;
specifier|const
name|guchar
modifier|*
name|srcp
decl_stmt|;
specifier|const
name|gint
name|dest_bytes
init|=
name|bytes
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|mask
condition|)
block|{
name|m
operator|=
name|mask
expr_stmt|;
comment|/*  This function assumes the source has no alpha channel and      *  the destination has an alpha channel.  So dest_bytes = bytes + 1      */
if|if
condition|(
name|bytes
operator|==
literal|3
operator|&&
name|affect
index|[
literal|0
index|]
operator|&&
name|affect
index|[
literal|1
index|]
operator|&&
name|affect
index|[
literal|2
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|affect
index|[
name|bytes
index|]
condition|)
name|opacity
operator|=
literal|0
expr_stmt|;
name|destp
operator|=
name|dest
operator|+
name|bytes
expr_stmt|;
if|if
condition|(
name|opacity
operator|!=
literal|0
condition|)
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|dest
index|[
literal|0
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|src
index|[
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|src
index|[
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|3
index|]
operator|=
name|INT_MULT
argument_list|(
name|opacity
argument_list|,
operator|*
name|m
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|dest_bytes
expr_stmt|;
name|m
operator|++
expr_stmt|;
block|}
else|else
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|dest
index|[
literal|0
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|src
index|[
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|src
index|[
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|3
index|]
operator|=
name|opacity
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|dest_bytes
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|bytes
condition|;
name|b
operator|++
control|)
block|{
name|destp
operator|=
name|dest
operator|+
name|b
expr_stmt|;
name|srcp
operator|=
name|src
operator|+
name|b
expr_stmt|;
name|l
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|affect
index|[
name|b
index|]
condition|)
while|while
condition|(
name|l
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
operator|*
name|srcp
expr_stmt|;
name|srcp
operator|+=
name|bytes
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
block|}
else|else
while|while
condition|(
name|l
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
literal|0
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
block|}
block|}
comment|/* fill the alpha channel */
if|if
condition|(
operator|!
name|affect
index|[
name|bytes
index|]
condition|)
name|opacity
operator|=
literal|0
expr_stmt|;
name|destp
operator|=
name|dest
operator|+
name|bytes
expr_stmt|;
if|if
condition|(
name|opacity
operator|!=
literal|0
condition|)
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
name|INT_MULT
argument_list|(
name|opacity
argument_list|,
operator|*
name|m
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
name|m
operator|++
expr_stmt|;
block|}
else|else
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
name|opacity
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
block|}
block|}
comment|/* If no mask */
else|else
block|{
name|m
operator|=
operator|&
name|no_mask
expr_stmt|;
comment|/*  This function assumes the source has no alpha channel and        *  the destination has an alpha channel.  So dest_bytes = bytes + 1        */
if|if
condition|(
name|bytes
operator|==
literal|3
operator|&&
name|affect
index|[
literal|0
index|]
operator|&&
name|affect
index|[
literal|1
index|]
operator|&&
name|affect
index|[
literal|2
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|affect
index|[
name|bytes
index|]
condition|)
name|opacity
operator|=
literal|0
expr_stmt|;
name|destp
operator|=
name|dest
operator|+
name|bytes
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
name|dest
index|[
literal|0
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|1
index|]
operator|=
name|src
index|[
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|2
index|]
operator|=
name|src
index|[
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|3
index|]
operator|=
name|opacity
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
name|dest
operator|+=
name|dest_bytes
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|bytes
condition|;
name|b
operator|++
control|)
block|{
name|destp
operator|=
name|dest
operator|+
name|b
expr_stmt|;
name|srcp
operator|=
name|src
operator|+
name|b
expr_stmt|;
name|l
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|affect
index|[
name|b
index|]
condition|)
while|while
condition|(
name|l
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
operator|*
name|srcp
expr_stmt|;
name|srcp
operator|+=
name|bytes
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
block|}
else|else
while|while
condition|(
name|l
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
literal|0
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
block|}
block|}
comment|/* fill the alpha channel */
if|if
condition|(
operator|!
name|affect
index|[
name|bytes
index|]
condition|)
name|opacity
operator|=
literal|0
expr_stmt|;
name|destp
operator|=
name|dest
operator|+
name|bytes
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
operator|*
name|destp
operator|=
name|opacity
expr_stmt|;
name|destp
operator|+=
name|dest_bytes
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|inline
name|void
DECL|function|initial_inten_a_pixels (const guchar * src,guchar * dest,const guchar * mask,guint opacity,const gboolean * affect,guint length,guint bytes)
name|initial_inten_a_pixels
parameter_list|(
specifier|const
name|guchar
modifier|*
name|src
parameter_list|,
name|guchar
modifier|*
name|dest
parameter_list|,
specifier|const
name|guchar
modifier|*
name|mask
parameter_list|,
name|guint
name|opacity
parameter_list|,
specifier|const
name|gboolean
modifier|*
name|affect
parameter_list|,
name|guint
name|length
parameter_list|,
name|guint
name|bytes
parameter_list|)
block|{
name|gint
name|alpha
decl_stmt|,
name|b
decl_stmt|;
specifier|const
name|guchar
modifier|*
name|m
decl_stmt|;
name|glong
name|tmp
decl_stmt|;
name|alpha
operator|=
name|bytes
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|mask
condition|)
block|{
name|m
operator|=
name|mask
expr_stmt|;
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|src
index|[
name|b
index|]
operator|*
name|affect
index|[
name|b
index|]
expr_stmt|;
comment|/*  Set the alpha channel  */
name|dest
index|[
name|alpha
index|]
operator|=
name|affect
index|[
name|alpha
index|]
condition|?
name|INT_MULT3
argument_list|(
name|opacity
argument_list|,
name|src
index|[
name|alpha
index|]
argument_list|,
operator|*
name|m
argument_list|,
name|tmp
argument_list|)
else|:
literal|0
expr_stmt|;
name|m
operator|++
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|length
operator|--
condition|)
block|{
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|alpha
condition|;
name|b
operator|++
control|)
name|dest
index|[
name|b
index|]
operator|=
name|src
index|[
name|b
index|]
operator|*
name|affect
index|[
name|b
index|]
expr_stmt|;
comment|/*  Set the alpha channel  */
name|dest
index|[
name|alpha
index|]
operator|=
name|affect
index|[
name|alpha
index|]
condition|?
name|INT_MULT
argument_list|(
name|opacity
argument_list|,
name|src
index|[
name|alpha
index|]
argument_list|,
name|tmp
argument_list|)
else|:
literal|0
expr_stmt|;
name|dest
operator|+=
name|bytes
expr_stmt|;
name|src
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_normal_mode (struct apply_layer_mode_struct * alms)
name|layer_normal_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
comment|/*  assumes we're applying src2 TO src1  */
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_dissolve_mode (struct apply_layer_mode_struct * alms)
name|layer_dissolve_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
specifier|const
name|guint
name|has_alpha1
init|=
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes1
argument_list|)
decl_stmt|;
specifier|const
name|guint
name|has_alpha2
init|=
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes2
argument_list|)
decl_stmt|;
comment|/*  Since dissolve requires an alpha channel...  */
if|if
condition|(
operator|!
name|has_alpha2
condition|)
name|add_alpha_pixels
argument_list|(
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
name|dissolve_pixels
argument_list|(
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|x
argument_list|,
name|alms
operator|->
name|y
argument_list|,
name|alms
operator|->
name|opacity
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|,
operator|(
name|has_alpha2
condition|?
name|alms
operator|->
name|bytes2
else|:
name|alms
operator|->
name|bytes2
operator|+
literal|1
operator|)
argument_list|,
name|has_alpha2
argument_list|)
expr_stmt|;
name|alms
operator|->
name|combine
operator|=
name|has_alpha1
condition|?
name|COMBINE_INTEN_A_INTEN_A
else|:
name|COMBINE_INTEN_INTEN_A
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_multiply_mode (struct apply_layer_mode_struct * alms)
name|layer_multiply_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|multiply_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_divide_mode (struct apply_layer_mode_struct * alms)
name|layer_divide_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|divide_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_screen_mode (struct apply_layer_mode_struct * alms)
name|layer_screen_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|screen_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_overlay_mode (struct apply_layer_mode_struct * alms)
name|layer_overlay_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|overlay_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_difference_mode (struct apply_layer_mode_struct * alms)
name|layer_difference_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|difference_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_addition_mode (struct apply_layer_mode_struct * alms)
name|layer_addition_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|add_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_subtract_mode (struct apply_layer_mode_struct * alms)
name|layer_subtract_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|subtract_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_darken_only_mode (struct apply_layer_mode_struct * alms)
name|layer_darken_only_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|darken_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_lighten_only_mode (struct apply_layer_mode_struct * alms)
name|layer_lighten_only_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|lighten_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_hue_mode (struct apply_layer_mode_struct * alms)
name|layer_hue_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
comment|/*  only works on RGB color images  */
if|if
condition|(
name|alms
operator|->
name|bytes1
operator|>
literal|2
condition|)
name|hue_only_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_saturation_mode (struct apply_layer_mode_struct * alms)
name|layer_saturation_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
comment|/*  only works on RGB color images  */
if|if
condition|(
name|alms
operator|->
name|bytes1
operator|>
literal|2
condition|)
name|saturation_only_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_value_mode (struct apply_layer_mode_struct * alms)
name|layer_value_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
comment|/*  only works on RGB color images  */
if|if
condition|(
name|alms
operator|->
name|bytes1
operator|>
literal|2
condition|)
name|value_only_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_color_mode (struct apply_layer_mode_struct * alms)
name|layer_color_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
comment|/*  only works on RGB color images  */
if|if
condition|(
name|alms
operator|->
name|bytes1
operator|>
literal|2
condition|)
name|color_only_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_behind_mode (struct apply_layer_mode_struct * alms)
name|layer_behind_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
if|if
condition|(
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes1
argument_list|)
condition|)
name|alms
operator|->
name|combine
operator|=
name|BEHIND_INTEN
expr_stmt|;
else|else
name|alms
operator|->
name|combine
operator|=
name|NO_COMBINATION
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_replace_mode (struct apply_layer_mode_struct * alms)
name|layer_replace_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
name|alms
operator|->
name|combine
operator|=
name|REPLACE_INTEN
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_erase_mode (struct apply_layer_mode_struct * alms)
name|layer_erase_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
comment|/*  If both sources have alpha channels, call erase function.    *  Otherwise, just combine in the normal manner    */
name|alms
operator|->
name|combine
operator|=
operator|(
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes1
argument_list|)
operator|&&
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes2
argument_list|)
operator|)
condition|?
name|ERASE_INTEN
else|:
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_anti_erase_mode (struct apply_layer_mode_struct * alms)
name|layer_anti_erase_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
name|alms
operator|->
name|combine
operator|=
operator|(
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes1
argument_list|)
operator|&&
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes2
argument_list|)
operator|)
condition|?
name|ANTI_ERASE_INTEN
else|:
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_color_erase_mode (struct apply_layer_mode_struct * alms)
name|layer_color_erase_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
operator|=
name|alms
operator|->
name|src2
expr_stmt|;
name|alms
operator|->
name|combine
operator|=
operator|(
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes1
argument_list|)
operator|&&
name|HAS_ALPHA
argument_list|(
name|alms
operator|->
name|bytes2
argument_list|)
operator|)
condition|?
name|COLOR_ERASE_INTEN
else|:
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_dodge_mode (struct apply_layer_mode_struct * alms)
name|layer_dodge_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|dodge_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_burn_mode (struct apply_layer_mode_struct * alms)
name|layer_burn_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|burn_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
DECL|function|layer_hardlight_mode (struct apply_layer_mode_struct * alms)
name|layer_hardlight_mode
parameter_list|(
name|struct
name|apply_layer_mode_struct
modifier|*
name|alms
parameter_list|)
block|{
name|hardlight_pixels
argument_list|(
name|alms
operator|->
name|src1
argument_list|,
name|alms
operator|->
name|src2
argument_list|,
operator|*
operator|(
name|alms
operator|->
name|dest
operator|)
argument_list|,
name|alms
operator|->
name|length
argument_list|,
name|alms
operator|->
name|bytes1
argument_list|,
name|alms
operator|->
name|bytes2
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  __PAINT_FUNCS_GENERIC_H__  */
end_comment

end_unit

