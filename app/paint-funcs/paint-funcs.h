begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* The GIMP -- an image manipulation program  * Copyright (C) 1995 Spencer Kimball and Peter Mattis  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_comment
comment|/*  * gaussian_blur_region no longer does combination; arguments changed  *   -- scott@poverty.bloomington.in.us, 16Oct97  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PAINT_FUNCS_H__
end_ifndef

begin_define
DECL|macro|__PAINT_FUNCS_H__
define|#
directive|define
name|__PAINT_FUNCS_H__
end_define

begin_include
include|#
directive|include
file|"pixel_region.h"
end_include

begin_comment
comment|/*  Called initially to setup accelerated rendering features  */
end_comment

begin_function_decl
name|void
name|paint_funcs_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|paint_funcs_free
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Paint functions  */
end_comment

begin_function_decl
name|void
name|color_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|blend_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|shade_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extract_alpha_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|darken_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lighten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hsv_only_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|color_only_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|multiply_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|screen_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|overlay_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|add_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|subtract_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|difference_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dissolve_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|swap_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scale_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|add_alpha_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|flatten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gray_to_rgb_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  apply the mask data to the alpha channel of the pixel data  */
end_comment

begin_function_decl
name|void
name|apply_mask_to_alpha_channel
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine the mask data with the alpha channel of the pixel data  */
end_comment

begin_function_decl
name|void
name|combine_mask_and_alpha_channel
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  copy gray pixels to intensity-alpha pixels.  This function  *  essentially takes a source that is only a grayscale image and  *  copies it to the destination, expanding to RGB if necessary and  *  adding an alpha channel.  (OPAQUE)  */
end_comment

begin_function_decl
name|void
name|copy_gray_to_inten_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  lay down the initial pixels in the case of only one  *  channel being visible and no layers...In this singular  *  case, we want to display a grayscale image w/o transparency  */
end_comment

begin_function_decl
name|void
name|initial_channel_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  lay down the initial pixels in the case of an indexed image.  *  This process obviously requires no composition  */
end_comment

begin_function_decl
name|void
name|initial_indexed_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  lay down the initial pixels in the case of an indexed image.  *  This process obviously requires no composition  */
end_comment

begin_function_decl
name|void
name|initial_indexed_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  lay down the initial pixels for the base layer.  *  This process obviously requires no composition.  */
end_comment

begin_function_decl
name|void
name|initial_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  lay down the initial pixels for the base layer.  *  This process obviously requires no composition.  */
end_comment

begin_function_decl
name|void
name|initial_inten_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine indexed images with an optional mask which  *  is interpreted as binary...destination is indexed...  */
end_comment

begin_function_decl
name|void
name|combine_indexed_and_indexed_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine indexed images with indexed-alpha images  *  result is an indexed image  */
end_comment

begin_function_decl
name|void
name|combine_indexed_and_indexed_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine indexed-alpha images with indexed-alpha images  *  result is an indexed-alpha image.  use this for painting  *  to an indexed floating sel  */
end_comment

begin_function_decl
name|void
name|combine_indexed_a_and_indexed_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine intensity with indexed, destination is  *  intensity-alpha...use this for an indexed floating sel  */
end_comment

begin_function_decl
name|void
name|combine_inten_a_and_indexed_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine RGB image with RGB or GRAY with GRAY  *  destination is intensity-only...  */
end_comment

begin_function_decl
name|void
name|combine_inten_and_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine an RGBA or GRAYA image with an RGB or GRAY image  *  destination is intensity-only...  */
end_comment

begin_function_decl
name|void
name|combine_inten_and_inten_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine an RGB or GRAY image with an RGBA or GRAYA image  *  destination is intensity-alpha...  */
end_comment

begin_function_decl
name|void
name|combine_inten_a_and_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine an RGBA or GRAYA image with an RGBA or GRAYA image  *  destination is of course intensity-alpha...  */
end_comment

begin_function_decl
name|void
name|combine_inten_a_and_inten_a_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  combine a channel with intensity-alpha pixels based  *  on some opacity, and a channel color...  *  destination is intensity-alpha  */
end_comment

begin_function_decl
name|void
name|combine_inten_a_and_channel_mask_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|combine_inten_a_and_channel_selection_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  paint "behind" the existing pixel row.  *  This is similar in appearance to painting on a layer below  *  the existing pixels.  */
end_comment

begin_function_decl
name|void
name|behind_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  paint "behind" the existing pixel row (for indexed images).  *  This is similar in appearance to painting on a layer below  *  the existing pixels.  */
end_comment

begin_function_decl
name|void
name|behind_indexed_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  replace the contents of one pixel row with the other  *  The operation is still bounded by mask/opacity constraints  */
end_comment

begin_function_decl
name|void
name|replace_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  replace the contents of one pixel row with the other  *  The operation is still bounded by mask/opacity constraints  */
end_comment

begin_function_decl
name|void
name|replace_indexed_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  apply source 2 to source 1, but in a non-additive way,  *  multiplying alpha channels  (works for intensity)  */
end_comment

begin_function_decl
name|void
name|erase_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  apply source 2 to source 1, but in a non-additive way,  *  multiplying alpha channels  (works for indexed)  */
end_comment

begin_function_decl
name|void
name|erase_indexed_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  extract information from intensity pixels based on  *  a mask.  */
end_comment

begin_function_decl
name|void
name|extract_from_inten_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  extract information from indexed pixels based on  *  a mask.  */
end_comment

begin_function_decl
name|void
name|extract_from_indexed_pixels
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  variable source to RGB color mapping  *  src_type == 0  (RGB)  *  src_type == 1  (GRAY)  *  src_type == 2  (INDEXED)  */
end_comment

begin_function_decl
name|void
name|map_to_color
parameter_list|(
name|int
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  RGB to index mapping functions...  *  *  Hash table lookup speeds up the standard  *  least squares method  */
end_comment

begin_function_decl
name|int
name|map_rgb_to_indexed
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Region functions  */
end_comment

begin_function_decl
name|void
name|color_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|blend_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|shade_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|copy_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|add_alpha_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|flatten_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extract_alpha_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extract_from_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  The types of convolutions  */
end_comment

begin_define
DECL|macro|NORMAL
define|#
directive|define
name|NORMAL
value|0
end_define

begin_comment
DECL|macro|NORMAL
comment|/*  Negative numbers truncated  */
end_comment

begin_define
DECL|macro|ABSOLUTE
define|#
directive|define
name|ABSOLUTE
value|1
end_define

begin_comment
DECL|macro|ABSOLUTE
comment|/*  Absolute value              */
end_comment

begin_define
DECL|macro|NEGATIVE
define|#
directive|define
name|NEGATIVE
value|2
end_define

begin_comment
DECL|macro|NEGATIVE
comment|/*  add 127 to values           */
end_comment

begin_function_decl
name|void
name|convolve_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gaussian_blur_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|double
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|border_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scale_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scale_region_no_resample
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|subsample_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|float
name|shapeburst_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  The types of thinning  */
end_comment

begin_define
DECL|macro|SHRINK_REGION
define|#
directive|define
name|SHRINK_REGION
value|0
end_define

begin_define
DECL|macro|GROW_REGION
define|#
directive|define
name|GROW_REGION
value|1
end_define

begin_function_decl
name|int
name|thin_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|swap_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Apply a mask to an image's alpha channel  */
end_comment

begin_function_decl
name|void
name|apply_mask_to_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Combine a mask with an image's alpha channel  */
end_comment

begin_function_decl
name|void
name|combine_mask_and_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Copy a gray image to an intensity-alpha region  */
end_comment

begin_function_decl
name|void
name|copy_gray_to_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Lay down the groundwork for layer construction...  *  This includes background images for indexed or non-alpha  *  images, floating selections, selective display of intensity  *  channels, and display of arbitrary mask channels  */
end_comment

begin_define
DECL|macro|INITIAL_CHANNEL_MASK
define|#
directive|define
name|INITIAL_CHANNEL_MASK
value|0
end_define

begin_define
DECL|macro|INITIAL_CHANNEL_SELECTION
define|#
directive|define
name|INITIAL_CHANNEL_SELECTION
value|1
end_define

begin_define
DECL|macro|INITIAL_INDEXED
define|#
directive|define
name|INITIAL_INDEXED
value|2
end_define

begin_define
DECL|macro|INITIAL_INDEXED_ALPHA
define|#
directive|define
name|INITIAL_INDEXED_ALPHA
value|3
end_define

begin_define
DECL|macro|INITIAL_INTENSITY
define|#
directive|define
name|INITIAL_INTENSITY
value|4
end_define

begin_define
DECL|macro|INITIAL_INTENSITY_ALPHA
define|#
directive|define
name|INITIAL_INTENSITY_ALPHA
value|5
end_define

begin_function_decl
name|void
name|initial_region
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Combine two source regions with the help of an optional mask  *  region into a destination region.  This is used for constructing  *  layer projections, and for applying image patches to an image  */
end_comment

begin_define
DECL|macro|COMBINE_INDEXED_INDEXED
define|#
directive|define
name|COMBINE_INDEXED_INDEXED
value|0
end_define

begin_define
DECL|macro|COMBINE_INDEXED_INDEXED_A
define|#
directive|define
name|COMBINE_INDEXED_INDEXED_A
value|1
end_define

begin_define
DECL|macro|COMBINE_INDEXED_A_INDEXED_A
define|#
directive|define
name|COMBINE_INDEXED_A_INDEXED_A
value|2
end_define

begin_define
DECL|macro|COMBINE_INTEN_A_INDEXED_A
define|#
directive|define
name|COMBINE_INTEN_A_INDEXED_A
value|3
end_define

begin_define
DECL|macro|COMBINE_INTEN_A_CHANNEL_MASK
define|#
directive|define
name|COMBINE_INTEN_A_CHANNEL_MASK
value|4
end_define

begin_define
DECL|macro|COMBINE_INTEN_A_CHANNEL_SELECTION
define|#
directive|define
name|COMBINE_INTEN_A_CHANNEL_SELECTION
value|5
end_define

begin_define
DECL|macro|COMBINE_INTEN_INTEN
define|#
directive|define
name|COMBINE_INTEN_INTEN
value|6
end_define

begin_define
DECL|macro|COMBINE_INTEN_INTEN_A
define|#
directive|define
name|COMBINE_INTEN_INTEN_A
value|7
end_define

begin_define
DECL|macro|COMBINE_INTEN_A_INTEN
define|#
directive|define
name|COMBINE_INTEN_A_INTEN
value|8
end_define

begin_define
DECL|macro|COMBINE_INTEN_A_INTEN_A
define|#
directive|define
name|COMBINE_INTEN_A_INTEN_A
value|9
end_define

begin_comment
comment|/*  Non-conventional combination modes  */
end_comment

begin_define
DECL|macro|BEHIND_INTEN
define|#
directive|define
name|BEHIND_INTEN
value|20
end_define

begin_define
DECL|macro|BEHIND_INDEXED
define|#
directive|define
name|BEHIND_INDEXED
value|21
end_define

begin_define
DECL|macro|REPLACE_INTEN
define|#
directive|define
name|REPLACE_INTEN
value|22
end_define

begin_define
DECL|macro|REPLACE_INDEXED
define|#
directive|define
name|REPLACE_INDEXED
value|23
end_define

begin_define
DECL|macro|ERASE_INTEN
define|#
directive|define
name|ERASE_INTEN
value|24
end_define

begin_define
DECL|macro|ERASE_INDEXED
define|#
directive|define
name|ERASE_INDEXED
value|25
end_define

begin_define
DECL|macro|NO_COMBINATION
define|#
directive|define
name|NO_COMBINATION
value|26
end_define

begin_function_decl
name|void
name|combine_regions
parameter_list|(
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|PixelRegion
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  Color conversion routines  */
end_comment

begin_function_decl
name|void
name|rgb_to_hsv
parameter_list|(
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hsv_to_rgb
parameter_list|(
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rgb_to_hls
parameter_list|(
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hls_to_rgb
parameter_list|(
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Opacities */
end_comment

begin_define
DECL|macro|TRANSPARENT
define|#
directive|define
name|TRANSPARENT
value|0
end_define

begin_define
DECL|macro|OPAQUE
define|#
directive|define
name|OPAQUE
value|255
end_define

begin_comment
comment|/*  Layer Modes  */
end_comment

begin_define
DECL|macro|NORMAL_MODE
define|#
directive|define
name|NORMAL_MODE
value|0
end_define

begin_define
DECL|macro|DISSOLVE_MODE
define|#
directive|define
name|DISSOLVE_MODE
value|1
end_define

begin_define
DECL|macro|BEHIND_MODE
define|#
directive|define
name|BEHIND_MODE
value|2
end_define

begin_define
DECL|macro|MULTIPLY_MODE
define|#
directive|define
name|MULTIPLY_MODE
value|3
end_define

begin_define
DECL|macro|SCREEN_MODE
define|#
directive|define
name|SCREEN_MODE
value|4
end_define

begin_define
DECL|macro|OVERLAY_MODE
define|#
directive|define
name|OVERLAY_MODE
value|5
end_define

begin_define
DECL|macro|DIFFERENCE_MODE
define|#
directive|define
name|DIFFERENCE_MODE
value|6
end_define

begin_define
DECL|macro|ADDITION_MODE
define|#
directive|define
name|ADDITION_MODE
value|7
end_define

begin_define
DECL|macro|SUBTRACT_MODE
define|#
directive|define
name|SUBTRACT_MODE
value|8
end_define

begin_define
DECL|macro|DARKEN_ONLY_MODE
define|#
directive|define
name|DARKEN_ONLY_MODE
value|9
end_define

begin_define
DECL|macro|LIGHTEN_ONLY_MODE
define|#
directive|define
name|LIGHTEN_ONLY_MODE
value|10
end_define

begin_define
DECL|macro|HUE_MODE
define|#
directive|define
name|HUE_MODE
value|11
end_define

begin_define
DECL|macro|SATURATION_MODE
define|#
directive|define
name|SATURATION_MODE
value|12
end_define

begin_define
DECL|macro|COLOR_MODE
define|#
directive|define
name|COLOR_MODE
value|13
end_define

begin_define
DECL|macro|VALUE_MODE
define|#
directive|define
name|VALUE_MODE
value|14
end_define

begin_define
DECL|macro|ERASE_MODE
define|#
directive|define
name|ERASE_MODE
value|20
end_define

begin_define
DECL|macro|REPLACE_MODE
define|#
directive|define
name|REPLACE_MODE
value|21
end_define

begin_comment
comment|/*  Applying layer modes...  */
end_comment

begin_function_decl
name|int
name|apply_layer_mode
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|apply_indexed_layer_mode
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  __PAINT_FUNCS_H__  */
end_comment

end_unit

