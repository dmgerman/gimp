begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* GIMP - The GNU Image Manipulation Program  * gimpblendcomposite  * Copyright (C) 2017 Ãyvind KolÃ¥s<pippin@gimp.org>  *  * This program is free software: you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program.  If not, see<http://www.gnu.org/licenses/>.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GIMP_BLEND_COMPOSITE_H__
end_ifndef

begin_define
DECL|macro|__GIMP_BLEND_COMPOSITE_H__
define|#
directive|define
name|__GIMP_BLEND_COMPOSITE_H__
end_define

begin_include
include|#
directive|include
file|<cairo.h>
end_include

begin_include
include|#
directive|include
file|<gdk-pixbuf/gdk-pixbuf.h>
end_include

begin_include
include|#
directive|include
file|"libgimpcolor/gimpcolor.h"
end_include

begin_include
include|#
directive|include
file|"libgimpmath/gimpmath.h"
end_include

begin_decl_stmt
specifier|extern
specifier|const
name|Babl
modifier|*
name|_gimp_fish_rgba_to_perceptual
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|Babl
modifier|*
name|_gimp_fish_perceptual_to_rgba
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|Babl
modifier|*
name|_gimp_fish_perceptual_to_laba
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|Babl
modifier|*
name|_gimp_fish_rgba_to_laba
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|Babl
modifier|*
name|_gimp_fish_laba_to_rgba
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|Babl
modifier|*
name|_gimp_fish_laba_to_perceptual
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|void
DECL|function|compfun_src_atop (gfloat * in,gfloat * layer,gfloat * mask,gfloat opacity,gfloat * out,gint samples)
name|compfun_src_atop
parameter_list|(
name|gfloat
modifier|*
name|in
parameter_list|,
name|gfloat
modifier|*
name|layer
parameter_list|,
name|gfloat
modifier|*
name|mask
parameter_list|,
name|gfloat
name|opacity
parameter_list|,
name|gfloat
modifier|*
name|out
parameter_list|,
name|gint
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
name|gfloat
name|layer_alpha
init|=
name|layer
index|[
name|ALPHA
index|]
operator|*
name|opacity
decl_stmt|;
if|if
condition|(
name|mask
condition|)
name|layer_alpha
operator|*=
operator|*
name|mask
expr_stmt|;
if|if
condition|(
name|layer_alpha
operator|==
literal|0.0f
condition|)
block|{
name|out
index|[
name|RED
index|]
operator|=
name|in
index|[
name|RED
index|]
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|in
index|[
name|GREEN
index|]
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|in
index|[
name|BLUE
index|]
expr_stmt|;
block|}
else|else
block|{
name|gint
name|b
decl_stmt|;
for|for
control|(
name|b
operator|=
name|RED
init|;
name|b
operator|<
name|ALPHA
condition|;
name|b
operator|++
control|)
name|out
index|[
name|b
index|]
operator|=
name|layer
index|[
name|b
index|]
operator|*
name|layer_alpha
operator|+
name|in
index|[
name|b
index|]
operator|*
operator|(
literal|1.0f
operator|-
name|layer_alpha
operator|)
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|in
index|[
name|ALPHA
index|]
expr_stmt|;
name|in
operator|+=
literal|4
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|layer
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|mask
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|compfun_src_over (gfloat * in,gfloat * layer,gfloat * comp,gfloat * mask,gfloat opacity,gfloat * out,gint samples)
name|compfun_src_over
parameter_list|(
name|gfloat
modifier|*
name|in
parameter_list|,
name|gfloat
modifier|*
name|layer
parameter_list|,
name|gfloat
modifier|*
name|comp
parameter_list|,
name|gfloat
modifier|*
name|mask
parameter_list|,
name|gfloat
name|opacity
parameter_list|,
name|gfloat
modifier|*
name|out
parameter_list|,
name|gint
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
name|gfloat
name|new_alpha
decl_stmt|;
name|gfloat
name|layer_alpha
init|=
name|layer
index|[
name|ALPHA
index|]
operator|*
name|opacity
decl_stmt|;
if|if
condition|(
name|mask
condition|)
name|layer_alpha
operator|*=
operator|*
name|mask
expr_stmt|;
name|new_alpha
operator|=
name|layer_alpha
operator|+
operator|(
literal|1.0f
operator|-
name|layer_alpha
operator|)
operator|*
name|in
index|[
name|ALPHA
index|]
expr_stmt|;
if|if
condition|(
name|layer_alpha
operator|==
literal|0.0f
operator|||
name|new_alpha
operator|==
literal|0.0f
condition|)
block|{
name|out
index|[
name|RED
index|]
operator|=
name|in
index|[
name|RED
index|]
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|in
index|[
name|GREEN
index|]
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|in
index|[
name|BLUE
index|]
expr_stmt|;
block|}
else|else
block|{
name|gfloat
name|ratio
init|=
name|layer_alpha
operator|/
name|new_alpha
decl_stmt|;
name|gint
name|b
decl_stmt|;
for|for
control|(
name|b
operator|=
name|RED
init|;
name|b
operator|<
name|ALPHA
condition|;
name|b
operator|++
control|)
name|out
index|[
name|b
index|]
operator|=
name|ratio
operator|*
operator|(
name|in
index|[
name|ALPHA
index|]
operator|*
operator|(
name|comp
index|[
name|b
index|]
operator|-
name|layer
index|[
name|b
index|]
operator|)
operator|+
name|layer
index|[
name|b
index|]
operator|-
name|in
index|[
name|b
index|]
operator|)
operator|+
name|in
index|[
name|b
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|new_alpha
expr_stmt|;
name|in
operator|+=
literal|4
expr_stmt|;
name|layer
operator|+=
literal|4
expr_stmt|;
name|comp
operator|+=
literal|4
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|mask
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|compfun_dst_atop (gfloat * in,gfloat * layer,gfloat * comp,gfloat * mask,gfloat opacity,gfloat * out,gint samples)
name|compfun_dst_atop
parameter_list|(
name|gfloat
modifier|*
name|in
parameter_list|,
name|gfloat
modifier|*
name|layer
parameter_list|,
name|gfloat
modifier|*
name|comp
parameter_list|,
name|gfloat
modifier|*
name|mask
parameter_list|,
name|gfloat
name|opacity
parameter_list|,
name|gfloat
modifier|*
name|out
parameter_list|,
name|gint
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
name|gfloat
name|layer_alpha
init|=
name|layer
index|[
name|ALPHA
index|]
operator|*
name|opacity
decl_stmt|;
if|if
condition|(
name|mask
condition|)
name|layer_alpha
operator|*=
operator|*
name|mask
expr_stmt|;
if|if
condition|(
name|layer_alpha
operator|==
literal|0.0f
condition|)
block|{
name|out
index|[
name|RED
index|]
operator|=
name|in
index|[
name|RED
index|]
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|in
index|[
name|GREEN
index|]
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|in
index|[
name|BLUE
index|]
expr_stmt|;
block|}
else|else
block|{
name|gint
name|b
decl_stmt|;
for|for
control|(
name|b
operator|=
name|RED
init|;
name|b
operator|<
name|ALPHA
condition|;
name|b
operator|++
control|)
name|out
index|[
name|b
index|]
operator|=
name|comp
index|[
name|b
index|]
operator|*
name|in
index|[
name|ALPHA
index|]
operator|+
name|layer
index|[
name|b
index|]
operator|*
operator|(
literal|1.0f
operator|-
name|in
index|[
name|ALPHA
index|]
operator|)
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|layer_alpha
expr_stmt|;
name|in
operator|+=
literal|4
expr_stmt|;
name|layer
operator|+=
literal|4
expr_stmt|;
name|comp
operator|+=
literal|4
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|mask
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|compfun_src_in (gfloat * in,gfloat * layer,gfloat * mask,gfloat opacity,gfloat * out,gint samples)
name|compfun_src_in
parameter_list|(
name|gfloat
modifier|*
name|in
parameter_list|,
name|gfloat
modifier|*
name|layer
parameter_list|,
name|gfloat
modifier|*
name|mask
parameter_list|,
name|gfloat
name|opacity
parameter_list|,
name|gfloat
modifier|*
name|out
parameter_list|,
name|gint
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
name|gfloat
name|new_alpha
init|=
name|in
index|[
name|ALPHA
index|]
operator|*
name|layer
index|[
name|ALPHA
index|]
operator|*
name|opacity
decl_stmt|;
if|if
condition|(
name|mask
condition|)
name|new_alpha
operator|*=
operator|*
name|mask
expr_stmt|;
if|if
condition|(
name|new_alpha
operator|==
literal|0.0f
condition|)
block|{
name|out
index|[
name|RED
index|]
operator|=
name|in
index|[
name|RED
index|]
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|in
index|[
name|GREEN
index|]
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|in
index|[
name|BLUE
index|]
expr_stmt|;
block|}
else|else
block|{
name|out
index|[
name|RED
index|]
operator|=
name|layer
index|[
name|RED
index|]
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|layer
index|[
name|GREEN
index|]
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|layer
index|[
name|BLUE
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|new_alpha
expr_stmt|;
name|in
operator|+=
literal|4
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|layer
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|mask
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|gimp_composite_blend (gpointer op,gfloat * in,gfloat * layer,gfloat * mask,gfloat * out,glong samples,GimpBlendFunc blend_func)
name|gimp_composite_blend
parameter_list|(
name|gpointer
name|op
parameter_list|,
name|gfloat
modifier|*
name|in
parameter_list|,
name|gfloat
modifier|*
name|layer
parameter_list|,
name|gfloat
modifier|*
name|mask
parameter_list|,
name|gfloat
modifier|*
name|out
parameter_list|,
name|glong
name|samples
parameter_list|,
name|GimpBlendFunc
name|blend_func
parameter_list|)
block|{
name|GimpOperationLayerMode
modifier|*
name|layer_mode
init|=
name|op
decl_stmt|;
name|gfloat
name|opacity
init|=
name|layer_mode
operator|->
name|opacity
decl_stmt|;
name|GimpLayerColorSpace
name|blend_space
init|=
name|layer_mode
operator|->
name|blend_space
decl_stmt|;
name|GimpLayerColorSpace
name|composite_space
init|=
name|layer_mode
operator|->
name|composite_space
decl_stmt|;
name|GimpLayerCompositeMode
name|composite_mode
init|=
name|layer_mode
operator|->
name|composite_mode
decl_stmt|;
name|gfloat
modifier|*
name|blend_in
init|=
name|in
decl_stmt|;
name|gfloat
modifier|*
name|blend_layer
init|=
name|layer
decl_stmt|;
name|gfloat
modifier|*
name|blend_out
init|=
name|out
decl_stmt|;
name|gfloat
modifier|*
name|composite_in
init|=
name|NULL
decl_stmt|;
name|gfloat
modifier|*
name|composite_layer
init|=
name|NULL
decl_stmt|;
name|gboolean
name|composite_needs_in_color
init|=
name|composite_mode
operator|==
name|GIMP_LAYER_COMPOSITE_SRC_OVER
operator|||
name|composite_mode
operator|==
name|GIMP_LAYER_COMPOSITE_SRC_ATOP
decl_stmt|;
name|gboolean
name|composite_needs_layer_color
init|=
name|composite_mode
operator|==
name|GIMP_LAYER_COMPOSITE_SRC_OVER
operator|||
name|composite_mode
operator|==
name|GIMP_LAYER_COMPOSITE_DST_ATOP
decl_stmt|;
specifier|const
name|Babl
modifier|*
name|fish_to_blend
init|=
name|NULL
decl_stmt|;
specifier|const
name|Babl
modifier|*
name|fish_to_composite
init|=
name|NULL
decl_stmt|;
specifier|const
name|Babl
modifier|*
name|fish_from_composite
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|blend_space
condition|)
block|{
default|default:
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_LINEAR
case|:
name|fish_to_blend
operator|=
name|NULL
expr_stmt|;
switch|switch
condition|(
name|composite_space
condition|)
block|{
case|case
name|GIMP_LAYER_COLOR_SPACE_LAB
case|:
name|fish_to_composite
operator|=
name|_gimp_fish_rgba_to_laba
expr_stmt|;
name|fish_from_composite
operator|=
name|_gimp_fish_laba_to_rgba
expr_stmt|;
break|break;
default|default:
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_LINEAR
case|:
name|fish_to_composite
operator|=
name|NULL
expr_stmt|;
name|fish_from_composite
operator|=
name|NULL
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL
case|:
name|fish_to_composite
operator|=
name|_gimp_fish_rgba_to_perceptual
expr_stmt|;
name|fish_from_composite
operator|=
name|_gimp_fish_perceptual_to_rgba
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_LAB
case|:
name|fish_to_blend
operator|=
name|_gimp_fish_rgba_to_laba
expr_stmt|;
switch|switch
condition|(
name|composite_space
condition|)
block|{
case|case
name|GIMP_LAYER_COLOR_SPACE_LAB
case|:
default|default:
name|fish_to_composite
operator|=
name|NULL
expr_stmt|;
name|fish_from_composite
operator|=
name|_gimp_fish_laba_to_rgba
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_LINEAR
case|:
name|fish_to_composite
operator|=
name|_gimp_fish_laba_to_rgba
expr_stmt|;
name|fish_from_composite
operator|=
name|NULL
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL
case|:
name|fish_to_composite
operator|=
name|_gimp_fish_laba_to_perceptual
expr_stmt|;
name|fish_from_composite
operator|=
name|_gimp_fish_perceptual_to_rgba
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL
case|:
name|fish_to_blend
operator|=
name|_gimp_fish_rgba_to_perceptual
expr_stmt|;
switch|switch
condition|(
name|composite_space
condition|)
block|{
case|case
name|GIMP_LAYER_COLOR_SPACE_LAB
case|:
default|default:
name|fish_to_composite
operator|=
name|_gimp_fish_perceptual_to_laba
expr_stmt|;
name|fish_from_composite
operator|=
name|NULL
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_LINEAR
case|:
name|fish_to_composite
operator|=
name|_gimp_fish_perceptual_to_rgba
expr_stmt|;
name|fish_from_composite
operator|=
name|NULL
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COLOR_SPACE_RGB_PERCEPTUAL
case|:
name|fish_to_composite
operator|=
name|NULL
expr_stmt|;
name|fish_from_composite
operator|=
name|_gimp_fish_perceptual_to_rgba
expr_stmt|;
break|break;
block|}
break|break;
block|}
if|if
condition|(
name|in
operator|==
name|out
condition|)
comment|/* in-place detected, avoid clobbering since we need to                     read it for the compositing stage  */
name|blend_out
operator|=
name|g_alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|gfloat
argument_list|)
operator|*
literal|4
operator|*
name|samples
argument_list|)
expr_stmt|;
if|if
condition|(
name|fish_to_blend
condition|)
block|{
if|if
condition|(
name|in
operator|!=
name|out
operator|||
operator|(
name|composite_needs_in_color
operator|&&
name|composite_space
operator|==
name|GIMP_LAYER_COLOR_SPACE_RGB_LINEAR
operator|)
condition|)
block|{
comment|/* don't convert input in-place if we're not doing in-place output,            * or if we're going to need the original input for compositing.            */
name|blend_in
operator|=
name|g_alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|gfloat
argument_list|)
operator|*
literal|4
operator|*
name|samples
argument_list|)
expr_stmt|;
block|}
name|blend_layer
operator|=
name|g_alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|gfloat
argument_list|)
operator|*
literal|4
operator|*
name|samples
argument_list|)
expr_stmt|;
name|babl_process
argument_list|(
name|fish_to_blend
argument_list|,
name|in
argument_list|,
name|blend_in
argument_list|,
name|samples
argument_list|)
expr_stmt|;
name|babl_process
argument_list|(
name|fish_to_blend
argument_list|,
name|layer
argument_list|,
name|blend_layer
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
name|blend_func
argument_list|(
name|blend_in
argument_list|,
name|blend_layer
argument_list|,
name|blend_out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
name|composite_in
operator|=
name|blend_in
expr_stmt|;
name|composite_layer
operator|=
name|blend_layer
expr_stmt|;
if|if
condition|(
name|fish_to_composite
condition|)
block|{
if|if
condition|(
name|composite_space
operator|==
name|GIMP_LAYER_COLOR_SPACE_RGB_LINEAR
condition|)
block|{
name|composite_in
operator|=
name|in
expr_stmt|;
name|composite_layer
operator|=
name|layer
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|composite_needs_in_color
condition|)
block|{
if|if
condition|(
name|composite_in
operator|==
name|in
operator|&&
name|in
operator|!=
name|out
condition|)
name|composite_in
operator|=
name|g_alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|gfloat
argument_list|)
operator|*
literal|4
operator|*
name|samples
argument_list|)
expr_stmt|;
name|babl_process
argument_list|(
name|fish_to_composite
argument_list|,
name|blend_in
argument_list|,
name|composite_in
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|composite_needs_layer_color
condition|)
block|{
if|if
condition|(
name|composite_layer
operator|==
name|layer
condition|)
name|composite_layer
operator|=
name|g_alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|gfloat
argument_list|)
operator|*
literal|4
operator|*
name|samples
argument_list|)
expr_stmt|;
name|babl_process
argument_list|(
name|fish_to_composite
argument_list|,
name|blend_layer
argument_list|,
name|composite_layer
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
block|}
name|babl_process
argument_list|(
name|fish_to_composite
argument_list|,
name|blend_out
argument_list|,
name|blend_out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|composite_mode
condition|)
block|{
case|case
name|GIMP_LAYER_COMPOSITE_SRC_ATOP
case|:
default|default:
name|compfun_src_atop
argument_list|(
name|composite_in
argument_list|,
name|blend_out
argument_list|,
name|mask
argument_list|,
name|opacity
argument_list|,
name|out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COMPOSITE_SRC_OVER
case|:
name|compfun_src_over
argument_list|(
name|composite_in
argument_list|,
name|composite_layer
argument_list|,
name|blend_out
argument_list|,
name|mask
argument_list|,
name|opacity
argument_list|,
name|out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COMPOSITE_DST_ATOP
case|:
name|compfun_dst_atop
argument_list|(
name|composite_in
argument_list|,
name|composite_layer
argument_list|,
name|blend_out
argument_list|,
name|mask
argument_list|,
name|opacity
argument_list|,
name|out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
break|break;
case|case
name|GIMP_LAYER_COMPOSITE_SRC_IN
case|:
name|compfun_src_in
argument_list|(
name|composite_in
argument_list|,
name|blend_out
argument_list|,
name|mask
argument_list|,
name|opacity
argument_list|,
name|out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|fish_from_composite
condition|)
block|{
name|babl_process
argument_list|(
name|fish_from_composite
argument_list|,
name|out
argument_list|,
name|out
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_screen (const float * dest,const float * src,float * out,int samples)
name|blendfun_screen
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
literal|1.0f
operator|-
operator|(
literal|1.0f
operator|-
name|dest
index|[
name|c
index|]
operator|)
operator|*
operator|(
literal|1.0f
operator|-
name|src
index|[
name|c
index|]
operator|)
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
comment|/* aka linear_dodge */
DECL|function|blendfun_addition (const float * dest,const float * src,float * out,int samples)
name|blendfun_addition
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|+
name|src
index|[
name|c
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_linear_burn (const float * dest,const float * src,float * out,int samples)
name|blendfun_linear_burn
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|+
name|src
index|[
name|c
index|]
operator|-
literal|1.0f
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_subtract (const float * dest,const float * src,float * out,int samples)
name|blendfun_subtract
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|-
name|src
index|[
name|c
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_multiply (const float * dest,const float * src,float * out,int samples)
name|blendfun_multiply
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|*
name|src
index|[
name|c
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_normal (const float * dest,const float * src,float * out,int samples)
name|blendfun_normal
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|src
index|[
name|c
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_burn (const float * dest,const float * src,float * out,int samples)
name|blendfun_burn
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
init|=
literal|1.0f
operator|-
operator|(
literal|1.0f
operator|-
name|dest
index|[
name|c
index|]
operator|)
operator|/
name|src
index|[
name|c
index|]
decl_stmt|;
comment|/* The CLAMP macro is deliberately inlined and written                * to map comp == NAN (0 / 0) -> 1                */
name|out
index|[
name|c
index|]
operator|=
name|comp
operator|<
literal|0
condition|?
literal|0.0f
else|:
name|comp
operator|<
literal|1.0f
condition|?
name|comp
else|:
literal|1.0f
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_darken_only (const float * dest,const float * src,float * out,int samples)
name|blendfun_darken_only
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|MIN
argument_list|(
name|dest
index|[
name|c
index|]
argument_list|,
name|src
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_lighten_only (const float * dest,const float * src,float * out,int samples)
name|blendfun_lighten_only
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|MAX
argument_list|(
name|dest
index|[
name|c
index|]
argument_list|,
name|src
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_difference (const float * dest,const float * src,float * out,int samples)
name|blendfun_difference
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|-
name|src
index|[
name|c
index|]
expr_stmt|;
if|if
condition|(
name|out
index|[
name|c
index|]
operator|<
literal|0
condition|)
name|out
index|[
name|c
index|]
operator|=
operator|-
name|out
index|[
name|c
index|]
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_divide (const float * dest,const float * src,float * out,int samples)
name|blendfun_divide
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
init|=
name|dest
index|[
name|c
index|]
operator|/
name|src
index|[
name|c
index|]
decl_stmt|;
comment|/* make infinities(or NaN) correspond to a high number,                * to get more predictable math, ideally higher than 5.0                * but it seems like some babl conversions might be                * acting up then                */
if|if
condition|(
operator|!
operator|(
name|comp
operator|>
operator|-
literal|42949672.0f
operator|&&
name|comp
operator|<
literal|5.0f
operator|)
condition|)
name|comp
operator|=
literal|5.0f
expr_stmt|;
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_dodge (const float * dest,const float * src,float * out,int samples)
name|blendfun_dodge
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
init|=
name|dest
index|[
name|c
index|]
operator|/
operator|(
literal|1.0f
operator|-
name|src
index|[
name|c
index|]
operator|)
decl_stmt|;
name|comp
operator|=
name|MIN
argument_list|(
name|comp
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_grain_extract (const float * dest,const float * src,float * out,int samples)
name|blendfun_grain_extract
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|-
name|src
index|[
name|c
index|]
operator|+
literal|0.5f
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_grain_merge (const float * dest,const float * src,float * out,int samples)
name|blendfun_grain_merge
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|dest
index|[
name|c
index|]
operator|+
name|src
index|[
name|c
index|]
operator|-
literal|0.5f
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_hardlight (const float * dest,const float * src,float * out,int samples)
name|blendfun_hardlight
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
decl_stmt|;
if|if
condition|(
name|src
index|[
name|c
index|]
operator|>
literal|0.5f
condition|)
block|{
name|comp
operator|=
operator|(
literal|1.0f
operator|-
name|dest
index|[
name|c
index|]
operator|)
operator|*
operator|(
literal|1.0f
operator|-
operator|(
name|src
index|[
name|c
index|]
operator|-
literal|0.5f
operator|)
operator|*
literal|2.0f
operator|)
expr_stmt|;
name|comp
operator|=
name|MIN
argument_list|(
literal|1
operator|-
name|comp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
name|dest
index|[
name|c
index|]
operator|*
operator|(
name|src
index|[
name|c
index|]
operator|*
literal|2.0f
operator|)
expr_stmt|;
name|comp
operator|=
name|MIN
argument_list|(
name|comp
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_softlight (const float * dest,const float * src,float * out,int samples)
name|blendfun_softlight
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|multiply
init|=
name|dest
index|[
name|c
index|]
operator|*
name|src
index|[
name|c
index|]
decl_stmt|;
name|gfloat
name|screen
init|=
literal|1.0f
operator|-
operator|(
literal|1.0f
operator|-
name|dest
index|[
name|c
index|]
operator|)
operator|*
operator|(
literal|1.0f
operator|-
name|src
index|[
name|c
index|]
operator|)
decl_stmt|;
name|gfloat
name|comp
init|=
operator|(
literal|1.0f
operator|-
name|src
index|[
name|c
index|]
operator|)
operator|*
name|multiply
operator|+
name|dest
index|[
name|c
index|]
operator|*
name|screen
decl_stmt|;
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_overlay (const float * dest,const float * src,float * out,int samples)
name|blendfun_overlay
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
decl_stmt|;
if|if
condition|(
name|src
index|[
name|c
index|]
operator|<
literal|0.5f
condition|)
block|{
name|comp
operator|=
literal|2.0f
operator|*
name|dest
index|[
name|c
index|]
operator|*
name|src
index|[
name|c
index|]
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
literal|1.0f
operator|-
literal|2.0f
operator|*
operator|(
literal|1.0f
operator|-
name|src
index|[
name|c
index|]
operator|)
operator|*
operator|(
literal|1.0f
operator|-
name|dest
index|[
name|c
index|]
operator|)
expr_stmt|;
block|}
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_hsv_color (const float * dest,const float * src,float * out,int samples)
name|blendfun_hsv_color
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|GimpRGB
name|dest_rgb
init|=
block|{
name|dest
index|[
literal|0
index|]
block|,
name|dest
index|[
literal|1
index|]
block|,
name|dest
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpRGB
name|src_rgb
init|=
block|{
name|src
index|[
literal|0
index|]
block|,
name|src
index|[
literal|1
index|]
block|,
name|src
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpHSL
name|src_hsl
decl_stmt|,
name|dest_hsl
decl_stmt|;
name|gimp_rgb_to_hsl
argument_list|(
operator|&
name|dest_rgb
argument_list|,
operator|&
name|dest_hsl
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsl
argument_list|(
operator|&
name|src_rgb
argument_list|,
operator|&
name|src_hsl
argument_list|)
expr_stmt|;
name|dest_hsl
operator|.
name|h
operator|=
name|src_hsl
operator|.
name|h
expr_stmt|;
name|dest_hsl
operator|.
name|s
operator|=
name|src_hsl
operator|.
name|s
expr_stmt|;
name|gimp_hsl_to_rgb
argument_list|(
operator|&
name|dest_hsl
argument_list|,
operator|&
name|dest_rgb
argument_list|)
expr_stmt|;
name|out
index|[
name|RED
index|]
operator|=
name|dest_rgb
operator|.
name|r
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|dest_rgb
operator|.
name|g
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|dest_rgb
operator|.
name|b
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_hsv_hue (const float * dest,const float * src,float * out,int samples)
name|blendfun_hsv_hue
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|GimpRGB
name|dest_rgb
init|=
block|{
name|dest
index|[
literal|0
index|]
block|,
name|dest
index|[
literal|1
index|]
block|,
name|dest
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpRGB
name|src_rgb
init|=
block|{
name|src
index|[
literal|0
index|]
block|,
name|src
index|[
literal|1
index|]
block|,
name|src
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpHSV
name|src_hsv
decl_stmt|,
name|dest_hsv
decl_stmt|;
name|gimp_rgb_to_hsv
argument_list|(
operator|&
name|dest_rgb
argument_list|,
operator|&
name|dest_hsv
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsv
argument_list|(
operator|&
name|src_rgb
argument_list|,
operator|&
name|src_hsv
argument_list|)
expr_stmt|;
name|dest_hsv
operator|.
name|h
operator|=
name|src_hsv
operator|.
name|h
expr_stmt|;
name|gimp_hsv_to_rgb
argument_list|(
operator|&
name|dest_hsv
argument_list|,
operator|&
name|dest_rgb
argument_list|)
expr_stmt|;
name|out
index|[
name|RED
index|]
operator|=
name|dest_rgb
operator|.
name|r
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|dest_rgb
operator|.
name|g
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|dest_rgb
operator|.
name|b
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_hsv_saturation (const float * dest,const float * src,float * out,int samples)
name|blendfun_hsv_saturation
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|GimpRGB
name|dest_rgb
init|=
block|{
name|dest
index|[
literal|0
index|]
block|,
name|dest
index|[
literal|1
index|]
block|,
name|dest
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpRGB
name|src_rgb
init|=
block|{
name|src
index|[
literal|0
index|]
block|,
name|src
index|[
literal|1
index|]
block|,
name|src
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpHSV
name|src_hsv
decl_stmt|,
name|dest_hsv
decl_stmt|;
name|gimp_rgb_to_hsv
argument_list|(
operator|&
name|dest_rgb
argument_list|,
operator|&
name|dest_hsv
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsv
argument_list|(
operator|&
name|src_rgb
argument_list|,
operator|&
name|src_hsv
argument_list|)
expr_stmt|;
name|dest_hsv
operator|.
name|s
operator|=
name|src_hsv
operator|.
name|s
expr_stmt|;
name|gimp_hsv_to_rgb
argument_list|(
operator|&
name|dest_hsv
argument_list|,
operator|&
name|dest_rgb
argument_list|)
expr_stmt|;
name|out
index|[
name|RED
index|]
operator|=
name|dest_rgb
operator|.
name|r
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|dest_rgb
operator|.
name|g
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|dest_rgb
operator|.
name|b
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_hsv_value (const float * dest,const float * src,float * out,int samples)
name|blendfun_hsv_value
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|GimpRGB
name|dest_rgb
init|=
block|{
name|dest
index|[
literal|0
index|]
block|,
name|dest
index|[
literal|1
index|]
block|,
name|dest
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpRGB
name|src_rgb
init|=
block|{
name|src
index|[
literal|0
index|]
block|,
name|src
index|[
literal|1
index|]
block|,
name|src
index|[
literal|2
index|]
block|}
decl_stmt|;
name|GimpHSV
name|src_hsv
decl_stmt|,
name|dest_hsv
decl_stmt|;
name|gimp_rgb_to_hsv
argument_list|(
operator|&
name|dest_rgb
argument_list|,
operator|&
name|dest_hsv
argument_list|)
expr_stmt|;
name|gimp_rgb_to_hsv
argument_list|(
operator|&
name|src_rgb
argument_list|,
operator|&
name|src_hsv
argument_list|)
expr_stmt|;
name|dest_hsv
operator|.
name|v
operator|=
name|src_hsv
operator|.
name|v
expr_stmt|;
name|gimp_hsv_to_rgb
argument_list|(
operator|&
name|dest_hsv
argument_list|,
operator|&
name|dest_rgb
argument_list|)
expr_stmt|;
name|out
index|[
name|RED
index|]
operator|=
name|dest_rgb
operator|.
name|r
expr_stmt|;
name|out
index|[
name|GREEN
index|]
operator|=
name|dest_rgb
operator|.
name|g
expr_stmt|;
name|out
index|[
name|BLUE
index|]
operator|=
name|dest_rgb
operator|.
name|b
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_lch_chroma (const float * dest,const float * src,float * out,int samples)
name|blendfun_lch_chroma
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gfloat
name|A1
init|=
name|dest
index|[
literal|1
index|]
decl_stmt|;
name|gfloat
name|B1
init|=
name|dest
index|[
literal|2
index|]
decl_stmt|;
name|gfloat
name|c1
init|=
name|hypotf
argument_list|(
name|A1
argument_list|,
name|B1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|0.0f
condition|)
block|{
name|gfloat
name|A2
init|=
name|src
index|[
literal|1
index|]
decl_stmt|;
name|gfloat
name|B2
init|=
name|src
index|[
literal|2
index|]
decl_stmt|;
name|gfloat
name|c2
init|=
name|hypotf
argument_list|(
name|A2
argument_list|,
name|B2
argument_list|)
decl_stmt|;
name|gfloat
name|A
init|=
name|c2
operator|*
name|A1
operator|/
name|c1
decl_stmt|;
name|gfloat
name|B
init|=
name|c2
operator|*
name|B1
operator|/
name|c1
decl_stmt|;
name|out
index|[
literal|0
index|]
operator|=
name|dest
index|[
literal|0
index|]
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|=
name|A
expr_stmt|;
name|out
index|[
literal|2
index|]
operator|=
name|B
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_lch_color (const float * dest,const float * src,float * out,int samples)
name|blendfun_lch_color
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|out
index|[
literal|0
index|]
operator|=
name|dest
index|[
literal|0
index|]
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|=
name|src
index|[
literal|1
index|]
expr_stmt|;
name|out
index|[
literal|2
index|]
operator|=
name|src
index|[
literal|2
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_lch_hue (const float * dest,const float * src,float * out,int samples)
name|blendfun_lch_hue
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gfloat
name|A2
init|=
name|src
index|[
literal|1
index|]
decl_stmt|;
name|gfloat
name|B2
init|=
name|src
index|[
literal|2
index|]
decl_stmt|;
name|gfloat
name|c2
init|=
name|hypotf
argument_list|(
name|A2
argument_list|,
name|B2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2
operator|>
literal|0.1f
condition|)
block|{
name|gfloat
name|A1
init|=
name|dest
index|[
literal|1
index|]
decl_stmt|;
name|gfloat
name|B1
init|=
name|dest
index|[
literal|2
index|]
decl_stmt|;
name|gfloat
name|c1
init|=
name|hypotf
argument_list|(
name|A1
argument_list|,
name|B1
argument_list|)
decl_stmt|;
name|gfloat
name|A
init|=
name|c1
operator|*
name|A2
operator|/
name|c2
decl_stmt|;
name|gfloat
name|B
init|=
name|c1
operator|*
name|B2
operator|/
name|c2
decl_stmt|;
name|out
index|[
literal|0
index|]
operator|=
name|dest
index|[
literal|0
index|]
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|=
name|A
expr_stmt|;
name|out
index|[
literal|2
index|]
operator|=
name|B
expr_stmt|;
block|}
else|else
block|{
name|out
index|[
literal|0
index|]
operator|=
name|dest
index|[
literal|0
index|]
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|=
name|dest
index|[
literal|1
index|]
expr_stmt|;
name|out
index|[
literal|2
index|]
operator|=
name|dest
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_lch_lightness (const float * dest,const float * src,float * out,int samples)
name|blendfun_lch_lightness
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|out
index|[
literal|0
index|]
operator|=
name|src
index|[
literal|0
index|]
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|=
name|dest
index|[
literal|1
index|]
expr_stmt|;
name|out
index|[
literal|2
index|]
operator|=
name|dest
index|[
literal|2
index|]
expr_stmt|;
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_copy (const float * dest,const float * src,float * out,int samples)
name|blendfun_copy
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|4
condition|;
name|c
operator|++
control|)
name|out
index|[
name|c
index|]
operator|=
name|src
index|[
name|c
index|]
expr_stmt|;
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* added according to:      http://www.deepskycolors.com/archivo/2010/04/21/formulas-for-Photoshop-blending-modes.html */
end_comment

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_vivid_light (const float * dest,const float * src,float * out,int samples)
name|blendfun_vivid_light
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
decl_stmt|;
if|if
condition|(
name|src
index|[
name|c
index|]
operator|>
literal|0.5f
condition|)
block|{
name|comp
operator|=
operator|(
literal|1.0f
operator|-
operator|(
literal|1.0f
operator|-
name|dest
index|[
name|c
index|]
operator|)
operator|/
operator|(
literal|2.0f
operator|*
operator|(
name|src
index|[
name|c
index|]
operator|-
literal|0.5f
operator|)
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
name|dest
index|[
name|c
index|]
operator|/
operator|(
literal|1.0f
operator|-
literal|2.0f
operator|*
name|src
index|[
name|c
index|]
operator|)
expr_stmt|;
block|}
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* added according to:      http://www.deepskycolors.com/archivo/2010/04/21/formulas-for-Photoshop-blending-modes.html */
end_comment

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_linear_light (const float * dest,const float * src,float * out,int samples)
name|blendfun_linear_light
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
decl_stmt|;
if|if
condition|(
name|src
index|[
name|c
index|]
operator|>
literal|0.5f
condition|)
block|{
name|comp
operator|=
name|dest
index|[
name|c
index|]
operator|+
literal|2.0
operator|*
operator|(
name|src
index|[
name|c
index|]
operator|-
literal|0.5
operator|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
name|dest
index|[
name|c
index|]
operator|+
literal|2
operator|*
operator|(
name|src
index|[
name|c
index|]
operator|-
literal|1.0
operator|)
expr_stmt|;
block|}
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* added according to:      http://www.deepskycolors.com/archivo/2010/04/21/formulas-for-Photoshop-blending-modes.html */
end_comment

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_pin_light (const float * dest,const float * src,float * out,int samples)
name|blendfun_pin_light
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|gfloat
name|comp
decl_stmt|;
if|if
condition|(
name|src
index|[
name|c
index|]
operator|>
literal|0.5f
condition|)
block|{
name|comp
operator|=
name|MAX
argument_list|(
name|dest
index|[
name|c
index|]
argument_list|,
literal|2
operator|*
operator|(
name|src
index|[
name|c
index|]
operator|-
literal|0.5
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
name|MIN
argument_list|(
name|dest
index|[
name|c
index|]
argument_list|,
literal|2
operator|*
name|src
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
name|out
index|[
name|c
index|]
operator|=
name|comp
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|blendfun_exclusion (const float * dest,const float * src,float * out,int samples)
name|blendfun_exclusion
parameter_list|(
specifier|const
name|float
modifier|*
name|dest
parameter_list|,
specifier|const
name|float
modifier|*
name|src
parameter_list|,
name|float
modifier|*
name|out
parameter_list|,
name|int
name|samples
parameter_list|)
block|{
while|while
condition|(
name|samples
operator|--
condition|)
block|{
if|if
condition|(
name|src
index|[
name|ALPHA
index|]
operator|!=
literal|0.0f
condition|)
block|{
name|gint
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|3
condition|;
name|c
operator|++
control|)
block|{
name|out
index|[
name|c
index|]
operator|=
literal|0.5f
operator|-
literal|2.0f
operator|*
operator|(
name|dest
index|[
name|c
index|]
operator|-
literal|0.5f
operator|)
operator|*
operator|(
name|src
index|[
name|c
index|]
operator|-
literal|0.5f
operator|)
expr_stmt|;
block|}
block|}
name|out
index|[
name|ALPHA
index|]
operator|=
name|src
index|[
name|ALPHA
index|]
expr_stmt|;
name|out
operator|+=
literal|4
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dest
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GIMP_BLEND_COMPOSITE_H__ */
end_comment

end_unit

