begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* GIMP - The GNU Image Manipulation Program  * Copyright (C) 1995 Spencer Kimball and Peter Mattis  *  * Gimp Image Compositing  * Copyright (C) 2003  Helvetix Victorinox, a pseudonym,<helvetix@gimp.org>  *  * This program is free software: you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program.  If not, see<http://www.gnu.org/licenses/>.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GIMP_COMPOSITE_H__
end_ifndef

begin_define
DECL|macro|__GIMP_COMPOSITE_H__
define|#
directive|define
name|__GIMP_COMPOSITE_H__
end_define

begin_typedef
typedef|typedef
enum|enum
DECL|enum|__anon27c3e8190103
block|{
DECL|enumerator|GIMP_PIXELFORMAT_V8
name|GIMP_PIXELFORMAT_V8
block|,
DECL|enumerator|GIMP_PIXELFORMAT_VA8
name|GIMP_PIXELFORMAT_VA8
block|,
DECL|enumerator|GIMP_PIXELFORMAT_RGB8
name|GIMP_PIXELFORMAT_RGB8
block|,
DECL|enumerator|GIMP_PIXELFORMAT_RGBA8
name|GIMP_PIXELFORMAT_RGBA8
block|,
DECL|enumerator|GIMP_PIXELFORMAT_ANY
name|GIMP_PIXELFORMAT_ANY
block|,
DECL|enumerator|GIMP_PIXELFORMAT_N
name|GIMP_PIXELFORMAT_N
DECL|typedef|GimpPixelFormat
block|}
name|GimpPixelFormat
typedef|;
end_typedef

begin_comment
comment|/*  * gtk-doc is unhappy with these #ifdef's inside the enumeration.  * #ifdef GIMP_COMPOSITE_16BIT   GIMP_PIXELFORMAT_V16,   GIMP_PIXELFORMAT_VA16,   GIMP_PIXELFORMAT_RGB16,   GIMP_PIXELFORMAT_RGBA16, #endif #ifdef GIMP_COMPOSITE_32BIT   GIMP_PIXELFORMAT_V32,   GIMP_PIXELFORMAT_VA32,   GIMP_PIXELFORMAT_RGB32,   GIMP_PIXELFORMAT_RGBA32, #endif   *   */
end_comment

begin_comment
comment|/* bytes per-pixel for each of the pixel formats */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|guchar
name|gimp_composite_pixel_bpp
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* does pixel format have alpha? */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|guchar
name|gimp_composite_pixel_alphap
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* converter between alpha and non-alpha pixel formats */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|GimpPixelFormat
name|gimp_composite_pixel_alpha
index|[]
decl_stmt|;
end_decl_stmt

begin_define
DECL|macro|GIMP_COMPOSITE_ALPHA_OPAQUE
define|#
directive|define
name|GIMP_COMPOSITE_ALPHA_OPAQUE
value|(-1)
end_define

begin_define
DECL|macro|GIMP_COMPOSITE_ALPHA_TRANSPARENT
define|#
directive|define
name|GIMP_COMPOSITE_ALPHA_TRANSPARENT
value|(0)
end_define

begin_comment
comment|/*  * This is the enumeration of all the supported compositing  * operations.  Many of them are taken from the GimpLayerModeEffect  * enumeration, but there are (possibly more) implemented.  Here is  * where they are all enumerated.  *  * Nota Bene: Unfortunately, the order here is important!  */
end_comment

begin_typedef
typedef|typedef
enum|enum
DECL|enum|__anon27c3e8190203
block|{
DECL|enumerator|GIMP_COMPOSITE_NORMAL
name|GIMP_COMPOSITE_NORMAL
init|=
name|GIMP_NORMAL_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_DISSOLVE
name|GIMP_COMPOSITE_DISSOLVE
init|=
name|GIMP_DISSOLVE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_BEHIND
name|GIMP_COMPOSITE_BEHIND
init|=
name|GIMP_BEHIND_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_MULTIPLY
name|GIMP_COMPOSITE_MULTIPLY
init|=
name|GIMP_MULTIPLY_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_SCREEN
name|GIMP_COMPOSITE_SCREEN
init|=
name|GIMP_SCREEN_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_OVERLAY
name|GIMP_COMPOSITE_OVERLAY
init|=
name|GIMP_OVERLAY_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_DIFFERENCE
name|GIMP_COMPOSITE_DIFFERENCE
init|=
name|GIMP_DIFFERENCE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_ADDITION
name|GIMP_COMPOSITE_ADDITION
init|=
name|GIMP_ADDITION_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_SUBTRACT
name|GIMP_COMPOSITE_SUBTRACT
init|=
name|GIMP_SUBTRACT_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_DARKEN
name|GIMP_COMPOSITE_DARKEN
init|=
name|GIMP_DARKEN_ONLY_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_LIGHTEN
name|GIMP_COMPOSITE_LIGHTEN
init|=
name|GIMP_LIGHTEN_ONLY_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_HUE
name|GIMP_COMPOSITE_HUE
init|=
name|GIMP_HUE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_SATURATION
name|GIMP_COMPOSITE_SATURATION
init|=
name|GIMP_SATURATION_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_COLOR_ONLY
name|GIMP_COMPOSITE_COLOR_ONLY
init|=
name|GIMP_COLOR_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_VALUE
name|GIMP_COMPOSITE_VALUE
init|=
name|GIMP_VALUE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_DIVIDE
name|GIMP_COMPOSITE_DIVIDE
init|=
name|GIMP_DIVIDE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_DODGE
name|GIMP_COMPOSITE_DODGE
init|=
name|GIMP_DODGE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_BURN
name|GIMP_COMPOSITE_BURN
init|=
name|GIMP_BURN_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_HARDLIGHT
name|GIMP_COMPOSITE_HARDLIGHT
init|=
name|GIMP_HARDLIGHT_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_SOFTLIGHT
name|GIMP_COMPOSITE_SOFTLIGHT
init|=
name|GIMP_SOFTLIGHT_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_GRAIN_EXTRACT
name|GIMP_COMPOSITE_GRAIN_EXTRACT
init|=
name|GIMP_GRAIN_EXTRACT_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_GRAIN_MERGE
name|GIMP_COMPOSITE_GRAIN_MERGE
init|=
name|GIMP_GRAIN_MERGE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_COLOR_ERASE
name|GIMP_COMPOSITE_COLOR_ERASE
init|=
name|GIMP_COLOR_ERASE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_ERASE
name|GIMP_COMPOSITE_ERASE
init|=
name|GIMP_ERASE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_REPLACE
name|GIMP_COMPOSITE_REPLACE
init|=
name|GIMP_REPLACE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_ANTI_ERASE
name|GIMP_COMPOSITE_ANTI_ERASE
init|=
name|GIMP_ANTI_ERASE_MODE
block|,
DECL|enumerator|GIMP_COMPOSITE_BLEND
name|GIMP_COMPOSITE_BLEND
block|,
DECL|enumerator|GIMP_COMPOSITE_SHADE
name|GIMP_COMPOSITE_SHADE
block|,
DECL|enumerator|GIMP_COMPOSITE_SWAP
name|GIMP_COMPOSITE_SWAP
block|,
DECL|enumerator|GIMP_COMPOSITE_SCALE
name|GIMP_COMPOSITE_SCALE
block|,
DECL|enumerator|GIMP_COMPOSITE_CONVERT
name|GIMP_COMPOSITE_CONVERT
block|,
DECL|enumerator|GIMP_COMPOSITE_XOR
name|GIMP_COMPOSITE_XOR
block|,
DECL|enumerator|GIMP_COMPOSITE_N
name|GIMP_COMPOSITE_N
DECL|typedef|GimpCompositeOperation
block|}
name|GimpCompositeOperation
typedef|;
end_typedef

begin_struct
DECL|struct|GimpCompositeOperationEffects
struct|struct
name|GimpCompositeOperationEffects
block|{
DECL|member|affect_opacity
name|guchar
name|affect_opacity
decl_stmt|;
DECL|member|increase_opacity
name|guchar
name|increase_opacity
decl_stmt|;
DECL|member|decrease_opacity
name|guchar
name|decrease_opacity
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|GimpCompositeOperationEffects
name|gimp_composite_operation_effects
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * This is structure for communicating all that is necessary to a  * compositing operation.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
DECL|struct|__anon27c3e8190308
block|{
DECL|member|A
name|guchar
modifier|*
name|A
decl_stmt|;
comment|/* Source A    */
DECL|member|B
name|guchar
modifier|*
name|B
decl_stmt|;
comment|/* Source B    */
DECL|member|D
name|guchar
modifier|*
name|D
decl_stmt|;
comment|/* Destination */
DECL|member|M
specifier|const
name|guchar
modifier|*
name|M
decl_stmt|;
comment|/* Mask        */
DECL|member|n_pixels
name|gulong
name|n_pixels
decl_stmt|;
DECL|member|pixelformat_A
name|GimpPixelFormat
name|pixelformat_A
decl_stmt|;
DECL|member|pixelformat_B
name|GimpPixelFormat
name|pixelformat_B
decl_stmt|;
DECL|member|pixelformat_D
name|GimpPixelFormat
name|pixelformat_D
decl_stmt|;
DECL|member|pixelformat_M
name|GimpPixelFormat
name|pixelformat_M
decl_stmt|;
DECL|struct|__anon27c3e8190408
DECL|member|opacity
DECL|member|affect
DECL|member|replace
struct|struct
block|{
name|gint
name|opacity
decl_stmt|;
name|gchar
name|affect
decl_stmt|;
block|}
name|replace
struct|;
DECL|struct|__anon27c3e8190508
DECL|member|scale
DECL|member|scale
struct|struct
block|{
name|gint
name|scale
decl_stmt|;
block|}
name|scale
struct|;
DECL|struct|__anon27c3e8190608
DECL|member|blend
DECL|member|blend
struct|struct
block|{
name|gint
name|blend
decl_stmt|;
block|}
name|blend
struct|;
DECL|struct|__anon27c3e8190708
DECL|member|x
DECL|member|y
DECL|member|opacity
DECL|member|dissolve
struct|struct
block|{
name|gint
name|x
decl_stmt|;
name|gint
name|y
decl_stmt|;
name|gint
name|opacity
decl_stmt|;
block|}
name|dissolve
struct|;
DECL|member|combine
name|CombinationMode
name|combine
decl_stmt|;
DECL|member|op
name|GimpCompositeOperation
name|op
decl_stmt|;
DECL|typedef|GimpCompositeContext
block|}
name|GimpCompositeContext
typedef|;
end_typedef

begin_struct
DECL|struct|GimpCompositeOptions
struct|struct
name|GimpCompositeOptions
block|{
DECL|member|bits
name|gulong
name|bits
decl_stmt|;
block|}
struct|;
end_struct

begin_define
DECL|macro|GIMP_COMPOSITE_OPTION_NOEXTENSIONS
define|#
directive|define
name|GIMP_COMPOSITE_OPTION_NOEXTENSIONS
value|0x2
end_define

begin_define
DECL|macro|GIMP_COMPOSITE_OPTION_VERBOSE
define|#
directive|define
name|GIMP_COMPOSITE_OPTION_VERBOSE
value|0x4
end_define

begin_decl_stmt
specifier|extern
name|struct
name|GimpCompositeOptions
name|gimp_composite_options
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|gimp_composite_init
parameter_list|(
name|gboolean
name|be_verbose
parameter_list|,
name|gboolean
name|use_cpu_accel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|gboolean
name|gimp_composite_use_cpu_accel
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gimp_composite_dispatch
parameter_list|(
name|GimpCompositeContext
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gimp_composite_context_print
parameter_list|(
name|GimpCompositeContext
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|gchar
modifier|*
name|gimp_composite_mode_astext
parameter_list|(
name|GimpCompositeOperation
name|op
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|gchar
modifier|*
name|gimp_composite_pixelformat_astext
parameter_list|(
name|GimpPixelFormat
name|format
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
specifier|const
name|gchar
modifier|*
name|gimp_composite_function_name
index|[
name|GIMP_COMPOSITE_N
index|]
index|[
name|GIMP_PIXELFORMAT_N
index|]
index|[
name|GIMP_PIXELFORMAT_N
index|]
index|[
name|GIMP_PIXELFORMAT_N
index|]
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
function_decl|(
modifier|*
name|gimp_composite_function
index|[
name|GIMP_COMPOSITE_N
index|]
index|[
name|GIMP_PIXELFORMAT_N
index|]
index|[
name|GIMP_PIXELFORMAT_N
index|]
index|[
name|GIMP_PIXELFORMAT_N
index|]
function_decl|)
parameter_list|(
name|GimpCompositeContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GIMP_COMPOSITE_H__  */
end_comment

end_unit

