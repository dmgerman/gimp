# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub bill_misc {
    $author = 'Bill Skaggs <weskaggs@primate.ucdavis.edu';
    $copyright = 'Bill Skaggs';
    $date = '2004';
    $since = '2.4';
}

sub mitch_misc {
    $author = 'Michael Natterer <mitch@gimp.org>';
    $copyright = 'Michael Natterer';
    $date = '2004';
    $since = '2.2';
}

sub neo_misc {
    $author = 'Sven Neumann <sven@gimp.org>';
    $copyright = 'Sven Neumann';
    $date = '2005';
    $since = '2.4';
}

sub palette_arg () {{
    name => 'name',
    type => 'string',
    desc => 'The palette name.'
}}

my $get_palette_from_name = <<'CODE';
if (name && strlen (name))
  {
    palette = (GimpPalette *)
      gimp_container_get_child_by_name (gimp->palette_factory->container,
                                        name);
  }
else
  {
    palette = gimp_context_get_palette (context);
  }
CODE


# The defs

sub palette_new {
    $blurb = "Creates a new palette";
    $help  = "This procedure creates a new, uninitialized palette";

    &mitch_misc;

    @inargs = (
	{ name => 'name', type => 'string',
	  desc => 'The requested name of the new palette' }
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => 'The actual new palette name',
	  alias => 'g_strdup (GIMP_OBJECT (data)->name)', no_declare => 1 },
    );

    %invoke = (
        vars => [ 'GimpData *data = NULL'],
        code => <<'CODE'
{
  if (strlen (name))
    data = gimp_data_factory_data_new (gimp->palette_factory, name);

  success = (data != NULL);
}
CODE
    );
}

sub palette_is_editable {
    $blurb = "Tests if palette can be edited";
    $help  = "Returns True if you have permission to change the palette";

    &bill_misc;

    @inargs = (
        &palette_arg
    );

    @outargs = (
	{ name => 'editable', type => 'boolean',
	  desc => "True if the palette can be edited",
	  alias => 'GIMP_DATA (palette)->writable',
          no_declare => 1 }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
        code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette)
    success = TRUE;
  else
    success = FALSE;
}
CODE
    );
}

sub palette_duplicate {
    $blurb = "Duplicates a palette";
    $help  = "This procedure creates an identical palette by a different name";

    &mitch_misc;

    @inargs = (
        &palette_arg
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => "The name of the palette's copy",
	  alias => 'g_strdup (GIMP_OBJECT (palette_copy)->name)',
          no_declare => 1 }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPalette *palette_copy = NULL' ],
        code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette)
    {
      palette_copy = (GimpPalette *)
        gimp_data_factory_data_duplicate (gimp->palette_factory,
                                          GIMP_DATA (palette));

      success = (palette_copy != NULL);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palette_rename {
    $blurb = "Rename a palette";
    $help  = "This procedure renames a palette";

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'new_name', type => 'string',
          desc => "The new name of the palette" }
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => "The actual new name of the palette",
	  alias => 'g_strdup (GIMP_OBJECT (palette)->name)', no_declare => 1 },
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->writable)
    gimp_object_set_name (GIMP_OBJECT (palette), new_name);
  else
    success = FALSE;
}
CODE
    );
}

sub palette_delete {
    $blurb = "Deletes a palette";
    $help  = "This procedure deletes a palette";

    &mitch_misc;

    @inargs = (
        &palette_arg
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->deletable)
    {
      GError *error = NULL;

      success = gimp_data_factory_data_delete (gimp->palette_factory,
                                               GIMP_DATA (palette),
                                               TRUE, &error);

      if (! success)
        {
          g_message (error->message);
          g_clear_error (&error);
        }
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palette_get_info {
    $blurb = 'Retrieve information about the specified palette.';

    $help = <<'HELP';
This procedure retrieves information about the specified palette. This
includes the name, and the number of colors.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg
    );

    @outargs = (
        { name => 'num_colors', type => 'int32', no_declare => '1',
          alias => 'palette->n_colors', void_ret => '1',
          desc => "The number of colors in the palette" }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  success = (palette != NULL);
}
CODE
    );
}

sub palette_get_columns {
    $blurb = "Retrieves the number of columns to use to display this palette";
    $help = <<'HELP';
This procedures retrieves the prefered number of columns to use when the
palette is being displayed.
HELP

    &neo_misc;

    @inargs = (
	&palette_arg
    );

    @outargs = (
        { name => 'num_columns', type => 'int32', no_declare => '0',
          alias => 'palette->n_columns',
          desc => "The number of columns used to display this palette" }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  success = (palette != NULL);
}
CODE
    );
}

sub palette_set_columns {
    $blurb = "Sets the number of columns to use when displaying the palette";
    $help = <<'HELP';
This procedures allows to control how many colors are shown per row when the
palette is being displayed. This value can only be changed if the palette
is writable. The maximum allowed value is 64.
HELP

    &neo_misc;

    @inargs = (
        &palette_arg,
        { name => 'columns', type => '0 <= int32 <= 64',
          desc => "The new number of columns" }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->writable)
    gimp_palette_set_columns (palette, columns);
  else
    success = FALSE;
}
CODE
    );
}

sub palette_add_entry {
    $blurb = 'Adds a palette entry to the specified palette.';

    $help = <<'HELP';
This procedure adds an entry to the specifed palette.
It returns an error if the entry palette does not exist.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'entry_name', type => 'string', null_ok => '1',
          desc => 'The name of the entry' },
        { name => 'color', type => 'color',
          desc => 'The new entry\'s color color' }
    );

    @outargs = (
        { name => 'entry_num', type => 'int32', void_ret => '1',
          alias => 'entry->position', no_declare => '1',
          desc => 'The index of the added entry' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPaletteEntry *entry = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->writable)
    entry = gimp_palette_add_entry (palette, -1, entry_name, &color);
  else
    success = FALSE;
}
CODE
    );
}

sub palette_delete_entry {
    $blurb = 'Deletes a palette entry from the specified palette.';

    $help = <<'HELP';
This procedure deletes an entry from the specifed palette.
It returns an error if the entry palette does not exist.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'entry_num', type => 'int32',
          desc => 'The index of the added entry' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPaletteEntry *entry = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->writable)
    {
      if (entry_num >= 0 && entry_num < palette->n_colors)
        {
          entry = g_list_nth_data (palette->colors, entry_num);

          gimp_palette_delete_entry (palette, entry);
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palette_entry_get_color {
    $blurb = 'Gets the specified palette entry from the specified palette.';

    $help = <<'HELP';
This procedure retrieves the color of the zero-based entry specifed for the
specified palette. It returns an error if the entry does not exist.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' }
    );

    @outargs = (
        { name => 'color', type => 'color', void_ret => 1,
          desc => 'The color requested' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPaletteEntry *entry = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette)
    {
      if (entry_num >= 0 && entry_num < palette->n_colors)
        {
          entry = g_list_nth_data (palette->colors, entry_num);

          color = entry->color;
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palette_entry_set_color {
    $blurb = 'Sets the specified palette entry in the specified palette.';

    $help = <<'HELP';
This procedure sets the color of the zero-based entry specifed for the
specified palette. It returns an error if the entry does not exist.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' },
        { name => 'color', type => 'color',
          desc => 'The new color' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPaletteEntry *entry = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->writable)
    {
      if (entry_num >= 0 && entry_num < palette->n_colors)
        {
          entry = g_list_nth_data (palette->colors, entry_num);

          entry->color = color;

          gimp_data_dirty (GIMP_DATA (palette));
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palette_entry_get_name {
    $blurb = 'Gets the specified palette entry from the specified palette.';

    $help = <<'HELP';
This procedure retrieves the name of the zero-based entry specifed for the
specified palette. It returns an error if the entry does not exist.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' }
    );

    @outargs = (
        { name => 'entry_name', type => 'string', void_ret => 1,
          no_declare => '1', alias => 'g_strdup (entry->name)',
          desc => 'The name requested' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPaletteEntry *entry = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette)
    {
      if (entry_num >= 0 && entry_num < palette->n_colors)
        entry = g_list_nth_data (palette->colors, entry_num);
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palette_entry_set_name {
    $blurb = 'Sets the specified palette entry in the specified palette.';

    $help = <<'HELP';
This procedure sets the name of the zero-based entry specifed for the
specified palette. It returns an error if the entry does not exist.
HELP

    &mitch_misc;

    @inargs = (
        &palette_arg,
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' },
        { name => 'entry_name', type => 'string', null_ok => '1',
          desc => 'The new name' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL',
                  'GimpPaletteEntry *entry = NULL' ],
	code => <<'CODE'
{
  palette = (GimpPalette *)
    gimp_container_get_child_by_name (gimp->palette_factory->container, name);

  if (palette && GIMP_DATA (palette)->writable)
    {
      if (entry_num >= 0 && entry_num < palette->n_colors)
        {
          entry = g_list_nth_data (palette->colors, entry_num);

          g_free (entry->name);
          entry->name = g_strdup (entry_name);

          gimp_data_dirty (GIMP_DATA (palette));
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> "core/gimp.h" "core/gimpcontext.h" "core/gimplist.h"
              "core/gimpdatafactory.h" "core/gimppalette.h");

@procs = qw(palette_new palette_duplicate palette_rename palette_delete
            palette_is_editable palette_get_info
            palette_get_columns palette_set_columns
            palette_add_entry palette_delete_entry
            palette_entry_get_color palette_entry_set_color
            palette_entry_get_name palette_entry_set_name);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Palette';

1;
