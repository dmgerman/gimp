# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

sub pdb_misc {
    $author = $copyright = 'Simon Budig';
    $date = '2005';

    $since = '2.4';
}

# The defs

sub vectors_arg () {{
    name => 'vectors',
    type => 'vectors',
    desc => 'The vectors object'
}}

sub stroke_arg () {
   &vectors_arg,
   {
     name => 'stroke_id',
     type => 'int32',
     desc => 'The stroke ID'
   }}

sub vectors_get_strokes {
    $blurb = 'List the strokes associated with the passed path.';

    $help = <<'HELP';
Returns an Array with the stroke-IDs associated with the passed path.
HELP

    &pdb_misc;

    @inargs = ( &vectors_arg );

    @outargs = (
	{ name => 'stroke_ids', type => 'int32array',
	  desc => 'List of the strokes belonging to the path.',
	  array => { name => 'num_strokes',
		     desc => 'The number of strokes returned.',
		     init => 1 },
	  init => 1 }
    );

    %invoke = (
        vars => ['gint i = 0', 'GimpStroke *cur_stroke = NULL'],
	code => <<"CODE"
{
  num_strokes = gimp_vectors_get_n_strokes (vectors);

  if (num_strokes)
    {
      stroke_ids = g_new (gint32, num_strokes);

      for (cur_stroke = gimp_vectors_stroke_get_next (vectors, NULL);
           cur_stroke;
	   cur_stroke = gimp_vectors_stroke_get_next (vectors, cur_stroke))
	{
	  stroke_ids[i] = gimp_stroke_get_ID (cur_stroke);
	  i++;
	}
    }
}
CODE
    );
}

sub vectors_stroke_translate {
    $blurb = 'return coordinates along the given stroke.';

    $help = <<'HELP';
Returns a lot of coordinates along the passed stroke.
HELP

    &pdb_misc;

    @inargs = ( &stroke_arg );
    foreach (qw(x y)) {
        push @inargs, { name => "off$_", type => 'int32',
                        desc => "Offset in $_ direction" }
    }

    %invoke = (
	vars => [ 'GimpStroke *stroke' ],
        code => <<"CODE"
{
  GimpImage *gimage = gimp_item_get_image (GIMP_ITEM (vectors));
  stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (!stroke)
    {
      success = FALSE;
    }
  else
    {
      /* need to figure out how undo is supposed to work */

      gimp_image_undo_group_start (gimage, GIMP_UNDO_GROUP_ITEM_DISPLACE,
                                   _("Modify Path"));
      gimp_vectors_freeze (vectors);
      gimp_stroke_translate (stroke, offx, offy);
      gimp_vectors_thaw (vectors);
      gimp_image_undo_group_end (gimage);
    }
}
CODE
    );
}

    

@headers = qw(<string.h> "core/gimp.h" "core/gimplist.h"
              "core/gimpimage-undo.h"
              "vectors/gimpanchor.h" "vectors/gimpbezierstroke.h"
              "vectors/gimpvectors.h" "vectors/gimpvectors-compat.h"
              "gimp-intl.h");

@procs = qw(vectors_get_strokes
            vectors_stroke_translate
            );
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Paths';

1;
