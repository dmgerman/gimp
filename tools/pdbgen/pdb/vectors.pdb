# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

sub vectors_new {
    $blurb = 'Creates a new empty vectors object.';

    $help = <<'HELP';
Creates a new empty vectors object. Needs to be added to an image
using gimp_image_add_vectors().
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'image', type => 'image',
	  desc => 'The image' },
        { name => 'name', type => 'string',
          desc => 'the name of the new vector object.' }
    );

    @outargs = (
        { name => 'vectors', type => 'vectors',
          desc => 'the current vector object, 0 if no vector exists
                   in the image.' }
    );

    %invoke = (
        code => <<'CODE'
{
  vectors = gimp_vectors_new (image, name);
}
CODE
    );
}

sub vectors_get_image {
    $blurb = 'Returns the vectors objects image.';
    $help  = 'Returns the vectors objects image.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' }
    );

    @outargs = (
        { name => 'image', type => 'image',
          desc => 'The vectors image' }
    );

    %invoke = (
        code => <<"CODE"
{
  image = gimp_item_get_image (GIMP_ITEM (vectors));
}
CODE
    );
}

sub vectors_get_name {
    $blurb = 'Gets the name of the vectors object.';
    $help  = 'Gets the name of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' }
    );

    @outargs = (
        { name => 'name', type => 'string',
          desc => 'The name of the vectors object' }
    );

    %invoke = (
        code => <<"CODE"
{
  name = g_strdup (gimp_object_get_name (GIMP_OBJECT (vectors)));
}
CODE
    );
}

sub vectors_set_name {
    $blurb = 'Sets the name of the vectors object.';
    $help  = 'Sets the name of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'name', type => 'string',
	  desc => 'the new name of the path' }
    );

    %invoke = (
        code => <<"CODE"
{
  success = gimp_item_rename (GIMP_ITEM (vectors), name);
}
CODE
    );
}

sub vectors_get_visible {
    $blurb = 'Gets the visibility of the vectors object.';
    $help  = 'Gets the visibility of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' }
    );

    @outargs = (
        { name => 'visible', type => 'boolean',
          desc => 'TRUE if the path is visible, FALSE otherwise' }
    );

    %invoke = (
        code => <<"CODE"
{
  visible = gimp_item_get_visible (GIMP_ITEM (vectors));
}
CODE
    );
}

sub vectors_set_visible {
    $blurb = 'Sets the visibility of the vectors object.';
    $help  = 'Sets the visibility of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'visible', type => 'boolean',
	  desc => 'Whether the path is visible' }
    );

    %invoke = (
        code => <<"CODE"
{
  gimp_item_set_visible (GIMP_ITEM (vectors), visible, TRUE);
}
CODE
    );
}

sub vectors_get_linked {
    $blurb = 'Gets the linked state of the vectors object.';
    $help  = 'Gets the linked state of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' }
    );

    @outargs = (
        { name => 'linked', type => 'boolean',
          desc => 'TRUE if the path is linked, FALSE otherwise' }
    );

    %invoke = (
        code => <<"CODE"
{
  linked = gimp_item_get_linked (GIMP_ITEM (vectors));
}
CODE
    );
}

sub vectors_set_linked {
    $blurb = 'Sets the linked state of the vectors object.';
    $help  = 'Sets the linked state of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'linked', type => 'boolean',
	  desc => 'Whether the path is linked' }
    );

    %invoke = (
        code => <<"CODE"
{
  gimp_item_set_linked (GIMP_ITEM (vectors), linked, TRUE);
}
CODE
    );
}

sub vectors_get_tattoo {
    $blurb = 'Get the tattoo of the vectors object.';
    $help  = 'Get the tattoo state of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' }
    );

    @outargs = (
        { name => 'tattoo', type => 'int32',
          desc => 'The vectors tattoo' }
    );

    %invoke = (
        code => <<"CODE"
{
  tattoo = gimp_item_get_tattoo (GIMP_ITEM (vectors));
}
CODE
    );
}

sub vectors_set_tattoo {
    $blurb = 'Set the tattoo of the vectors object.';
    $help  = 'Set the tattoo of the vectors object.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'tattoo', type => 'int32',
	  desc => 'the new tattoo' }
    );

    %invoke = (
        code => <<"CODE"
{
  gimp_item_set_tattoo (GIMP_ITEM (vectors), tattoo);
}
CODE
    );
}

sub vectors_get_strokes {
    $blurb = 'List the strokes associated with the passed path.';

    $help = <<'HELP';
Returns an Array with the stroke-IDs associated with the passed path.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' }
    );

    @outargs = (
        { name => 'stroke_ids', type => 'int32array',
          desc => 'List of the strokes belonging to the path.',
          array => { name => 'num_strokes',
                     desc => 'The number of strokes returned.' } }
    );

    %invoke = (
        code => <<"CODE"
{
  num_strokes = gimp_vectors_get_n_strokes (vectors);

  if (num_strokes)
    {
      GimpStroke *cur_stroke;
      gint        i = 0;

      stroke_ids = g_new (gint32, num_strokes);

      for (cur_stroke = gimp_vectors_stroke_get_next (vectors, NULL);
           cur_stroke;
           cur_stroke = gimp_vectors_stroke_get_next (vectors, cur_stroke))
        {
          stroke_ids[i] = gimp_stroke_get_ID (cur_stroke);
          i++;
        }
    }
}
CODE
    );
}

sub vectors_stroke_get_length {
    $blurb = 'Measure the length of the given stroke.';
    $help  = 'Measure the length of the given stroke.';

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
        { name => 'prescision', type => 'float',
          desc => 'The prescision used for the approximation' }
    );

    @outargs = (
        { name => 'length', type => 'float',
          desc => 'The length (in pixels) of the given stroke.' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    length = gimp_stroke_get_length (stroke, prescision);
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_stroke_get_point_at_dist {
    $blurb = 'Get point at a specified distance along the stroke.';

    $help = <<'HELP';
This will return the x,y position of a point at a given distance along the
stroke. The distance will be obtained by first digitizing the 
curve internally and then walking along the curve. For a closed stroke the
start of the path is the first point on the path that was created. This might
not be obvious. If the stroke is not long enough, a "valid" flag will be FALSE.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
        { name => 'dist', type => 'float',
          desc => 'The given distance.' },
        { name => 'prescision', type => 'float',
          desc => 'The prescision used for the approximation' }
    );

    @outargs = (
        { name => 'x_point', type => 'float',
          desc => 'The x position of the point.' },
        { name => 'y_point', type => 'float',
          desc => 'The y position of the point.' },
        { name => 'slope', type => 'float',
          desc => 'The slope (dy / dx) at the specified point.' },
        { name => 'valid', type => 'boolean',
          desc => 'Indicator for the validity of the returned data.' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    {
      GimpCoords coord;

      valid = gimp_stroke_get_point_at_dist (stroke, dist, prescision,
                                             &coord, &slope);
      x_point = valid ? coord.x : 0;
      y_point = valid ? coord.y : 0;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_stroke_remove {
    $blurb = 'remove the stroke from a vectors object.';

    $help = <<'HELP';
Remove the stroke from a vectors object.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    gimp_vectors_stroke_remove (vectors, stroke);
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_stroke_close {
    $blurb = 'closes the specified stroke.';

    $help = <<'HELP';
Closes the specified stroke.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    gimp_stroke_close (stroke);
  else
    success = FALSE;
}
CODE
    );
}


sub vectors_stroke_translate {
    $blurb = 'translate the given stroke.';

    $help = <<'HELP';
Translate the given stroke.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
	{ name => "off_x", type => 'int32',
          desc => "Offset in x direction" },
	{ name => "off_y", type => 'int32',
          desc => "Offset in y direction" }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    gimp_stroke_translate (stroke, off_x, off_y);
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_stroke_scale {
    $blurb = 'scales the given stroke.';

    $help = <<'HELP';
Scale the given stroke.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
	{ name => "scale_x", type => 'float',
	  desc => "Scale factor in x direction" },
	{ name => "scale_y", type => 'float',
	  desc => "Scale factor in y direction" }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    gimp_stroke_scale (stroke, scale_x, scale_y);
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_stroke_interpolate {
    $blurb = 'returns polygonal approximation of the stroke.';

    $help = <<'HELP';
returns polygonal approximation of the stroke.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
        { name => 'prescision', type => 'float',
          desc => 'The prescision used for the approximation' }
    );

    @outargs = (
        { name => 'closed', type => 'boolean',
          desc => 'List of the strokes belonging to the path.' },
        { name => 'coords', type => 'floatarray',
          desc => 'List of the coords along the path (x0, y0, x1, y1, ...).',
          array => { name => 'num_coords',
                     desc => 'The number of floats returned.' } }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);
  
  if (stroke)
    {
      GArray *coords_array;
      gint    i;

      coords_array = gimp_stroke_interpolate (stroke, prescision, &closed);

      if (coords_array)
        {
          num_coords = coords_array->len;
          coords = g_new (gdouble, num_coords * 2);

          for (i = 0; i < num_coords; i++)
            {
              coords[2*i]   = g_array_index (coords_array, GimpCoords, i).x;
              coords[2*i+1] = g_array_index (coords_array, GimpCoords, i).y;
            }
          g_array_free (coords_array, TRUE);
          num_coords *= 2;
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}


sub vectors_bezier_stroke_new_moveto {
    $blurb = 'Adds a bezier stroke with a single moveto to the vectors object.';

    $help = <<'HELP';
Adds a bezier stroke with a single moveto to the vectors object.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
        { name => 'x0', type => 'float',
          desc => 'The x-coordinate of the moveto' },
        { name => 'y0', type => 'float',
          desc => 'The y-coordinate of the moveto' }
    );

    @outargs = (
        { name => 'stroke_id', type => 'int32',
          desc => 'The resulting stroke' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke;
  GimpCoords  coord0 = GIMP_COORDS_DEFAULT_VALUES;

  coord0.x = x0;
  coord0.y = y0;

  stroke = gimp_bezier_stroke_new_moveto (&coord0);
  gimp_vectors_stroke_add (vectors, stroke);
  stroke_id = gimp_stroke_get_ID (stroke);
}
CODE
    );
}

sub vectors_bezier_stroke_lineto {
    $blurb = 'Extends a bezier stroke with a lineto.';

    $help = <<'HELP';
Extends a bezier stroke with a lineto.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
        { name => 'x0', type => 'float',
          desc => 'The x-coordinate of the lineto' },
        { name => 'y0', type => 'float',
          desc => 'The y-coordinate of the lineto' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);

  if (stroke)
    {
      GimpCoords coord0 = GIMP_COORDS_DEFAULT_VALUES;

      coord0.x = x0;
      coord0.y = y0;

      gimp_bezier_stroke_lineto (stroke, &coord0);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_bezier_stroke_conicto {
    $blurb = 'Extends a bezier stroke with a conic bezier spline.';

    $help = <<'HELP';
Extends a bezier stroke with a conic bezier spline. Actually a
cubic bezier spline gets added that realizes the shape of a conic
bezier spline.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
        { name => 'x0', type => 'float',
          desc => 'The x-coordinate of the control point' },
        { name => 'y0', type => 'float',
          desc => 'The y-coordinate of the control point' },
        { name => 'x1', type => 'float',
          desc => 'The x-coordinate of the end point' },
        { name => 'y1', type => 'float',
          desc => 'The y-coordinate of the end point' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);

  if (stroke)
    {
      GimpCoords coord0 = GIMP_COORDS_DEFAULT_VALUES;
      GimpCoords coord1 = GIMP_COORDS_DEFAULT_VALUES;

      coord0.x = x0;
      coord0.y = y0;

      coord1.x = x1;
      coord1.y = y1;

      gimp_bezier_stroke_conicto (stroke, &coord0, &coord1);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_bezier_stroke_cubicto {
    $blurb = 'Extends a bezier stroke with a cubic bezier spline.';

    $help = <<'HELP';
Extends a bezier stroke with a cubic bezier spline.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
	{ name => 'stroke_id', type => 'int32',
	  desc => 'The stroke ID' },
        { name => 'x0', type => 'float',
          desc => 'The x-coordinate of the first control point' },
        { name => 'y0', type => 'float',
          desc => 'The y-coordinate of the first control point' },
        { name => 'x1', type => 'float',
          desc => 'The x-coordinate of the second control point' },
        { name => 'y1', type => 'float',
          desc => 'The y-coordinate of the second control point' },
        { name => 'x2', type => 'float',
          desc => 'The x-coordinate of the end point' },
        { name => 'y2', type => 'float',
          desc => 'The y-coordinate of the end point' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke = gimp_vectors_stroke_get_by_ID (vectors, stroke_id);

  if (stroke)
    {
      GimpCoords coord0 = GIMP_COORDS_DEFAULT_VALUES;
      GimpCoords coord1 = GIMP_COORDS_DEFAULT_VALUES;
      GimpCoords coord2 = GIMP_COORDS_DEFAULT_VALUES;

      coord0.x = x0;
      coord0.y = y0;

      coord1.x = x1;
      coord1.y = y1;

      coord2.x = x2;
      coord2.y = y2;

      gimp_bezier_stroke_cubicto (stroke, &coord0, &coord1, &coord2);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub vectors_bezier_stroke_new_ellipse {
    $blurb = 'Adds a bezier stroke describing an ellipse the vectors object.';

    $help = <<'HELP';
Adds a bezier stroke describing an ellipse the vectors object.
HELP

    &simon_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'vectors', type => 'vectors',
	  desc => 'The vectors object' },
        { name => 'x0', type => 'float',
          desc => 'The x-coordinate of the center' },
        { name => 'y0', type => 'float',
          desc => 'The y-coordinate of the center' },
        { name => 'radius_x', type => 'float',
          desc => 'The radius in x direction' },
        { name => 'radius_y', type => 'float',
          desc => 'The radius in y direction' },
        { name => 'angle', type => 'float',
          desc => 'The angle the x-axis of the ellipse
                   (radians, counterclockwise)' }
    );

    @outargs = (
        { name => 'stroke_id', type => 'int32',
          desc => 'The resulting stroke' }
    );

    %invoke = (
        code => <<"CODE"
{
  GimpStroke *stroke;
  GimpCoords  coord0 = GIMP_COORDS_DEFAULT_VALUES;

  coord0.x = x0;
  coord0.y = y0;

  stroke = gimp_bezier_stroke_new_ellipse (&coord0, radius_x, radius_y, angle);
  gimp_vectors_stroke_add (vectors, stroke);
  stroke_id = gimp_stroke_get_ID (stroke);
}
CODE
    );
}

sub vectors_to_selection {
    $blurb = 'Transforms the specified vectors object into a selection';

    $help = <<'HELP';
This procedure renders the desired vectors object into the current selection
of the image the vectors object belongs to.
HELP

    &simon_pdb_misc('2006', '2.4');

    @inargs = (
        { name => 'vectors', type => 'vectors',
          desc => 'The vectors object to render to the selection' },
        { name => 'operation', type => 'enum GimpChannelOps',
          desc => 'The desired operation with current selection' },
        { name => 'antialias', type => 'boolean',
          desc => 'Antialias selection.' },
        { name => 'feather', type => 'boolean',
          desc => 'Feather selection.' },
        { name => 'feather_radius_x', type => 'float',
          desc => 'Feather radius x.'  },
        { name => 'feather_radius_y', type => 'float',
          desc => 'Feather radius y.'  }
    );

    %invoke = (
        code => <<'CODE'
{
  GimpImage *image;

  image = gimp_item_get_image (GIMP_ITEM (vectors));

  if (image)
    gimp_channel_select_vectors (gimp_image_get_mask (image),
                                 _("Path to Selection"),
                                 vectors,
                                 operation,
                                 antialias,
                                 feather,
                                 feather_radius_x,
                                 feather_radius_y,
                                 TRUE);
  else
    success = FALSE;
}
CODE
    );

}

@headers = qw(<string.h> "core/gimp.h" "core/gimplist.h" "core/gimpimage.h"
              "core/gimpchannel-select.h" "vectors/gimpanchor.h" "vectors/gimpbezierstroke.h"
              "vectors/gimpvectors.h"
              "gimp-intl.h");

@procs = qw(vectors_new
            vectors_get_image
            vectors_get_name vectors_set_name
            vectors_get_visible vectors_set_visible
            vectors_get_linked vectors_set_linked
            vectors_get_tattoo vectors_set_tattoo
            vectors_get_strokes 
            vectors_stroke_get_length
            vectors_stroke_get_point_at_dist
            vectors_stroke_remove
            vectors_stroke_close
            vectors_stroke_translate
            vectors_stroke_scale
            vectors_stroke_interpolate
            vectors_bezier_stroke_new_moveto
            vectors_bezier_stroke_lineto
            vectors_bezier_stroke_conicto
            vectors_bezier_stroke_cubicto
            vectors_bezier_stroke_new_ellipse
            vectors_to_selection);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Paths';

1;
