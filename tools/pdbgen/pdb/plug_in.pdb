# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub plugins_query {
    $blurb = 'Queries the plugin database for its contents.';
    $help  = 'This procedure queries the contents of the plugin database.';

    &andy_pdb_misc('1998');

    @inargs = (
	{ name  => 'search_string', type => 'string', no_success => 1,
	  desc  => 'If not an empty string then use this as a search pattern' }
    );

    @outargs = (
	{ name => 'menu_path', type => 'stringarray',
	  desc => 'The menu path of the plugin',
	  array => { name => 'num_plugins',
		     desc => 'The number of plugins' } },
	{ name => 'plugin_accelerator', type => 'stringarray',
	  desc => 'String representing keyboard accelerator (could be empty
		   string)',
	  array => { name => 'num_plugins', no_declare => 1,
		     desc => 'The number of plugins' } },
	{ name => 'plugin_location', type => 'stringarray',
	  desc => 'Location of the plugin program',
	  array => { name => 'num_plugins', no_declare => 1,
		     desc => 'The number of plugins' } },
	{ name => 'plugin_image_type', type => 'stringarray',
	  desc => 'Type of image that this plugin will work on',
	  array => { name => 'num_plugins', no_declare => 1,
		     desc => 'The number of plugins' } },
	{ name => 'plugin_install_time', type => 'int32array',
	  desc => 'Time that the plugin was installed',
	  array => { name => 'num_plugins', no_declare => 1,
		     desc => 'The number of plugins' } },
	{ name => 'plugin_real_name', type => 'stringarray',
	  desc => 'The internal name of the plugin',
	  array => { name => 'num_plugins', no_declare => 1,
		     desc => 'The number of plugins' } }
    );

    %invoke = (
	code => <<'CODE'
{
  num_plugins = plug_ins_query (gimp, search_string,
                                &menu_path,
                                &plugin_accelerator,
                                &plugin_location,
                                &plugin_image_type,
                                &plugin_real_name,
                                &plugin_install_time);
}
CODE
    );
}

sub plugin_domain_register {
    $blurb = 'Registers a textdomain for localisation.';

    $help = <<'HELP';
This procedure adds a textdomain to the list of domains Gimp searches 
for strings when translating its menu entries. There is no need to 
call this function for plug-ins that have their strings included in 
the gimp-std-plugins domain as that is used by default. If the compiled 
message catalog is not in the standard location, you may specify an 
absolute path to another location. This procedure can only be called 
in the query function of a plug-in and it has to be called before any
procedure is installed.
HELP

    &neo_pdb_misc('2000');

    @inargs = (
	{ name => 'domain_name', type => 'string',
	  desc => 'The name of the textdomain (must be unique)' },
	{ name => 'domain_path', type => 'string', no_success => 1,
	  desc => 'The absolute path to the compiled message catalog (may be
		   NULL)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->query)
    {
      plug_in_def_set_locale_domain_name (gimp->current_plug_in->plug_in_def,
                                          domain_name);
      plug_in_def_set_locale_domain_path (gimp->current_plug_in->plug_in_def,
	                                  domain_path);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plugin_help_register {
    $blurb = "Register a help path for a plug-in.";

    $help = <<HELP;
This procedure changes the help rootdir for the plug-in which calls it. All
subsequent calls of gimp_help from this plug-in will be interpreted relative
to this rootdir.
HELP

    &mitch_pdb_misc('2000');

    @inargs = (
	{ name => 'domain_name', type => 'string',
	  desc => "The XML namespace of the plug-in's help pages" },
	{ name => 'domain_uri', type => 'string',
	  desc => "The root URI of the plug-in's help pages" }
    );

    %invoke = (
        code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->query)
    {
      plug_in_def_set_help_domain_name (gimp->current_plug_in->plug_in_def,
                                        domain_name);
      plug_in_def_set_help_domain_uri (gimp->current_plug_in->plug_in_def,
                                       domain_uri);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plugin_menu_register {
    $blurb = "Register an additional menu path for a plug-in procedure.";

    $help = <<HELP;
This procedure installs an additional menu entry for the given procedure.
HELP

    &mitch_pdb_misc('2004', '2.2');

    @inargs = (
	{ name => 'procedure_name', type => 'string',
	  desc => 'The procedure for which to install the menu path' },
	{ name => 'menu_path', type => 'string',
	  desc => "The procedure's additional menu path" }
    );

    %invoke = (
        code => <<'CODE'
{
  if (gimp->current_plug_in)
    {
      gchar *canonical = gimp_canonicalize_identifier (procedure_name);

      success = plug_in_menu_register (gimp->current_plug_in,
				       canonical, menu_path);
      g_free (canonical);
    }
  else
    {
      success = FALSE;
    }
}
CODE
    );
}

sub plugin_menu_branch_register {
    $blurb = "Register a sub-menu.";

    $help = <<HELP;
This procedure installs an sub-menu which does not belong to any procedure.
HELP

    &mitch_pdb_misc('2005', '2.4');

    @inargs = (
	{ name => 'menu_path', type => 'string',
	  desc => "The sub-menu's menu path" },
	{ name => 'menu_name', type => 'string',
	  desc => 'The name of the sub-menu' }
    );

    %invoke = (
        code => <<'CODE'
{
  if (gimp->current_plug_in)
    {
      plug_ins_menu_branch_add (gimp, gimp->current_plug_in->prog,
                                menu_path, menu_name);

      if (! gimp->no_interface)
        {
          gimp_menus_create_branch (gimp, gimp->current_plug_in->prog,
                                    menu_path, menu_name);
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plugin_icon_register {
    $blurb = "Register an icon for a plug-in procedure.";

    $help = <<HELP;
This procedure installs an icon for the given procedure.
HELP

    &mitch_pdb_misc('2004', '2.2');

    @inargs = (
	{ name => 'procedure_name', type => 'string', wrap => 1,
	  desc => 'The procedure for which to install the icon' },
        { name => 'icon_type', type => 'enum GimpIconType',
          desc => 'The type of the icon: %%desc%%' },
	{ name => 'icon_data', type => 'int8array',
	  desc => "The procedure's icon. The format depends on the
                   'icon_type' parameter",
	  array => { name => 'icon_data_length', type => '1 <= int32',
                     desc => "The length of 'icon-data' %%desc%%" } }
    );

    %invoke = (
        code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->query)
    {
      PlugInProcDef *proc_def;
      gchar         *canonical;

      canonical = gimp_canonicalize_identifier (procedure_name);

      proc_def = plug_in_proc_def_find (gimp->current_plug_in->plug_in_def->proc_defs,
                                        canonical);

      g_free (canonical);

      if (proc_def)
        plug_in_proc_def_set_icon (proc_def, icon_type,
                                   icon_data, icon_data_length);
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> <stdlib.h>
              "libgimpbase/gimpbase.h" "libgimpbase/gimpprotocol.h"
              "core/gimp.h"
              "plug-in/plug-in.h" "plug-in/plug-ins.h"
              "plug-in/plug-ins-query.h"
              "plug-in/plug-in-def.h" "plug-in/plug-in-params.h"
              "plug-in/plug-in-proc-def.h");

@procs = qw(plugins_query
	    plugin_domain_register plugin_help_register
            plugin_menu_register plugin_menu_branch_register
            plugin_icon_register);

%exports = (app => [@procs], lib => [@procs[1,2,3,4,5]]);

$desc = 'Plug-in';

1;
