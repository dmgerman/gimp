# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

# Text

sub pdb_misc {
   &std_pdb_misc;
   $author = 'Martin Edlman';
   $date = '1998';
}

sub text_arg () {{
    name => 'text',
    type => 'string',
    desc => 'The text to generate (in UTF-8 encoding)'
}}

sub fontname_arg () {{
    name => 'fontname',
    type => 'string',
    desc => 'The name of the font'
}}

sub size_args () {(
    { name => 'size', type => '0 < float',
      desc => 'The size of text in either pixels or points' },
    { name => 'size_type', type => 'enum GimpSizeType',
      desc => 'The units of specified size: %%desc%%' }
)}

sub render_args () {(
    &std_image_arg,
    { name => 'drawable', type => 'drawable',
      desc => 'The affected drawable: (-1 for a new text layer)',
      no_success => 1 },
    { name => 'x', type => 'float',
      desc => 'The x coordinate for the left of the text bounding box' },
    { name => 'y', type => 'float',
      desc => 'The y coordinate for the top of the text bounding box' },
    &text_arg,
    { name => 'border', type => '-1 <= int32',
      desc => 'The size of the border: %%desc%%' },
    &std_antialias_arg,
    &size_args
)}

@props = qw(foundry family weight slant set_width spacing registry encoding);

sub font_prop_args {
   my @result;
   foreach (@props) {
	(my $desc = $_) =~ s/_/-/g;
	push @result, { name => $_, type => 'string', no_validate => 1,
			desc => qq/The font $desc/ }
   }
   @result;
}

sub render_outargs {
   @outargs = (
	{ name => 'text_layer', type => 'layer',
	  desc => 'The new text layer or -1 if no layer was created.',
	  init => 1, return_fail => -1 }
   );
}

sub extents_outargs {
    foreach (qw(width height ascent descent)) {
	push @outargs, { name => $_, type => 'int32',
			 desc => "The $_ of the specified font" }
    }
}

sub text_fontname {
    $blurb = <<'BLURB';
Add text at the specified location as a floating selection or a new layer.
BLURB

    $help = <<'HELP';
This tool requires a fontname matching an installed PangoFT2 font.
You can specify the fontsize in units of pixels
or points, and the appropriate metric is specified using the size_type
argument. The x and y parameters together control the placement of the new
text by specifying the upper left corner of the text bounding box. If the
specified drawable parameter is valid, the text will be created as a floating
selection attached to the drawable. If the drawable parameter is not valid
(-1), the text will appear as a new layer. Finally, a border can be specified
around the final rendered text. The border is measured in pixels.

HELP

    &pdb_misc;
    $author .= ' & Sven Neumann';
    $date   .= '- 2001';

    @inargs = (
        &render_args,
	&fontname_arg
    );

    &render_outargs;

    %invoke = (
	code => <<'CODE'
{
  if (drawable && ! gimp_item_is_attached (GIMP_ITEM (drawable)))
    success = FALSE;

  if (success)
    {
      gchar *real_fontname = g_strdup_printf ("%s %d", fontname, (gint) size);

      text_layer = text_render (gimage, drawable, context,
                                x, y, real_fontname, text,
                                border, antialias);

      g_free (real_fontname);
    }
}
CODE
    );
}

sub text_get_extents_fontname {
    $blurb = 'Get extents of the bounding box for the specified text.';

    $help = <<'HELP';
This tool returns the width and height of a bounding box for the specified text
string with the specified font information. Ascent and descent for the
specified font are returned as well.
HELP

    &pdb_misc;
    $author .= ' & Sven Neumann';
    $date   .= '- 2001';
 
    @inargs = (
	&text_arg,
	&size_args,
	&fontname_arg
    );

    &extents_outargs;
    $outargs[0]->{void_ret} = 1;

    %invoke = (
	vars => [ 'gchar *real_fontname' ],
	code => <<'CODE'
{
  real_fontname = g_strdup_printf ("%s %d", fontname, (gint) size);

  success = text_get_extents (real_fontname, text,
			      &width, &height,
			      &ascent, &descent);

  g_free (real_fontname);
}
CODE
    );
}

sub text {
    &std_pdb_deprecated ('gimp-text-fontname');

    @inargs = (
	&render_args,
        &font_prop_args
    );

    &render_outargs;

    %invoke = (
	code => <<'CODE'
{
  if (drawable && ! gimp_item_is_attached (GIMP_ITEM (drawable)))
    success = FALSE;

  if (success)
    {
      gchar *real_fontname = g_strdup_printf ("%s %d", family, (gint) size);

      text_layer = text_render (gimage, drawable, context,
                                x, y, real_fontname, text,
                                border, antialias);

      g_free (real_fontname);
    }
}
CODE
   );
}

sub text_get_extents {
    &std_pdb_deprecated ('gimp-text-get-extents-fontname');

    @inargs = (
	&text_arg,
	&size_args,
	&font_prop_args
    );

    &extents_outargs;
    $outargs[0]->{void_ret} = 1;

    %invoke = (
	vars => [ 'gchar *real_fontname' ],
	code => <<'CODE'
{
  real_fontname = g_strdup_printf ("%s %d", family, (gint) size);

  success = text_get_extents (real_fontname, text,
			      &width, &height,
			      &ascent, &descent);

  g_free (real_fontname);
}
CODE
    );
}

@headers = qw("libgimpbase/gimpbase.h" "text/gimptext-compat.h");

@procs = qw(text_fontname text_get_extents_fontname text text_get_extents);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Text procedures';

1;
