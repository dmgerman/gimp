# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub palettes_refresh {
    $blurb = 'Refreshes current palettes. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all palettes currently in the user's palette path
and updates the palette dialogs accordingly.
HELP

    &adrian_pdb_misc('1998');

    %invoke = (
        code => 'gimp_data_factory_data_refresh (gimp->palette_factory);'
    )
}

sub palettes_get_list {
    $blurb = 'Retrieves a list of all of the available palettes';

    $help = <<'HELP';
This procedure returns a complete listing of available palettes. Each name
returned can be used as input to the command 'gimp-context-set-palette'.
HELP

    &rock_pdb_misc('2001');

    @inargs = (
	{ name => 'filter', type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
        { name => 'palette_list', type => 'stringarray',
          desc => 'The list of palette names',
          array => { name => 'num_palettes',
                     desc => 'The number of palettes in the list' },
	  init => 1 }
    );

    %invoke = (
        headers => [ qw("core/gimpcontainer-filter.h") ],
        code => 'palette_list = gimp_container_get_filtered_name_array (gimp->palette_factory->container, filter, &num_palettes);'
    );
}

sub palettes_get_palette {
    &std_pdb_deprecated ('gimp-context-get-palette');

    @outargs = (
	{ name => 'name', type => 'string', no_declare => 1,
	  desc => 'The palette name', null_ok => '1',
	  alias => 'g_strdup (GIMP_OBJECT (palette)->name)' },
	{ name => 'num_colors', type => 'int32', no_declare => 1,
	  desc => 'The palette num_colors',
	  alias => 'palette->n_colors' }
    );

    %invoke = (
        vars => [ 'GimpPalette *palette' ],
        code => 'success = (palette = gimp_context_get_palette (context)) != NULL;'
    );
}

sub palettes_get_palette_entry {
    &std_pdb_deprecated ('gimp-palette-entry-get-color');

    @inargs = (
	{ name => 'name', type => 'string',
	  desc => 'The palette name ("" means currently active palette)',
	  null_ok => '1' },
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' }
    );

    @outargs = (
	{ name => 'name', type => 'string', no_declare => 1,
	  desc => 'The palette name', null_ok => '1',
	  alias => 'g_strdup (GIMP_OBJECT (palette)->name)' },
	{ name => 'num_colors', type => 'int32', no_declare => 1,
	  desc => 'The palette num_colors',
	  alias => 'palette->n_colors' },
	{ name => 'color', type => 'color', void_ret => 1,
	  desc => 'The color requested' }
    );

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<"CODE"
{
  if (name && strlen (name))
    {
      palette = (GimpPalette *)
        gimp_container_get_child_by_name (gimp->palette_factory->container,
                                          name);
    }
  else
    {
      palette = gimp_context_get_palette (context);
    }

  if (palette)
    {
      if (entry_num < 0 || entry_num >= palette->n_colors)
        {
          success = FALSE;
        }
      else
        {
          GimpPaletteEntry *entry;

          entry = (GimpPaletteEntry *)
            g_list_nth_data (palette->colors, entry_num);

          color = entry->color;
        }
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> "core/gimp.h" "core/gimpcontext.h" "core/gimplist.h"
              "core/gimpdatafactory.h" "core/gimppalette.h");

@procs = qw(palettes_refresh  palettes_get_list
            palettes_get_palette palettes_get_palette_entry);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Palettes';

1;
