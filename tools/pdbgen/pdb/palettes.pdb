# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub rock_misc {
    $author = 'Nathan Summers <rock@gimp.org>';
    $copyright = 'Nathan Summers';
    $date = '2001';
}

sub adrian_misc {
    $author = 'Adrian Likins <adrian@gimp.org>';
    $copyright = 'Adrian Likins';
    $date = '1998';
}

sub mitch_misc {
    $author = 'Michael Natterer <mitch@gimp.org>';
    $copyright = 'Michael Natterer';
    $date = '2004';
    $since = '2.2';
}

sub palette_arg () {{
    name => 'name',
    type => 'string',
    desc => 'The palette name',
    null_ok => '1'
}}

sub dim_args () {
    my @args;
    foreach (qw(num_colors)) {
        push @args, { name => $_, type => 'int32', desc => "The palette $_" };
    }
    @args;
}

sub palette_outargs {
    foreach (@outargs) {
        my $alias;
        if ($_->{type} eq 'string') {
            $alias = "GIMP_OBJECT (palette)->$_->{name}";
        } else {
            $alias = "palette->$_->{name}";
        }
        $alias = "g_strdup ($alias)" if $_->{type} eq 'string';
        $alias =~ s/num_colors/n_colors/ if $_->{name} =~ /num_colors/;
        $_->{alias} = $alias;
        $_->{no_declare} = 1;
    }
}

my $get_palette_from_name = <<'CODE';
if (name && strlen (name))
  {
    palette = (GimpPalette *)
      gimp_container_get_child_by_name (gimp->palette_factory->container,
                                        name);
  }
else
  {
    palette = gimp_context_get_palette (context);
  }
CODE


# The defs

sub palettes_refresh {
    $blurb = 'Refreshes current palettes. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all palettes currently in the user's palette path
and updates the palette dialogs accordingly.
HELP

    &adrian_misc;

    %invoke = (
	code => <<'CODE'
{
  gimp_data_factory_data_save (gimp->palette_factory);
  gimp_data_factory_data_init (gimp->palette_factory, FALSE);
}
CODE
    );
}

sub palettes_get_list {
    $blurb = 'Retrieves a list of all of the available palettes';

    $help = <<'HELP';
This procedure returns a complete listing of available palettes. Each name
returned can be used as input to the command 'gimp_context_set_palette'.
HELP

    &rock_misc;

    @inargs = (
	{ name => 'filter', type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
        { name => 'palette_list', type => 'stringarray',
          desc => 'The list of palette names',
          array => { name => 'num_palettes',
                     desc => 'The number of palettes in the list' },
	  init => 1 }
    );

    %invoke = (
        headers => [ qw("core/gimpcontainer-filter.h") ],
        code => 'palette_list = gimp_container_get_filtered_name_array (gimp->palette_factory->container, filter, &num_palettes);'
    );
}

sub palettes_get_palette {
    &std_pdb_deprecated ('gimp_context_get_palette');

    @outargs = (
        &palette_arg,
        &dim_args,
    );

    &palette_outargs;

    %invoke = (
        vars => [ 'GimpPalette *palette' ],
        code => 'success = (palette = gimp_context_get_palette (context)) != NULL;'
    );
}

sub palettes_get_palette_entry {
    &std_pdb_deprecated ('gimp_palette_entry_get_color');

    @inargs = (
        &palette_arg,
        { name => 'entry_num', type => 'int32',
          desc => 'The entry to retrieve' }
    );
    $inargs[0]->{desc} = 'The palette name ("" means currently active palette)';

    @outargs = (
        &palette_arg,
        &dim_args,
    );

    &palette_outargs;

    push @outargs, { name => 'color', type => 'color', void_ret => 1,
                     desc => 'The color requested' };

    %invoke = (
	vars => [ 'GimpPalette *palette = NULL' ],
	code => <<"CODE"
{
  $get_palette_from_name

  if (palette)
    {
      if (entry_num < 0 || entry_num >= palette->n_colors) 
        {
          success = FALSE;
        }
      else
        {
          GimpPaletteEntry *entry;

          entry = (GimpPaletteEntry *)
            g_list_nth_data (palette->colors, entry_num);

          color = entry->color;
        }
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> "core/gimp.h" "core/gimpcontext.h" "core/gimplist.h"
              "core/gimpdatafactory.h" "core/gimppalette.h");

@procs = qw(palettes_refresh  palettes_get_list
            palettes_get_palette palettes_get_palette_entry);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Palettes';

1;
