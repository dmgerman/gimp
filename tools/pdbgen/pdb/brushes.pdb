# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub brush_arg () {{
    name => 'name',
    type => 'string',
    desc => 'The brush name',
    null_ok => '1'
}}

sub dim_args () {
    my @args;
    foreach (qw(width height)) {
	push @args, { name => $_, type => 'int32', desc => "The brush $_" };
    }
    @args;
}

sub opacity_arg () {{
    name => 'opacity',
    type => '0 <= float <= 100',
    desc => 'The brush opacity: %%desc%%'
}}

sub spacing_arg () {{
    name => 'spacing',
    type => '0 <= int32 <= 1000',
    desc => 'The brush spacing: %%desc%%'
}}

sub paint_mode_arg () {{
    name => 'paint_mode', type => 'enum GimpLayerModeEffects',
    desc => 'The paint mode: { %%desc%% }'
}}

sub brush_outargs {
    foreach (@outargs) {
	my $alias = ($_->{type} eq 'string') ?
	            "GIMP_OBJECT (brush)->$_->{name}" : "brush->$_->{name}";
	$alias = "g_strdup ($alias)" if $_->{type} eq 'string';
	$alias =~ s/brush/brush->mask/ if $_->{name} =~ /width|height/;
	$_->{alias} = $alias;
	$_->{no_declare} = 1;
    }
}

my $get_brush_from_name = <<'CODE';
if (name && strlen (name))
  {
    brush = (GimpBrush *)
      gimp_container_get_child_by_name (gimp->brush_factory->container,
                                        name);
  }
else
  {
    brush = gimp_context_get_brush (context);
  }
CODE


# The defs

sub brushes_refresh {
    $blurb = 'Refresh current brushes. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all brushes currently in the user's brush path
and updates the brush dialogs accordingly.
HELP

    $author = $copyright = 'Seth Burgess';
    $date = '1997';

    %invoke = (
	code => <<'CODE'
{
  gimp_data_factory_data_save (gimp->brush_factory);
  gimp_data_factory_data_init (gimp->brush_factory, FALSE);
}
CODE
    );
}

sub brushes_get_list {
    $blurb = 'Retrieve a complete listing of the available brushes.';

    $help = <<'HELP';
This procedure returns a complete listing of available GIMP
brushes. Each name returned can be used as input to the
'gimp_context_set_brush' procedure.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'filter', type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
	{ name => 'brush_list', type => 'stringarray',
	  desc => 'The list of brush names',
	  array => { name => 'num_brushes',
		     desc => 'The number of brushes in the brush list' },
	  init => 1 }
    );

    %invoke = (
        headers => [ qw("core/gimpcontainer-filter.h") ],
	code => 'brush_list = gimp_container_get_filtered_name_array (gimp->brush_factory->container, filter, &num_brushes);'
    );
}

sub brushes_get_brush {
    $blurb = $help = "This procedure is deprecated! Use 'gimp_context_get_brush' instead.";
    $author = $copyright = $date = '';

    $deprecated = 1;

    @outargs = (
	&brush_arg,
	&dim_args,
	&spacing_arg
    );

    &brush_outargs;

    %invoke = (
	vars => [ 'GimpBrush *brush' ],
	code => 'success = (brush = gimp_context_get_brush (context)) != NULL;'
    );
}

sub brushes_get_spacing {
    $blurb = $help = "This procedure is deprecated! Use 'gimp_brush_get_spacing' instead.";
    $author = $copyright = $date = '';

    $deprecated = 1;

    @outargs = ( &spacing_arg );
    $outargs[0]->{alias} = 'gimp_brush_get_spacing (gimp_context_get_brush (context))';
    $outargs[0]->{no_declare} = 1;
}

sub brushes_set_spacing {
    $blurb = $help = "This procedure is deprecated! Use 'gimp_brush_set_spacing' instead.";
    $author = $copyright = $date = '';

    $deprecated = 1;

    @inargs = ( &spacing_arg );

    %invoke = (
	code => 'gimp_brush_set_spacing (gimp_context_get_brush (context), spacing);'
    );
}

sub brushes_get_brush_data {
    $blurb = <<'BLURB';
Retrieve information about the currently active brush (including data).
BLURB

    $help = <<'HELP';
This procedure retrieves information about the currently active brush. This
includes the brush name, and the brush extents (width and height). It also
returns the brush data.
HELP

    $author = $copyright = 'Andy Thomas';
    $date = '1998';

    @inargs = (
        &brush_arg
    );
    $inargs[0]->{desc} = 'The brush name ("" means current active brush)';

    @outargs = (
	&brush_arg,
	&opacity_arg,
	&spacing_arg,
	&paint_mode_arg,
	&dim_args,
    );

    &brush_outargs;

    $outargs[1]->{alias} = '1.0';
    $outargs[3]->{alias} = '0';

    push @outargs, { name => 'mask_data', type => 'int8array', init => 1,
		     desc => 'The brush mask data',
		     array => { name => 'length', init => 1,
				desc => 'Length of brush mask data' } };
    
    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  if (name && strlen (name))
    {
      brush = (GimpBrush *)
        gimp_container_get_child_by_name (gimp->brush_factory->container, name);
    }
  else
    {
      brush = gimp_context_get_brush (context);
    }

  if (brush)
    {
      length    = brush->mask->height * brush->mask->width;
      mask_data = g_memdup (temp_buf_data (brush->mask), length);
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> "base/temp-buf.h"
              "core/gimp.h" "core/gimplist.h" "core/gimpbrush.h"
              "core/gimpcontext.h" "core/gimpdatafactory.h");

@procs = qw(brushes_refresh brushes_get_list brushes_get_brush
            brushes_get_spacing brushes_set_spacing brushes_get_brush_data);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Brushes';

1;
