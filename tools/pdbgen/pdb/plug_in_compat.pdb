# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub plug_in_colortoalpha {
    $blurb = 'Convert a specified color to transparency';

    $help = <<'HELP';
This replaces as much of a given color as possible in each pixel with
a corresponding amount of alpha, then readjusts the color accordingly.
HELP

    &std_pdb_misc;
    $date = '1999';

    @inargs = (
	{ name => 'run_mode', type => 'enum GimpRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'color', type => 'color',
	  desc => 'Color to remove' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) &&
      gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error))
    {
      /* XXX: fixme disable for gray, and add alpha when needed */

      GeglColor *gegl_color = gimp_gegl_color_new (&color);
      GeglNode  *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:color-to-alpha",
                             "color",     gegl_color,
                             NULL);
      g_object_unref (gegl_color);

      gimp_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Color to Alpha"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_pixelize {
    $blurb = 'Simplify image into an array of solid-colored squares';

    $help = <<'HELP';
Pixelize the contents of the specified drawable with specified
pixelizing width.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum GimpRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'pixel_width', type => '1 <= int32 <= GIMP_MAX_IMAGE_SIZE',
	  desc => 'Pixel width (the decrease in resolution)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) &&
      gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:pixelise",
                             "size-x",    pixel_width,
                             "size-y",    pixel_width,
                             NULL);

      gimp_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Pixelize"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_pixelize2 {
    $blurb = 'Simplify image into an array of solid-colored rectangles';

    $help = <<'HELP';
Pixelize the contents of the specified drawable with specified
pixelizing width and height.
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum GimpRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' },
	{ name => 'pixel_width', type => '1 <= int32 <= GIMP_MAX_IMAGE_SIZE',
	  desc => 'Pixel width (the decrease in horizontal resolution)' },
	{ name => 'pixel_height', type => '1 <= int32 <= GIMP_MAX_IMAGE_SIZE',
	  desc => 'Pixel height (the decrease in vertical resolution)' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) &&
      gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:pixelise",
                             "size-x",    pixel_width,
                             "size-y",    pixel_height,
                             NULL);

      gimp_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Pixelize"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub plug_in_vinvert {
    $blurb = 'Invert the brightness of each pixel';

    $help = <<'HELP';
This function takes an indexed/RGB image and inverts its 'value' in
HSV space.  The upshot of this is that the color and saturation at any
given point remains the same, but its brightness is effectively
inverted.  Quite strange.  Sometimes produces unpleasant color
artifacts on images from lossy sources (ie. JPEG).
HELP

    &std_pdb_misc;
    $date = '1997';

    @inargs = (
	{ name => 'run_mode', type => 'enum GimpRunMode', dead => 1,
	  desc => 'The run mode' },
	{ name => 'image', type => 'image', dead => 1,
	  desc => 'Input image (unused)' },
	{ name => 'drawable', type => 'drawable',
	  desc => 'Input drawable' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp_pdb_item_is_attached (GIMP_ITEM (drawable), NULL, TRUE, error) &&
      gimp_pdb_item_is_not_group (GIMP_ITEM (drawable), error))
    {
      GeglNode *node =
        gegl_node_new_child (NULL,
                             "operation", "gegl:value-invert",
                             NULL);

      gimp_drawable_apply_operation (drawable, progress,
                                     C_("undo-type", "Value Invert"),
                                     node);

      g_object_unref (node);
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw("libgimpbase/gimpbase.h"
              "gegl/gimp-gegl-utils.h"
              "core/gimpdrawable.h"
              "core/gimpdrawable-operation.h"
              "gimppdb-utils.h"
              "gimp-intl.h");

@procs = qw(plug_in_colortoalpha
            plug_in_pixelize
            plug_in_pixelize2
            plug_in_vinvert);

%exports = (app => [@procs], lib => []);

$desc = 'Plug-In Compat';
$doc_title = 'plugincolor';
$doc_short_desc = 'Compatibility for removed plug-ins.';
$doc_long_desc = 'Functions that perform the operation of removed plug-ins using GEGL operations.';

1;
