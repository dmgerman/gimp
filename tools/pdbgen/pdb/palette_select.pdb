# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub pdb_misc {
    $author = 'Michael Natterer <mitch@gimp.org>';
    $copyright = 'Michael Natterer';
    $date = '2002';
}

sub palettes_popup {
    $blurb = 'Invokes the Gimp palette selection.';

    $help = 'This procedure popups the palette selection dialog.';

    &pdb_misc;

    @inargs = (
	{ name => 'palette_callback', type => 'string',
	  desc => 'The callback PDB proc to call when palette selection is
		   made' },
	{ name => 'popup_title', type => 'string',
	  desc => 'Title to give the palette popup window' },
	{ name => 'initial_palette', type => 'string',
	  desc => 'The name of the palette to set as the first selected',
	  null_ok => 1 },
    );

    %invoke = (
	vars => [ 'ProcRecord *proc' ],
	code => <<'CODE'
{
  if (! gimp->no_interface &&
      (proc = procedural_db_lookup (gimp, palette_callback)))
    {
      palette_select_new (gimp, popup_title,
                          initial_palette,
                          palette_callback);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palettes_close_popup {
    $blurb = 'Popdown the Gimp palette selection.';

    $help = 'This procedure closes an opened palette selection dialog.';

    &pdb_misc;

    @inargs = (
	{ name => 'palette_callback', type => 'string',
	  desc => 'The name of the callback registered for this popup' }
    );

    %invoke = (
	vars => [ 'ProcRecord *proc', 'PaletteSelect *palette_select' ],
	code => <<'CODE'
{
  if (! gimp->no_interface &&
      (proc = procedural_db_lookup (gimp, palette_callback)) &&
      (palette_select = palette_select_get_by_callback (palette_callback)))
    {
      palette_select_free (palette_select);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub palettes_set_popup {
    $blurb = 'Sets the current palette selection in a popup.';

    $help = $blurb;

    &pdb_misc;

    @inargs = (
	{ name => 'palette_callback', type => 'string',
	  desc => 'The name of the callback registered for this popup' },
	{ name => 'palette_name', type => 'string',
	  desc => 'The name of the palette to set as selected' },
    );

    %invoke = (
	vars => [ 'ProcRecord *proc', 'PaletteSelect *palette_select' ],
	code => <<'CODE'
{
  if (! gimp->no_interface &&
      (proc = procedural_db_lookup (gimp, palette_callback)) &&
      (palette_select = palette_select_get_by_callback (palette_callback)))
    {
      GimpPalette *active = (GimpPalette *)
        gimp_container_get_child_by_name (gimp->palette_factory->container,
                                          palette_name);

      if (active)
        {
          gimp_context_set_palette (palette_select->context, active);

          gtk_window_present (GTK_WINDOW (palette_select->shell));
        }
      else
        success = FALSE;
    }
  else
    success = FALSE;
}
CODE
    );
}

@headers = qw("core/gimp.h" "core/gimpcontext.h"
              "core/gimpcontainer.h" "core/gimpdatafactory.h"
              "gui/gui-types.h" "gui/palette-select.h");

@procs = qw(palettes_popup palettes_close_popup palettes_set_popup);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Palette UI';

1;
