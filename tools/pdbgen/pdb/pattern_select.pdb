# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub pdb_misc {
    $author = $copyright = 'Andy Thomas';
    $date = '1998';
}

sub patterns_popup {
    $blurb = 'Invokes the Gimp pattern selection.';

    $help = 'This procedure popups the pattern selection dialog.';

    &pdb_misc;

    @inargs = (
	{ name => 'pattern_callback', type => 'string',
	  desc => 'The callback PDB proc to call when pattern selection is
		   made' },
	{ name => 'popup_title', type => 'string',
	  desc => 'Title to give the pattern popup window' },
	{ name => 'initial_pattern', type => 'string',
	  desc => 'The name of the pattern to set as the first selected',
	  null_ok => 1 }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! procedural_db_lookup (gimp, pattern_callback) ||
      ! gimp_pdb_dialog_new (gimp, context, gimp->pattern_factory->container,
                             popup_title, pattern_callback, initial_pattern,
                             NULL))
    success = FALSE;
}
CODE
    );
}

sub patterns_close_popup {
    $blurb = 'Popdown the Gimp pattern selection.';

    $help = 'This procedure closes an opened pattern selection dialog.';

    &pdb_misc;

    @inargs = (
	{ name => 'pattern_callback', type => 'string',
	  desc => 'The name of the callback registered for this popup' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! procedural_db_lookup (gimp, pattern_callback) ||
      ! gimp_pdb_dialog_close (gimp, gimp->pattern_factory->container,
                               pattern_callback))
    success = FALSE;
}
CODE
    );
}

sub patterns_set_popup {
    $blurb = 'Sets the current pattern selection in a popup.';

    $help = $blurb;

    &pdb_misc;

    @inargs = (
	{ name => 'pattern_callback', type => 'string',
	  desc => 'The name of the callback registered for this popup' },
	{ name => 'pattern_name', type => 'string',
	  desc => 'The name of the pattern to set as selected' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! procedural_db_lookup (gimp, pattern_callback) ||
      ! gimp_pdb_dialog_set (gimp, gimp->pattern_factory->container,
                             pattern_callback, pattern_name,
                             NULL))
    success = FALSE;
}
CODE
    );
}

@headers = qw("core/gimp.h" "core/gimpdatafactory.h");

@procs = qw(patterns_popup patterns_close_popup patterns_set_popup);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Pattern UI';

1;
