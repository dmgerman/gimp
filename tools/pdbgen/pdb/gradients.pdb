# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub federico_misc {
    $author = $copyright = 'Federico Mena Quintero';
    $date = '1997';
}


# The defs

sub gradients_refresh {
    $blurb = 'Refresh current gradients. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all gradients currently in the user's gradient path
and updates the gradient dialogs accordingly.
HELP

    $author = $copyright = 'Michael Natterer';
    $date = '2002';

    %invoke = (
        code => 'gimp_data_factory_data_refresh (gimp->gradient_factory);'
    )
}

sub gradients_get_list {
    $blurb = 'Retrieve the list of loaded gradients.';

    $help = <<'HELP';
This procedure returns a list of the gradients that are currently loaded.
You can later use the 'gimp_context_set_gradient' function to
set the active gradient.
HELP

    &federico_misc;

    @inargs = (
	{ name => 'filter', type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
	{ name => 'gradient_list', type => 'stringarray',
	  desc => 'The list of gradient names',
	  array => { name => 'num_gradients',
		     desc => 'The number of loaded gradients' },
	  init => 1 }
    );

    %invoke = (
        headers => [ qw("core/gimpcontainer-filter.h") ],
	code => 'gradient_list = gimp_container_get_filtered_name_array (gimp->gradient_factory->container, filter, &num_gradients);'
    );
}

sub sample_num_arg {
    { name => 'num_samples', type => $_[0] . 'int32',
      desc => 'The number of samples to take', alias => 'i' }
}

sub reverse_arg {
    { name => 'reverse', type => 'boolean',
      desc => 'Use the reverse gradient (%%desc%%)' }
}

sub sample_outargs {
    @outargs = (
        { name => 'color_samples', type => 'floatarray', init => 1,
	  desc => 'Color samples: { R1, G1, B1, A1, ..., Rn, Gn, Bn, An }',
	  array => { name => 'array_length', no_lib => 1, init => 1,
		     desc => 'Length of the color_samples array (4 *
			      num_samples)' } }
    );
}

sub gradients_sample_uniform {
    &std_pdb_deprecated ('gimp_gradient_get_uniform_samples');

    @inargs = (
	 &sample_num_arg('2 <= '),
	 &reverse_arg
    );
    &sample_outargs;

    %invoke = (
	vars => [ 'GimpGradient *gradient', 'gdouble pos, delta',
                  'GimpRGB color', 'gdouble *pv' ],
	code => <<'CODE'
{
  GimpGradientSegment *seg = NULL;

  pos   = 0.0;
  delta = 1.0 / (i - 1);

  array_length = i * 4;

  pv = color_samples = g_new (gdouble, array_length);

  gradient = gimp_context_get_gradient (context);

  while (i--)
    {
      seg = gimp_gradient_get_color_at (gradient, seg, pos, reverse, &color);

      *pv++ = color.r;
      *pv++ = color.g;
      *pv++ = color.b;
      *pv++ = color.a;

      pos += delta;
    }
}
CODE
    );
}

sub gradients_sample_custom {
    &std_pdb_deprecated ('gimp_gradient_get_custom_samples');

    @inargs = (
	{ name  => 'positions',
	  type  => 'floatarray',
	  desc  => 'The list of positions to sample along the gradient',
	  alias => 'pos',
	  array => &sample_num_arg("") },
	&reverse_arg
    );

    &sample_outargs;

    %invoke = (
	vars => [ 'GimpGradient *gradient', 'GimpRGB color', 'gdouble *pv' ],
	code => <<'CODE'
{
  GimpGradientSegment *seg = NULL;

  array_length = i * 4;

  pv = color_samples = g_new (gdouble, array_length);

  gradient = gimp_context_get_gradient (context);

  while (i--)
    {
      seg = gimp_gradient_get_color_at (gradient, seg, *pos, reverse, &color);

      *pv++ = color.r;
      *pv++ = color.g;
      *pv++ = color.b;
      *pv++ = color.a;

      pos++;
    }
}
CODE
    );
}

sub sample_size_arg {
    { name => 'sample_size',
      type => '0 < int32 <= 10000',
      desc => 'Size of the sample to return when the gradient is changed
	      (%%desc%%)',
      on_fail => 'sample_size = GIMP_GRADIENT_DEFAULT_SAMPLE_SIZE;',
      no_success => 1 }
}

sub gradients_get_gradient_data {
    &std_pdb_deprecated ('gimp_gradient_get_uniform_samples');

    @inargs = (
	{ name => 'name', type => 'string',
	  desc => 'The gradient name ("" means current active gradient)',
          null_ok => '1' },
	&sample_size_arg,
	&reverse_arg
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => 'The gradient name',
	  alias => 'g_strdup (GIMP_OBJECT (gradient)->name)', no_declare => 1 },
	{ name => 'grad_data', type => 'floatarray', alias => 'values',
	  desc => 'The gradient sample data', init => 1,
	  array => { name => 'width',
		     desc => 'The gradient sample width (r,g,b,a)',
		     alias => 'sample_size * 4', no_declare => 1 } }
    );

    %invoke = (
	vars => [ 'GimpGradient *gradient = NULL' ],
	code => <<"CODE"
{
  if (name && strlen (name))
    {
      gradient = (GimpGradient *)
        gimp_container_get_child_by_name (gimp->gradient_factory->container,
                                          name);
    }
  else
    {
      gradient = gimp_context_get_gradient (context);
    }

  if (gradient)
    {
      GimpGradientSegment *seg = NULL;
      gdouble             *pv;
      gdouble              pos, delta;
      GimpRGB              color;
      gint                 i;

      i     = sample_size;
      pos   = 0.0;
      delta = 1.0 / (i - 1);

      pv = values = g_new (gdouble, i * 4);

      while (i--)
	{
	  seg = gimp_gradient_get_color_at (gradient, seg, pos, reverse, &color);

	  *pv++ = color.r;
	  *pv++ = color.g;
	  *pv++ = color.b;
	  *pv++ = color.a;

	  pos += delta;
	}
    }
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> "core/gimp.h" "core/gimpcontext.h" "core/gimplist.h"
              "core/gimpdatafactory.h" "core/gimpgradient.h");

@procs = qw(gradients_refresh gradients_get_list
	    gradients_sample_uniform gradients_sample_custom
            gradients_get_gradient_data);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Gradients';

1;
