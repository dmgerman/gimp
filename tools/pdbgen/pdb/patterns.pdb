# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub pattern_arg () {{
    name => 'name',
    type => 'string',
    desc => 'The pattern name'
}}

sub dim_args () {
    my @args;
    foreach (qw(width height)) {
	push @args, { name => $_, type => 'int32', desc => "The pattern $_" };
    }
    @args;
}

sub pattern_outargs {
    foreach (@outargs) {
	my $alias;
	if ($_->{type} eq 'string') {
	    $alias = "GIMP_OBJECT (pattern)->$_->{name}";
	} else {
	    $alias = "pattern->$_->{name}";
	}
        $alias = "g_strdup ($alias)" if $_->{type} eq 'string';
        $alias =~ s/pattern/pattern->mask/ if $_->{name} =~ /width|height/;
        $_->{alias} = $alias;
        $_->{no_declare} = 1;
    }
}

# The defs

sub patterns_refresh {
    $blurb = 'Refresh current patterns. This function always succeeds.';

    $help = <<'HELP';
This procedure retrieves all patterns currently in the user's pattern path
and updates the pattern dialogs accordingly.
HELP

    $author = $copyright = 'Michael Natterer';
    $date = '2002';

    %invoke = (
	code => <<'CODE'
{
  gimp_data_factory_data_save (gimp->pattern_factory);
  gimp_data_factory_data_init (gimp->pattern_factory, FALSE);
}
CODE
    );
}

sub patterns_get_list {
    $blurb = 'Retrieve a complete listing of the available patterns.';

    $help = <<'HELP';
This procedure returns a complete listing of available GIMP patterns. Each name
returned can be used as input to the 'gimp_patterns_set_pattern'.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'filter',
          type => 'string', null_ok => 1,
          desc => 'An optional regular expression used to filter the list' }
    );

    @outargs = (
	{ name => 'pattern_list', type => 'stringarray',
	  desc => 'The list of pattern names',
	  array => { name => 'num_patterns',
		     desc => 'The number of patterns in the pattern list' },
	  init => 1 }
    );

    %invoke = (
        headers => [ qw("core/gimpcontainer-filter.h") ],
	code => 'pattern_list = gimp_container_get_filtered_name_array (gimp->pattern_factory->container, filter, &num_patterns);'
    );
}

sub patterns_get_pattern {
    $blurb = 'Retrieve information about the currently active pattern.';

    $help = <<'HELP';
This procedure retrieves information about the currently active pattern. This
includes the pattern name, and the pattern extents (width and height). All
clone and bucket-fill operations with patterns will use this pattern to control
the application of paint to the image.
HELP

    &std_pdb_misc;

    @outargs = (
	&pattern_arg,
	&dim_args,
    );

    &pattern_outargs;

    %invoke = (
	vars => [ 'GimpPattern *pattern' ],
	code => 'success = (pattern = gimp_context_get_pattern (context)) != NULL;'
    );
}

sub patterns_set_pattern {
    $blurb = 'Set the specified pattern as the active pattern.';

    $help = <<'HELP';
This procedure allows the active pattern mask to be set by specifying its name.
The name is simply a string which corresponds to one of the names of the
installed patterns. If there is no matching pattern found, this procedure will
return an error. Otherwise, the specified pattern becomes active and will be
used in all subsequent paint operations.
HELP

    &std_pdb_misc;

    @inargs = ( &pattern_arg );

    %invoke = (
	vars => [ 'GimpPattern *pattern' ],
	code => <<'CODE'
{
  pattern = (GimpPattern *)
    gimp_container_get_child_by_name (gimp->pattern_factory->container, name);

  if (pattern)
    gimp_context_set_pattern (context, pattern);
  else
    success = FALSE;
}
CODE
    );
}

sub patterns_get_pattern_data {
    $blurb = <<'BLURB';
Retrieve information about the currently active pattern (including data).
BLURB

    $help = <<'HELP';
This procedure retrieves information about the currently active pattern. This
includes the pattern name, and the pattern extents (width and height). It also
returns the pattern data.
HELP

    $author = $copyright = 'Andy Thomas';
    $date = '1998';

    @inargs = ( &pattern_arg );
    $inargs[0]->{desc} = 'The pattern name ("" means currently active pattern)';

    @outargs = (
	&pattern_arg,
	&dim_args,
    );

    &pattern_outargs;

    push @outargs, { name => 'mask_bpp', type => 'int32', init => 1,
		     desc => 'Pattern bytes per pixel',
		     alias => 'pattern->mask->bytes', no_declare => 1 },
		   { name => 'mask_data', type => 'int8array', init => 1,
		     desc => 'The pattern mask data',
		     array => { name => 'length', init => 1,
				desc => 'Length of pattern mask data' } };
    
    %invoke = (
	vars => [ 'GimpPattern *pattern = NULL' ],
	code => <<'CODE'
{
  if (strlen (name))
    {
      pattern = (GimpPattern *)
        gimp_container_get_child_by_name (gimp->pattern_factory->container,
                                          name);
    }
  else
    {
      pattern = gimp_context_get_pattern (context);
    }

  if (pattern)
    {
      length = pattern->mask->height * pattern->mask->width *
	       pattern->mask->bytes;
      mask_data = g_memdup (temp_buf_data (pattern->mask), length);
    }
  else
    success = FALSE;
}
CODE
    );
}

@headers = qw(<string.h> "core/gimp.h" "core/gimpcontext.h" "core/gimplist.h"
              "core/gimpdatafactory.h" "core/gimppattern.h" "base/temp-buf.h");

@procs = qw(patterns_refresh patterns_get_list
            patterns_get_pattern patterns_set_pattern
            patterns_get_pattern_data);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Patterns';

1;
