# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

# The defs

sub display_new {
    $blurb = 'Create a new display for the specified image.';

    $help = <<'HELP';
Creates a new display for the specified image. If the image already has a
display, another is added. Multiple displays are handled transparently by the
GIMP. The newly created display is returned and can be subsequently destroyed
with a call to 'gimp-display-delete'. This procedure only makes sense for use
with the GIMP UI.
HELP

    &std_pdb_misc;

    @inargs = ( &std_image_arg );

    @outargs = (
	{ name => 'display', type => 'display',
	  desc => 'The new display', init => 1 }
    );

    %invoke = (
	code => <<'CODE'
{
  display = (GimpDisplay *) gimp_create_display (gimp,
                                                 gimage, GIMP_UNIT_PIXEL, 1.0);

  success = (display != NULL);

  /* the first display takes ownership of the image */
  if (success && gimage->disp_count == 1)
    g_object_unref (gimage);
}
CODE
    );
}

sub display_delete {
    $blurb = 'Delete the specified display.';

    $help = <<'HELP';
This procedure removes the specified display. If this is the last remaining 
display for the underlying image, then the image is deleted also.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'display', type => 'display',
	  desc => 'The display to delete' }
    );

    %invoke = ( code => 'gimp_display_delete (display);' );
}

sub displays_flush {
    $blurb = 'Flush all internal changes to the user interface';

    $help = <<'HELP';
This procedure takes no arguments and returns nothing except a success status.
Its purpose is to flush all pending updates of image manipulations to the user
interface. It should be called whenever appropriate.
HELP

    &std_pdb_misc;

    %invoke = (
        headers => [ qw("core/gimpcontainer.h") ],
        code => 'gimp_container_foreach (gimp->images, (GFunc) gimp_image_flush, NULL);'
    );
}


sub displays_reconnect {
    $blurb = 'Reconnect displays from one image to another image.';

    $help = <<'HELP';
This procedure connects all displays of the old_image to the new_image.
If the new_image already has a display the reconnect is not performed and the
procedure returns without success.  You should rarely need to use this
function.
HELP

    &std_pdb_misc;

    @inargs = ( 
	{ name => 'old_image', type => 'image',
	  desc => 'The old image (should have at least one display)' },
	{ name => 'new_image', type => 'image',
	  desc => 'The new image (must not have a display)' }
     );

   %invoke = ( code => 'gimp_displays_reconnect (gimp, old_image, new_image);' );
}

@headers = qw("core/gimp.h" "display/display-types.h" "display/gimpdisplay.h"
	      "display/gimpdisplay-foreach.h");

@procs = qw(display_new display_delete displays_flush displays_reconnect);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Display procedures';

1;
