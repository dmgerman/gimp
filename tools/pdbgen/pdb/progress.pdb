# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub pdb_misc {
    $author = 'Michael Natterer  <mitch@gimp.org>';
    $copyright = 'Michael Natterer';
    $date = '2004';
    $since = '2.2';
}

sub neo_pdb_misc {
    $author = 'Sven Neumann  <sven@gimp.org>';
    $copyright = 'Sven Neumann';
    $date = '2005';
    $since = '2.4';
}

sub progress_init {
    $blurb = 'Initializes the progress bar for the current plug-in.';

    $help = <<'HELP';
Initializes the progress bar for the current plug-in. It is only valid to call
this procedure from a plug-in.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'message', type => 'string', null_ok => 1,
	  desc => 'Message to use in the progress dialog' },
	{ name => 'gdisplay', type => 'int32',
	  desc => 'GimpDisplay to update progressbar in, or -1 for a seperate
		   window',
	  implicit_fill => 'gimp_default_display ()', no_id_lookup => 1 }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    {
      if (! gimp->no_interface)
	plug_in_progress_start (gimp->current_plug_in, message, gdisplay);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub progress_update {
    $blurb = 'Updates the progress bar for the current plug-in.';

    $help = <<'HELP';
Updates the progress bar for the current plug-in. It is only valid to call this
procedure from a plug-in.
HELP

    &std_pdb_misc;

    @inargs = (
	{ name => 'percentage', type => 'float',
	  desc => 'Percentage of progress completed which must be between 0.0 and 1.0' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    {
      if (! gimp->no_interface)
	plug_in_progress_update (gimp->current_plug_in, percentage);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub progress_pulse {
    $blurb = 'Pulses the progress bar for the current plug-in.';

    $help = <<'HELP';
Updates the progress bar for the current plug-in. It is only valid to
call this procedure from a plug-in. Use this function instead of
gimp_progress_update() if you cannot tell how much progress has been
made. This usually causes the the progress bar to enter "activity
mode", where a block bounces back and forth.
HELP

    &neo_pdb_misc;

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    {
      if (! gimp->no_interface)
	plug_in_progress_pulse (gimp->current_plug_in);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub progress_set_text {
    $blurb = 'Changes the text in the progress bar for the current plug-in.';

    $help = <<'HELP';
This function allows to change the text in the progress bar for the
current plug-in. Unlike gimp_progress_init() it does not change the
displayed value.
HELP

    &neo_pdb_misc;

    @inargs = (
	{ name => 'message', type => 'string', null_ok => 1,
	  desc => 'Message to use in the progress dialog',
	  wrap => 1 }
    );
    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    {
      if (! gimp->no_interface)
	plug_in_progress_set_text (gimp->current_plug_in, message);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub progress_install {
    $blurb = 'Installs a progress callback for the current plug-in.';

    $help = <<'HELP';
This function installs a temporary PDB procedure which will handle all
progress calls made by this plug-in and any procedure it calls. Calling
this function multiple times simply replaces the old progress callbacks.
HELP

    &pdb_misc;

    @inargs = (
	{ name => 'progress_callback', type => 'string',
	  desc => 'The callback PDB proc to call',
          wrap => 1 }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    success = plug_in_progress_install (gimp->current_plug_in,
                                        progress_callback);
  else
    success = FALSE;
}
CODE
    );
}

sub progress_uninstall {
    $blurb = 'Uninstalls the progress callback for the current plug-in.';

    $help = <<'HELP';
This function uninstalls any progress callback installed with
gimp_progress_install() before.
HELP

    &pdb_misc;

    @inargs = (
	{ name => 'progress_callback', type => 'string',
	  desc => 'The name of the callback registered for this progress',
          wrap => 1 }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    success = plug_in_progress_uninstall (gimp->current_plug_in,
                                          progress_callback);
  else
    success = FALSE;
}
CODE
    );
}

sub progress_cancel {
    $blurb = 'Cancels a running progress.';

    $help = <<'HELP';
This function cancels the currently running progress.
HELP

    &pdb_misc;

    @inargs = (
	{ name => 'progress_callback', type => 'string',
	  desc => 'The name of the callback registered for this progress' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->current_plug_in && gimp->current_plug_in->open)
    success = plug_in_progress_cancel (gimp->current_plug_in,
                                       progress_callback);
  else
    success = FALSE;
}
CODE
    );
}

@headers = qw("core/gimp.h" "plug-in/plug-in.h" "plug-in/plug-in-progress.h");

@procs = qw(progress_init progress_update progress_pulse progress_set_text
            progress_install progress_uninstall progress_cancel);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Progress';

1;
