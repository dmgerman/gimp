# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub pdb_misc {
    $author = $copyright = 'Andy Thomas';
    $date = '1998';
}

sub brush_args {(
    { name => 'opacity',
      type => '0 <= float <= 100',
      desc => 'The initial opacity of the brush' },
    { name => 'spacing',
      type => '0 <= int32 <= 1000',
      desc => 'The initial spacing of the brush (if < 0 then use brush default
	       spacing)' },
    { name => 'paint_mode', type => 'enum GimpLayerModeEffects',
      desc => 'The initial paint mode: { %%desc%% }'  }
)}

sub brushes_popup {
    $blurb = 'Invokes the Gimp brush selection.';

    $help = 'This procedure popups the brush selection dialog.';

    &pdb_misc;

    @inargs = (
	{ name => 'brush_callback', type => 'string',
	  desc => 'The callback PDB proc to call when brush selection is
		   made' },
	{ name => 'popup_title', type => 'string',
	  desc => 'Title to give the brush popup window' },
	{ name => 'initial_brush', type => 'string',
	  desc => 'The name of the brush to set as the first selected',
	  no_success => 1 },
	&brush_args
    );

    %invoke = (
	vars => [ 'ProcRecord *proc' ],
	code => <<'CODE'
{
  if (! gimp->no_interface &&
      (proc = procedural_db_lookup (gimp, brush_callback)))
    {
      brush_select_new (gimp, popup_title,
                        initial_brush,
                        opacity / 100.0,
 			paint_mode,
                        spacing,
                        brush_callback);
    }
  else
    {
      success = FALSE;
    }
}
CODE
    );
}

sub brushes_close_popup {
    $blurb = 'Popdown the Gimp brush selection.';

    $help = 'This procedure closes an opened brush selection dialog.';

    &pdb_misc;

    @inargs = (
	{ name => 'brush_callback', type => 'string',
	  desc => 'The name of the callback registered for this popup' }
    );

    %invoke = (
	vars => [ 'ProcRecord *proc', 'BrushSelect *bsp' ],
	code => <<'CODE'
{
  if (! gimp->no_interface &&
      (proc = procedural_db_lookup (gimp, brush_callback)) &&
      (bsp = brush_select_get_by_callback (brush_callback)))
    {
      brush_select_free (bsp);
    }
  else
    {
      success = FALSE;
    }
}
CODE
    );
}

sub brushes_set_popup {
    $blurb = 'Sets the current brush selection in a popup.';

    $help = $blurb;

    &pdb_misc;

    @inargs = (
	{ name => 'brush_callback', type => 'string',
	  desc => 'The name of the callback registered for this popup' },
	{ name => 'brush_name', type => 'string',
	  desc => 'The name of the brush to set as selected' },
	&brush_args
    );

    %invoke = (
	headers => [ qw("core/gimpbrush.h" "core/gimplist.h"
	                "widgets/widgets-types.h"
                        "widgets/gimpbrushfactoryview.h") ],
	vars => [ 'ProcRecord *proc', 'BrushSelect *bsp' ],
	code => <<'CODE'
{
  if (! gimp->no_interface &&
      (proc = procedural_db_lookup (gimp, brush_callback)) &&
      (bsp = brush_select_get_by_callback (brush_callback)))
    {
      GimpBrush *active = (GimpBrush *)
        gimp_container_get_child_by_name (gimp->brush_factory->container,
					  brush_name);

      success = (active != NULL);

      if (success)
	{
	  GtkAdjustment *spacing_adj;

          spacing_adj = GIMP_BRUSH_FACTORY_VIEW (bsp->view)->spacing_adjustment;

	  /* Updating the context updates the widgets as well */

	  gimp_context_set_brush (bsp->context, active);
	  gimp_context_set_opacity (bsp->context, opacity / 100.0);
	  gimp_context_set_paint_mode (bsp->context, paint_mode);

	  gtk_adjustment_set_value (spacing_adj, spacing);
	}
    }
  else
    success = FALSE;
}
CODE
    );
}

@headers = qw(<string.h> "core/gimp.h" "core/gimpcontext.h"
	      "core/gimpdatafactory.h" "gui/brush-select.h");

@procs = qw(brushes_popup brushes_close_popup brushes_set_popup);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Brush UI';

1;
