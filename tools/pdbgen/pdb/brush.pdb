# The GIMP -- an image manipulation program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub mitch_misc {
    $author = 'Michael Natterer <mitch@gimp.org>';
    $copyright = 'Michael Natterer';
    $date = '2004';
    $since = '2.2';
}

sub brush_arg () {{
    name => 'name',
    type => 'string',
    desc => 'The brush name'
}}

sub spacing_arg () {{
    name => 'spacing',
    type => '0 <= int32 <= 1000',
    desc => 'The brush spacing: %%desc%%'
}}


# The defs

sub brush_new {
    $blurb = "Creates a new brush";
    $help  = "This procedure creates a new, uninitialized brush";

    &mitch_misc;

    @inargs = (
	{ name => 'name', type => 'string',
	  desc => 'The requested name of the new brush' }
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => 'The actual new brush name',
	  alias => 'g_strdup (GIMP_OBJECT (data)->name)', no_declare => 1 },
    );

    %invoke = (
        vars => [ 'GimpData *data = NULL'],
        code => <<'CODE'
{
  if (strlen (name))
    data = gimp_data_factory_data_new (gimp->brush_factory, name);

  success = (data != NULL);
}
CODE
    );
}

sub brush_duplicate {
    $blurb = "Duplicates a brush";
    $help  = "This procedure creates an identical brush by a different name";

    &mitch_misc;

    @inargs = (
        &brush_arg
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => "The name of the brush's copy",
	  alias => 'g_strdup (GIMP_OBJECT (brush_copy)->name)',
          no_declare => 1 }
    );

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL',
                  'GimpBrush *brush_copy = NULL' ],
        code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  if (brush)
    {
      brush_copy = (GimpBrush *)
        gimp_data_factory_data_duplicate (gimp->brush_factory,
                                          GIMP_DATA (brush));

      success = (brush_copy != NULL);
    }
  else
    success = FALSE;
}
CODE
    );
}

sub brush_rename {
    $blurb = "Rename a brush";
    $help  = "This procedure renames a brush";

    &mitch_misc;

    @inargs = (
        &brush_arg,
        { name => 'new_name', type => 'string',
          desc => "The new name of the brush" }
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => "The actual new name of the brush",
	  alias => 'g_strdup (GIMP_OBJECT (brush)->name)', no_declare => 1 },
    );

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  if (brush && GIMP_DATA (brush)->writable)
    gimp_object_set_name (GIMP_OBJECT (brush), new_name);
  else
    success = FALSE;
}
CODE
    );
}

sub brush_delete {
    $blurb = "Deletes a brush";
    $help  = "This procedure deletes a brush";

    &mitch_misc;

    @inargs = (
        &brush_arg
    );

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  if (brush && GIMP_DATA (brush)->deletable)
    {
      GError *error = NULL;

      success = gimp_data_factory_data_delete (gimp->brush_factory,
                                               GIMP_DATA (brush),
                                               TRUE, &error);

      if (! success)
        {
          g_message (error->message);
          g_clear_error (&error);
        }
    }
  else
    success = FALSE;
}
CODE
    );
}

sub brush_get_info {
    $blurb = "Retrieve information about the specified brush.";
    $help = <<'HELP';
This procedure retrieves information about the specified brush. This
includes the brush name, and the brush extents (width and height).
HELP

    &mitch_misc;

    @inargs = (
        &brush_arg
    );

    @outargs = (
	{ name => 'width', type => 'int32', no_declare => '1',
          alias => 'brush->mask->width', void_ret => '1',
          desc => "The brush width" },
	{ name => 'height', type => 'int32', no_declare => '1',
          alias => 'brush->mask->height',
          desc => "The brush height" },
	{ name => 'mask_bpp', type => 'int32', no_declare => '1',
          alias => 'brush->mask->bytes',
          desc => "The brush mask bpp" },
	{ name => 'color_bpp', type => 'int32', no_declare => '1',
          alias => 'brush->pixmap ? brush->pixmap->bytes : 0',
          desc => "The brush color bpp" }
    );

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  success = (brush != NULL);
}
CODE
    );
}

sub brush_get_pixels {
    $blurb = <<'BLURB';
Retrieve information about the specified brush.
BLURB

    $help = <<'HELP';
This procedure retrieves information about the specified brush. This
includes the brush extents (width and height) and its pixels data.
HELP

    &mitch_misc;

    @inargs = (
        &brush_arg
    );

    @outargs = (
	{ name => 'width', type => 'int32', no_declare => '1',
          alias => 'brush->mask->width', void_ret => '1',
          desc => "The brush width" },
	{ name => 'height', type => 'int32', no_declare => '1',
          alias => 'brush->mask->height',
          desc => "The brush height" },
	{ name => 'mask_bpp', type => 'int32', init => '1',
          desc => "The brush mask bpp" },
        { name => 'mask_bytes', type => 'int8array', init => '1',
	  desc => 'The brush mask data',
          array => { init => '1',
                     desc => 'Length of brush mask data' } },
	{ name => 'color_bpp', type => 'int32', init => '1',
          desc => "The brush color bpp" },
        { name => 'color_bytes', type => 'int8array', init => '1',
	  desc => 'The brush color data',
          array => { init => '1',
                     desc => 'Length of brush color data' } }
    );

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  if (brush)
    {
      mask_bpp       = brush->mask->bytes;
      num_mask_bytes = brush->mask->height * brush->mask->width;
      mask_bytes     = g_memdup (temp_buf_data (brush->mask), num_mask_bytes);

      if (brush->pixmap)
        {
          color_bpp       = brush->pixmap->bytes;
          num_color_bytes = brush->pixmap->height * brush->pixmap->width;
          color_bytes     = g_memdup (temp_buf_data (brush->pixmap),
                                      num_color_bytes);
        }
    }
  else
    success = FALSE;
}
CODE
    );
}

sub brush_get_spacing {
    $blurb = 'Get the brush spacing.';

    $help = <<'HELP';
This procedure returns the spacing setting for the specified brush.
The return value is an integer between 0 and 1000 which represents
percentage of the maximum of the width and height of the mask.
HELP

    &mitch_misc;

    @inargs = (
        &brush_arg
    );

    @outargs = (
        &spacing_arg
    );
    $outargs[0]->{alias} = 'gimp_brush_get_spacing (brush)';
    $outargs[0]->{no_declare} = 1;
    $outargs[0]->{void_ret} = 1;

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  success = (brush != NULL);
}
CODE
    );
}

sub brush_set_spacing {
    $blurb = 'Set the brush spacing.';

    $help = <<'HELP';
This procedure modifies the spacing setting for the specified brush.
The value should be a integer between 0 and 1000.
HELP

    &mitch_misc;

    @inargs = (
        &brush_arg,
        &spacing_arg
    );

    %invoke = (
	vars => [ 'GimpBrush *brush = NULL' ],
	code => <<'CODE'
{
  brush = (GimpBrush *)
    gimp_container_get_child_by_name (gimp->brush_factory->container, name);

  if (brush && GIMP_DATA (brush)->writable)
    gimp_brush_set_spacing (brush, spacing);
  else
    success = FALSE;
}
CODE
    );
}


@headers = qw(<string.h> "base/temp-buf.h"
              "core/gimp.h" "core/gimplist.h" "core/gimpbrush.h"
              "core/gimpcontext.h" "core/gimpdatafactory.h");

@procs = qw(brush_new brush_duplicate brush_rename brush_delete
            brush_get_info brush_get_pixels
            brush_get_spacing brush_set_spacing);
%exports = (app => [@procs], lib => [@procs]);

$desc = 'Brush';

1;
