<MACRO>
<NAME>GIMP_TYPE_CHAIN_BUTTON</NAME>
#define GIMP_TYPE_CHAIN_BUTTON            (gimp_chain_button_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_CHAIN_BUTTON</NAME>
#define GIMP_CHAIN_BUTTON(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_CHAIN_BUTTON, GimpChainButton))
</MACRO>
<MACRO>
<NAME>GIMP_CHAIN_BUTTON_CLASS</NAME>
#define GIMP_CHAIN_BUTTON_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_CHAIN_BUTTON, GimpChainButtonClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_CHAIN_BUTTON</NAME>
#define GIMP_IS_CHAIN_BUTTON(obj)         (GTK_CHECK_TYPE ((obj), GIMP_TYPE_CHAIN_BUTTON))
</MACRO>
<MACRO>
<NAME>GIMP_IS_CHAIN_BUTTON_CLASS</NAME>
#define GIMP_IS_CHAIN_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_CHAIN_BUTTON))
</MACRO>
<STRUCT>
<NAME>GimpChainButton</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpChainButtonClass</NAME>
</STRUCT>
<ENUM>
<NAME>GimpChainPosition</NAME>
typedef enum
{
  GIMP_CHAIN_TOP,
  GIMP_CHAIN_LEFT,
  GIMP_CHAIN_BOTTOM,
  GIMP_CHAIN_RIGHT
} GimpChainPosition;
</ENUM>
<STRUCT>
<NAME>GimpChainButton</NAME>
struct GimpChainButton
{
  GtkTable           table;

  GimpChainPosition  position;
  GtkWidget         *button;
  GtkWidget         *line1;
  GtkWidget         *line2;
  GtkWidget         *pixmap;
  GdkPixmap         *broken;
  GdkBitmap         *broken_mask;
  GdkPixmap         *chain;
  GdkBitmap         *chain_mask;
  gboolean           active;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_chain_button_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_chain_button_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GimpChainPosition  position
</FUNCTION>
<FUNCTION>
<NAME>gimp_chain_button_set_active</NAME>
<RETURNS>void  </RETURNS>
GimpChainButton   *gcb,gboolean           is_active
</FUNCTION>
<FUNCTION>
<NAME>gimp_chain_button_get_active</NAME>
<RETURNS>gboolean  </RETURNS>
GimpChainButton   *gcb
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_COLOR_AREA</NAME>
#define GIMP_TYPE_COLOR_AREA            (gimp_color_area_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_COLOR_AREA</NAME>
#define GIMP_COLOR_AREA(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_COLOR_AREA, GimpColorArea))
</MACRO>
<MACRO>
<NAME>GIMP_COLOR_AREA_CLASS</NAME>
#define GIMP_COLOR_AREA_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_COLOR_AREA, GimpColorAreaClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_COLOR_AREA</NAME>
#define GIMP_IS_COLOR_AREA(obj)         (GTK_CHECK_TYPE ((obj), GIMP_TYPE_COLOR_AREA))
</MACRO>
<MACRO>
<NAME>GIMP_IS_COLOR_AREA_CLASS</NAME>
#define GIMP_IS_COLOR_AREA_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_COLOR_AREA))
</MACRO>
<ENUM>
<NAME>GimpColorAreaType</NAME>
typedef enum
{
  GIMP_COLOR_AREA_FLAT = 0,
  GIMP_COLOR_AREA_SMALL_CHECKS,
  GIMP_COLOR_AREA_LARGE_CHECKS
} GimpColorAreaType;
</ENUM>
<STRUCT>
<NAME>GimpColorAreaClass</NAME>
</STRUCT>
<FUNCTION>
<NAME>gimp_color_area_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_area_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const GimpRGB     *color,GimpColorAreaType  type,GdkModifierType    drag_mask
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_area_set_color</NAME>
<RETURNS>void  </RETURNS>
GimpColorArea     *gca,const GimpRGB     *color
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_area_get_color</NAME>
<RETURNS>void  </RETURNS>
GimpColorArea     *gca,GimpRGB           *color
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_area_has_alpha</NAME>
<RETURNS>gboolean  </RETURNS>
GimpColorArea     *gca
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_area_set_type</NAME>
<RETURNS>void  </RETURNS>
GimpColorArea     *gca,GimpColorAreaType  type
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_COLOR_BUTTON</NAME>
#define GIMP_TYPE_COLOR_BUTTON            (gimp_color_button_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_COLOR_BUTTON</NAME>
#define GIMP_COLOR_BUTTON(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_COLOR_BUTTON, GimpColorButton))
</MACRO>
<MACRO>
<NAME>GIMP_COLOR_BUTTON_CLASS</NAME>
#define GIMP_COLOR_BUTTON_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_COLOR_BUTTON, GimpColorButtonClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_COLOR_BUTTON</NAME>
#define GIMP_IS_COLOR_BUTTON(obj)         (GTK_CHECK_TYPE ((obj), GIMP_TYPE_COLOR_BUTTON))
</MACRO>
<MACRO>
<NAME>GIMP_IS_COLOR_BUTTON_CLASS</NAME>
#define GIMP_IS_COLOR_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_COLOR_BUTTON))
</MACRO>
<STRUCT>
<NAME>GimpColorButtonClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpColorButton</NAME>
struct GimpColorButton
{
  GtkButton       button;

  gchar          *title;

  GtkWidget      *color_area;
  GtkWidget      *dialog;
  GtkItemFactory *item_factory;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_color_button_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_button_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar       *title,gint               width,gint               height,const GimpRGB     *color,GimpColorAreaType  type
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_button_set_color</NAME>
<RETURNS>void  </RETURNS>
GimpColorButton   *gcb,const GimpRGB     *color
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_button_get_color</NAME>
<RETURNS>void  </RETURNS>
GimpColorButton   *gcb,GimpRGB           *color
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_button_has_alpha</NAME>
<RETURNS>gboolean  </RETURNS>
GimpColorButton   *gcb
</FUNCTION>
<FUNCTION>
<NAME>gimp_color_button_set_type</NAME>
<RETURNS>void  </RETURNS>
GimpColorButton   *gcb,GimpColorAreaType  alpha
</FUNCTION>
<FUNCTION>
<NAME>gimp_dialog_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar        *title,const gchar        *wmclass_name,GimpHelpFunc        help_func,const gchar        *help_data,GtkWindowPosition   position,gint                allow_shrink,gint                allow_grow,gint                auto_shrink,...
</FUNCTION>
<FUNCTION>
<NAME>gimp_dialog_newv</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar        *title,const gchar        *wmclass_name,GimpHelpFunc        help_func,const gchar        *help_data,GtkWindowPosition   position,gint                allow_shrink,gint                allow_grow,gint                auto_shrink,va_list             args
</FUNCTION>
<FUNCTION>
<NAME>gimp_dialog_set_icon</NAME>
<RETURNS>void  </RETURNS>
GtkWindow          *dialog
</FUNCTION>
<FUNCTION>
<NAME>gimp_dialog_create_action_area</NAME>
<RETURNS>void  </RETURNS>
GtkDialog          *dialog,...
</FUNCTION>
<FUNCTION>
<NAME>gimp_dialog_create_action_areav</NAME>
<RETURNS>void  </RETURNS>
GtkDialog          *dialog,va_list             args
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_FILE_SELECTION</NAME>
#define GIMP_TYPE_FILE_SELECTION            (gimp_file_selection_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_FILE_SELECTION</NAME>
#define GIMP_FILE_SELECTION(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_FILE_SELECTION, GimpFileSelection))
</MACRO>
<MACRO>
<NAME>GIMP_FILE_SELECTION_CLASS</NAME>
#define GIMP_FILE_SELECTION_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_FILE_SELECTION, GimpFileSelectionClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_FILE_SELECTION</NAME>
#define GIMP_IS_FILE_SELECTION(obj)         (GTK_CHECK_TYPE (obj, GIMP_TYPE_FILE_SELECTION))
</MACRO>
<MACRO>
<NAME>GIMP_IS_FILE_SELECTION_CLASS</NAME>
#define GIMP_IS_FILE_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_FILE_SELECTION))
</MACRO>
<STRUCT>
<NAME>GimpFileSelection</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpFileSelectionClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpFileSelection</NAME>
struct GimpFileSelection
{
  GtkHBox    hbox;

  GtkWidget *file_exists;
  GtkWidget *entry;
  GtkWidget *browse_button;

  GtkWidget *file_selection;

  GdkPixmap *yes_pixmap;
  GdkBitmap *yes_mask;
  GdkPixmap *no_pixmap;
  GdkBitmap *no_mask;

  gchar     *title;
  gboolean   dir_only;
  gboolean   check_valid;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_file_selection_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_file_selection_new</NAME>
<RETURNS>GtkWidget *</RETURNS>
const gchar        *title,const gchar        *filename,gboolean            dir_only,gboolean            check_valid
</FUNCTION>
<FUNCTION>
<NAME>gimp_file_selection_get_filename</NAME>
<RETURNS>gchar *</RETURNS>
GimpFileSelection *gfs
</FUNCTION>
<FUNCTION>
<NAME>gimp_file_selection_set_filename</NAME>
<RETURNS>void  </RETURNS>
GimpFileSelection *gfs,const gchar       *filename
</FUNCTION>
<FUNCTION>
<NAME>gimp_help_init</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_help_free</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_help_enable_tooltips</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_help_disable_tooltips</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_standard_help_func</NAME>
<RETURNS>void  </RETURNS>
const gchar  *help_data
</FUNCTION>
<FUNCTION>
<NAME>gimp_help_connect_help_accel</NAME>
<RETURNS>void  </RETURNS>
GtkWidget    *widget,GimpHelpFunc  help_func,const gchar  *help_data
</FUNCTION>
<FUNCTION>
<NAME>gimp_help_set_help_data</NAME>
<RETURNS>void  </RETURNS>
GtkWidget    *widget,const gchar  *tooltip,const gchar  *help_data
</FUNCTION>
<FUNCTION>
<NAME>gimp_context_help</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_PATH_EDITOR</NAME>
#define GIMP_TYPE_PATH_EDITOR            (gimp_path_editor_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_PATH_EDITOR</NAME>
#define GIMP_PATH_EDITOR(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_PATH_EDITOR, GimpPathEditor))
</MACRO>
<MACRO>
<NAME>GIMP_PATH_EDITOR_CLASS</NAME>
#define GIMP_PATH_EDITOR_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_PATH_EDITOR, GimpPathEditorClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_PATH_EDITOR</NAME>
#define GIMP_IS_PATH_EDITOR(obj)         (GTK_CHECK_TYPE (obj, GIMP_TYPE_PATH_EDITOR))
</MACRO>
<MACRO>
<NAME>GIMP_IS_PATH_EDITOR_CLASS</NAME>
#define GIMP_IS_PATH_EDITOR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_PATH_EDITOR))
</MACRO>
<STRUCT>
<NAME>GimpPathEditorClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpPathEditor</NAME>
struct GimpPathEditor
{
  GtkVBox    vbox;

  GtkWidget *upper_hbox;

  GtkWidget *new_button;
  GtkWidget *up_button;
  GtkWidget *down_button;
  GtkWidget *delete_button;

  GtkWidget *file_selection;

  GtkWidget *dir_list;

  GtkWidget *selected_item;
  gint       number_of_items;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_path_editor_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_path_editor_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar    *filesel_title,const gchar    *path
</FUNCTION>
<FUNCTION>
<NAME>gimp_path_editor_get_path</NAME>
<RETURNS>gchar      *</RETURNS>
GimpPathEditor *gpe
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_PIXMAP</NAME>
#define GIMP_TYPE_PIXMAP            (gimp_pixmap_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_PIXMAP</NAME>
#define GIMP_PIXMAP(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_PIXMAP, GimpPixmap))
</MACRO>
<MACRO>
<NAME>GIMP_PIXMAP_CLASS</NAME>
#define GIMP_PIXMAP_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_PIXMAP, GimpPixmapClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_PIXMAP</NAME>
#define GIMP_IS_PIXMAP(obj)         (GTK_CHECK_TYPE ((obj), GIMP_TYPE_PIXMAP))
</MACRO>
<MACRO>
<NAME>GIMP_IS_PIXMAP_CLASS</NAME>
#define GIMP_IS_PIXMAP_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_PIXMAP))
</MACRO>
<STRUCT>
<NAME>GimpPixmap</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpPixmapClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpPixmap</NAME>
struct GimpPixmap
{
  GtkPixmap   pixmap;

  gchar **xpm_data;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_pixmap_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_pixmap_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gchar      **xpm_data
</FUNCTION>
<FUNCTION>
<NAME>gimp_pixmap_set</NAME>
<RETURNS>void  </RETURNS>
GimpPixmap  *pixmap,gchar      **xpm_data
</FUNCTION>
<USER_FUNCTION>
<NAME>GimpQueryStringCallback</NAME>
<RETURNS>void </RETURNS>
GtkWidget *query_box,
					   gchar     *string,
					   gpointer   data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GimpQueryIntCallback</NAME>
<RETURNS>void </RETURNS>
GtkWidget *query_box,
					   gint       value,
					   gpointer   data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GimpQueryDoubleCallback</NAME>
<RETURNS>void </RETURNS>
GtkWidget *query_box,
					   gdouble    value,
					   gpointer   data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GimpQuerySizeCallback</NAME>
<RETURNS>void </RETURNS>
GtkWidget *query_box,
					   gdouble    size,
					   GimpUnit   unit,
					   gpointer   data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GimpQueryBooleanCallback</NAME>
<RETURNS>void </RETURNS>
GtkWidget *query_box,
					   gboolean   value,
					   gpointer   data
</USER_FUNCTION>
<FUNCTION>
<NAME>gimp_query_string_box</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar              *title,GimpHelpFunc              help_func,const gchar              *help_data,const gchar              *message,const gchar              *initial,GtkObject                *object,const gchar              *signal,GimpQueryStringCallback   callback,gpointer                  data
</FUNCTION>
<FUNCTION>
<NAME>gimp_query_int_box</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar              *title,GimpHelpFunc              help_func,const gchar              *help_data,const gchar              *message,gint                      initial,gint                      lower,gint                      upper,GtkObject                *object,const gchar              *signal,GimpQueryIntCallback      callback,gpointer                  data
</FUNCTION>
<FUNCTION>
<NAME>gimp_query_double_box</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar              *title,GimpHelpFunc              help_func,const gchar              *help_data,const gchar              *message,gdouble                   initial,gdouble                   lower,gdouble                   upper,gint                      digits,GtkObject                *object,const gchar              *signal,GimpQueryDoubleCallback   callback,gpointer                  data
</FUNCTION>
<FUNCTION>
<NAME>gimp_query_size_box</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar              *title,GimpHelpFunc              help_func,const gchar              *help_data,const gchar              *message,gdouble                   initial,gdouble                   lower,gdouble                   upper,gint                      digits,GimpUnit                  unit,gdouble                   resolution,gboolean                  dot_for_dot,GtkObject                *object,const gchar              *signal,GimpQuerySizeCallback     callback,gpointer                  data
</FUNCTION>
<FUNCTION>
<NAME>gimp_query_boolean_box</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar              *title,GimpHelpFunc              help_func,const gchar              *help_data,gboolean                  eek,const gchar              *message,const gchar              *true_button,const gchar              *false_button,GtkObject                *object,const gchar              *signal,GimpQueryBooleanCallback  callback,gpointer                  data
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_SIZE_ENTRY</NAME>
#define GIMP_TYPE_SIZE_ENTRY            (gimp_size_entry_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_SIZE_ENTRY</NAME>
#define GIMP_SIZE_ENTRY(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_SIZE_ENTRY, GimpSizeEntry))
</MACRO>
<MACRO>
<NAME>GIMP_SIZE_ENTRY_CLASS</NAME>
#define GIMP_SIZE_ENTRY_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_SIZE_ENTRY, GimpSizeEntryClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_SIZE_ENTRY</NAME>
#define GIMP_IS_SIZE_ENTRY(obj)         (GTK_CHECK_TYPE (obj, GIMP_TYPE_SIZE_ENTRY))
</MACRO>
<MACRO>
<NAME>GIMP_IS_SIZE_ENTRY_CLASS</NAME>
#define GIMP_IS_SIZE_ENTRY_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_SIZE_ENTRY))
</MACRO>
<STRUCT>
<NAME>GimpSizeEntryClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpSizeEntryField</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpSizeEntry</NAME>
struct GimpSizeEntry
{
  GtkTable   table;

  GSList    *fields;
  gint       number_of_fields;

  GtkWidget *unitmenu;
  GimpUnit   unit;
  gboolean   menu_show_pixels;
  gboolean   menu_show_percent;

  gboolean                   show_refval;
  GimpSizeEntryUpdatePolicy  update_policy;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_size_entry_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gint                       number_of_fields,GimpUnit                   unit,const gchar               *unit_format,gboolean                   menu_show_pixels,gboolean                   menu_show_percent,gboolean                   show_refval,gint                       spinbutton_usize,GimpSizeEntryUpdatePolicy  update_policy
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_add_field</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry   *gse,GtkSpinButton   *value_spinbutton,GtkSpinButton   *refval_spinbutton
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_attach_label</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,const gchar   *text,gint           row,gint           column,gfloat         alignment
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_resolution</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gdouble        resolution,gboolean       keep_size
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_size</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gdouble        lower,gdouble        upper
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_value_boundaries</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gdouble        lower,gdouble        upper
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_get_value</NAME>
<RETURNS>gdouble  </RETURNS>
GimpSizeEntry *gse,gint           field
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_value</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gdouble        value
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_refval_boundaries</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gdouble        lower,gdouble        upper
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_refval_digits</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gint           digits
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_get_refval</NAME>
<RETURNS>gdouble  </RETURNS>
GimpSizeEntry *gse,gint           field
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_refval</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,gint           field,gdouble        refval
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_get_unit</NAME>
<RETURNS>GimpUnit  </RETURNS>
GimpSizeEntry *gse
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_set_unit</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse,GimpUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gimp_size_entry_grab_focus</NAME>
<RETURNS>void  </RETURNS>
GimpSizeEntry *gse
</FUNCTION>
<MACRO>
<NAME>GIMP_TYPE_UNIT_MENU</NAME>
#define GIMP_TYPE_UNIT_MENU            (gimp_unit_menu_get_type ())
</MACRO>
<MACRO>
<NAME>GIMP_UNIT_MENU</NAME>
#define GIMP_UNIT_MENU(obj)            (GTK_CHECK_CAST ((obj), GIMP_TYPE_UNIT_MENU, GimpUnitMenu))
</MACRO>
<MACRO>
<NAME>GIMP_UNIT_MENU_CLASS</NAME>
#define GIMP_UNIT_MENU_CLASS(klass)    (GTK_CHECK_CLASS_CAST ((klass), GIMP_TYPE_UNIT_MENU, GimpUnitMenuClass))
</MACRO>
<MACRO>
<NAME>GIMP_IS_UNIT_MENU</NAME>
#define GIMP_IS_UNIT_MENU(obj)         (GTK_CHECK_TYPE (obj, GIMP_TYPE_UNIT_MENU))
</MACRO>
<MACRO>
<NAME>GIMP_IS_UNIT_MENU_CLASS</NAME>
#define GIMP_IS_UNIT_MENU_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_UNIT_MENU))
</MACRO>
<STRUCT>
<NAME>GimpUnitMenuClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpUnitMenu</NAME>
struct GimpUnitMenu
{
  GtkOptionMenu  optionmenu;

  /* public (read only) */
  gchar         *format;
  GimpUnit       unit;

  gboolean       show_pixels;
  gboolean       show_percent;

  /* private */
  GtkWidget     *selection;
  GtkWidget     *clist;
};
</STRUCT>
<FUNCTION>
<NAME>gimp_unit_menu_get_type</NAME>
<RETURNS>GtkType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gimp_unit_menu_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar *format,GimpUnit     unit,gboolean     show_pixels,gboolean     show_percent,gboolean     show_custom
</FUNCTION>
<FUNCTION>
<NAME>gimp_unit_menu_set_unit</NAME>
<RETURNS>void  </RETURNS>
GimpUnitMenu *gum,GimpUnit      unit
</FUNCTION>
<FUNCTION>
<NAME>gimp_unit_menu_get_unit</NAME>
<RETURNS>GimpUnit  </RETURNS>
GimpUnitMenu *gum
</FUNCTION>
<FUNCTION>
<NAME>gimp_option_menu_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gboolean            menu_only,...
</FUNCTION>
<FUNCTION>
<NAME>gimp_option_menu_new2</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gboolean            menu_only,GtkSignalFunc       menu_item_callback,gpointer            data,gpointer            initial,...
</FUNCTION>
<FUNCTION>
<NAME>gimp_option_menu_set_history</NAME>
<RETURNS>void  </RETURNS>
GtkOptionMenu      *option_menu,gpointer            user_data
</FUNCTION>
<FUNCTION>
<NAME>gimp_radio_group_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gboolean            in_frame,const gchar        *frame_title,...
</FUNCTION>
<FUNCTION>
<NAME>gimp_radio_group_new2</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gboolean            in_frame,const gchar        *frame_title,GtkSignalFunc       radio_button_callback,gpointer            data,gpointer            initial,...
</FUNCTION>
<FUNCTION>
<NAME>gimp_spin_button_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkObject         **adjustment,gfloat              value,gfloat              lower,gfloat              upper,gfloat              step_increment,gfloat              page_increment,gfloat              page_size,gfloat              climb_rate,guint               digits
</FUNCTION>
<MACRO>
<NAME>GIMP_SCALE_ENTRY_LABEL</NAME>
#define GIMP_SCALE_ENTRY_LABEL(adj) \
        GTK_LABEL (gtk_object_get_data (GTK_OBJECT(adj), "label"))
</MACRO>
<MACRO>
<NAME>GIMP_SCALE_ENTRY_SCALE</NAME>
#define GIMP_SCALE_ENTRY_SCALE(adj) \
        GTK_HSCALE (gtk_object_get_data (GTK_OBJECT(adj), "scale"))
</MACRO>
<MACRO>
<NAME>GIMP_SCALE_ENTRY_SCALE_ADJ</NAME>
#define GIMP_SCALE_ENTRY_SCALE_ADJ(adj) \
        gtk_range_get_adjustment \
        (GTK_RANGE (gtk_object_get_data (GTK_OBJECT (adj), "scale")))
</MACRO>
<MACRO>
<NAME>GIMP_SCALE_ENTRY_SPINBUTTON</NAME>
#define GIMP_SCALE_ENTRY_SPINBUTTON(adj) \
        GTK_SPIN_BUTTON (gtk_object_get_data (GTK_OBJECT (adj), "spinbutton"))
</MACRO>
<MACRO>
<NAME>GIMP_SCALE_ENTRY_SPINBUTTON_ADJ</NAME>
#define GIMP_SCALE_ENTRY_SPINBUTTON_ADJ(adj) \
        gtk_spin_button_get_adjustment \
        (GTK_SPIN_BUTTON (gtk_object_get_data (GTK_OBJECT (adj), "spinbutton")))
</MACRO>
<FUNCTION>
<NAME>gimp_scale_entry_new</NAME>
<RETURNS>GtkObject  *</RETURNS>
GtkTable           *table,gint                column,gint                row,const gchar        *text,gint                scale_usize,gint                spinbutton_usize,gfloat              value,gfloat              lower,gfloat              upper,gfloat              step_increment,gfloat              page_increment,guint               digits,gboolean            constrain,gfloat              unconstrained_lower,gfloat              unconstrained_upper,const gchar        *tooltip,const gchar        *help_data
</FUNCTION>
<MACRO>
<NAME>GIMP_RANDOM_SEED_SPINBUTTON</NAME>
#define GIMP_RANDOM_SEED_SPINBUTTON(hbox) \
        GTK_SPIN_BUTTON (gtk_object_get_data (GTK_OBJECT( hbox), "spinbutton"))
</MACRO>
<MACRO>
<NAME>GIMP_RANDOM_SEED_SPINBUTTON_ADJ</NAME>
#define GIMP_RANDOM_SEED_SPINBUTTON_ADJ(hbox) \
        gtk_spin_button_get_adjustment \
        (GTK_SPIN_BUTTON (gtk_object_get_data (GTK_OBJECT (hbox), "spinbutton")))
</MACRO>
<MACRO>
<NAME>GIMP_RANDOM_SEED_TOGGLEBUTTON</NAME>
#define GIMP_RANDOM_SEED_TOGGLEBUTTON(hbox) \
        GTK_TOGGLE_BUTTON (gtk_object_get_data (GTK_OBJECT (hbox), \
                                                "togglebutton"))
</MACRO>
<FUNCTION>
<NAME>gimp_random_seed_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gint               *seed,gint               *use_time,gint                time_true,gint                time_false
</FUNCTION>
<MACRO>
<NAME>GIMP_COORDINATES_CHAINBUTTON</NAME>
#define GIMP_COORDINATES_CHAINBUTTON(sizeentry) \
        GIMP_CHAIN_BUTTON (gtk_object_get_data (GTK_OBJECT (sizeentry), \
                                                "chainbutton"))
</MACRO>
<FUNCTION>
<NAME>gimp_coordinates_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GimpUnit            unit,const gchar        *unit_format,gboolean            menu_show_pixels,gboolean            menu_show_percent,gint                spinbutton_usize,GimpSizeEntryUpdatePolicy  update_policy,gboolean            chainbutton_active,gboolean            chain_constrains_ratio,const gchar        *xlabel,gdouble             x,gdouble             xres,gdouble             lower_boundary_x,gdouble             upper_boundary_x,gdouble             xsize_0,gdouble             xsize_100,const gchar        *ylabel,gdouble             y,gdouble             yres,gdouble             lower_boundary_y,gdouble             upper_boundary_y,gdouble             ysize_0,gdouble             ysize_100
</FUNCTION>
<MACRO>
<NAME>GIMP_MEM_SIZE_ENTRY_SPINBUTTON</NAME>
#define GIMP_MEM_SIZE_ENTRY_SPINBUTTON(memsize) \
        GTK_SPIN_BUTTON (gtk_object_get_data (GTK_OBJECT (memsize), \
                                              "spinbutton"))
</MACRO>
<MACRO>
<NAME>GIMP_MEM_SIZE_ENTRY_SPINBUTTON_ADJ</NAME>
#define GIMP_MEM_SIZE_ENTRY_SPINBUTTON_ADJ(memsize) \
        gtk_spin_button_get_adjustment \
        (GTK_SPIN_BUTTON (gtk_object_get_data (GTK_OBJECT (memsize), \
                                               "spinbutton")))
</MACRO>
<MACRO>
<NAME>GIMP_MEM_SIZE_ENTRY_OPTIONMENU</NAME>
#define GIMP_MEM_SIZE_ENTRY_OPTIONMENU(memsize) \
        GTK_OPTION_MENU (gtk_object_get_data (GTK_OBJECT (memsize), \
                                              "optionmenu"))
</MACRO>
<FUNCTION>
<NAME>gimp_mem_size_entry_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkAdjustment      *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gimp_pixmap_button_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gchar             **xpm_data,const gchar        *text
</FUNCTION>
<FUNCTION>
<NAME>gimp_toggle_button_sensitive_update</NAME>
<RETURNS>void  </RETURNS>
GtkToggleButton *toggle_button
</FUNCTION>
<FUNCTION>
<NAME>gimp_toggle_button_update</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_radio_button_update</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_menu_item_update</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_int_adjustment_update</NAME>
<RETURNS>void  </RETURNS>
GtkAdjustment   *adjustment,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_uint_adjustment_update</NAME>
<RETURNS>void  </RETURNS>
GtkAdjustment   *adjustment,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_float_adjustment_update</NAME>
<RETURNS>void  </RETURNS>
GtkAdjustment   *adjustment,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_double_adjustment_update</NAME>
<RETURNS>void  </RETURNS>
GtkAdjustment   *adjustment,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_unit_menu_update</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget,gpointer         data
</FUNCTION>
<FUNCTION>
<NAME>gimp_table_attach_aligned</NAME>
<RETURNS>void  </RETURNS>
GtkTable           *table,gint                column,gint                row,const gchar        *label_text,gfloat              xalign,gfloat              yalign,GtkWidget          *widget,gint                colspan,gboolean            left_align
</FUNCTION>
<ENUM>
<NAME>GimpSizeEntryUpdatePolicy</NAME>
typedef enum
{
  GIMP_SIZE_ENTRY_UPDATE_NONE       = 0,
  GIMP_SIZE_ENTRY_UPDATE_SIZE       = 1,
  GIMP_SIZE_ENTRY_UPDATE_RESOLUTION = 2
} GimpSizeEntryUpdatePolicy;
</ENUM>
<STRUCT>
<NAME>GimpColorArea</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpColorButton</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpPathEditor</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpSizeEntry</NAME>
</STRUCT>
<STRUCT>
<NAME>GimpUnitMenu</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GimpHelpFunc</NAME>
<RETURNS>void </RETURNS>
const gchar *help_data
</USER_FUNCTION>
