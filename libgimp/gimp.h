begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* LIBGIMP - The GIMP Library  * Copyright (C) 1995-1997 Peter Mattis and Spencer Kimball  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public  * License as published by the Free Software Foundation; either  * version 2 of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the  * Free Software Foundation, Inc., 59 Temple Place - Suite 330,  * Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GIMP_H__
end_ifndef

begin_define
DECL|macro|__GIMP_H__
define|#
directive|define
name|__GIMP_H__
end_define

begin_include
include|#
directive|include
file|<glib.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpenums.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimptypes.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpcolorspace.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpfeatures.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpenv.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimplimits.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpmath.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpparasite.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimppixelrgn.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimptile.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpunit.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimputils.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpvector.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpchannel_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpdisplay_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpdrawable_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpgradient_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimphelp_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpimage_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimplayer_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimppalette_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpparasite_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpselection_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpunit_pdb.h>
end_include

begin_include
include|#
directive|include
file|<libgimp/gimpcompat.h>
end_include

begin_comment
comment|/* to be removed in 1.3 */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|G_OS_WIN32
end_ifdef

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_comment
comment|/* For _-argc and __argv */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|LIBGIMP_COMPILATION
end_ifdef

begin_define
DECL|macro|GIMPVAR
define|#
directive|define
name|GIMPVAR
value|__declspec(dllexport)
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !LIBGIMP_COMPILATION */
end_comment

begin_define
DECL|macro|GIMPVAR
define|#
directive|define
name|GIMPVAR
value|extern __declspec(dllimport)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !LIBGIMP_COMPILATION */
end_comment

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !G_OS_WIN32 */
end_comment

begin_define
DECL|macro|GIMPVAR
define|#
directive|define
name|GIMPVAR
value|extern
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
DECL|variable|gimp_major_version
name|GIMPVAR
name|guint
name|gimp_major_version
decl_stmt|;
DECL|variable|gimp_minor_version
name|GIMPVAR
name|guint
name|gimp_minor_version
decl_stmt|;
DECL|variable|gimp_micro_version
name|GIMPVAR
name|guint
name|gimp_micro_version
decl_stmt|;
DECL|variable|_readchannel
name|GIMPVAR
name|GIOChannel
modifier|*
name|_readchannel
decl_stmt|;
DECL|typedef|GimpInitProc
typedef|typedef
name|void
function_decl|(
modifier|*
name|GimpInitProc
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|typedef|GimpQuitProc
typedef|typedef
name|void
function_decl|(
modifier|*
name|GimpQuitProc
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|typedef|GimpQueryProc
typedef|typedef
name|void
function_decl|(
modifier|*
name|GimpQueryProc
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|typedef|GimpRunProc
typedef|typedef
name|void
function_decl|(
modifier|*
name|GimpRunProc
function_decl|)
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gint
name|nparams
parameter_list|,
name|GimpParam
modifier|*
name|param
parameter_list|,
name|gint
modifier|*
name|nreturn_vals
parameter_list|,
name|GimpParam
modifier|*
modifier|*
name|return_vals
parameter_list|)
function_decl|;
DECL|struct|_GimpPlugInInfo
struct|struct
name|_GimpPlugInInfo
block|{
comment|/* called when the gimp application initially starts up */
DECL|member|init_proc
name|GimpInitProc
name|init_proc
decl_stmt|;
comment|/* called when the gimp application exits */
DECL|member|quit_proc
name|GimpQuitProc
name|quit_proc
decl_stmt|;
comment|/* called by the gimp so that the plug-in can inform the    *  gimp of what it does. (ie. installing a procedure database    *  procedure).    */
DECL|member|query_proc
name|GimpQueryProc
name|query_proc
decl_stmt|;
comment|/* called to run a procedure the plug-in installed in the    *  procedure database.    */
DECL|member|run_proc
name|GimpRunProc
name|run_proc
decl_stmt|;
block|}
struct|;
DECL|struct|_GimpParamDef
struct|struct
name|_GimpParamDef
block|{
DECL|member|type
name|GimpPDBArgType
name|type
decl_stmt|;
DECL|member|name
name|gchar
modifier|*
name|name
decl_stmt|;
DECL|member|description
name|gchar
modifier|*
name|description
decl_stmt|;
block|}
struct|;
DECL|struct|_GimpParamColor
struct|struct
name|_GimpParamColor
block|{
DECL|member|red
name|guint8
name|red
decl_stmt|;
DECL|member|green
name|guint8
name|green
decl_stmt|;
DECL|member|blue
name|guint8
name|blue
decl_stmt|;
block|}
struct|;
DECL|struct|_GimpParamRegion
struct|struct
name|_GimpParamRegion
block|{
DECL|member|x
name|gint32
name|x
decl_stmt|;
DECL|member|y
name|gint32
name|y
decl_stmt|;
DECL|member|width
name|gint32
name|width
decl_stmt|;
DECL|member|height
name|gint32
name|height
decl_stmt|;
block|}
struct|;
DECL|union|_GimpParamData
union|union
name|_GimpParamData
block|{
DECL|member|d_int32
name|gint32
name|d_int32
decl_stmt|;
DECL|member|d_int16
name|gint16
name|d_int16
decl_stmt|;
DECL|member|d_int8
name|gint8
name|d_int8
decl_stmt|;
DECL|member|d_float
name|gdouble
name|d_float
decl_stmt|;
DECL|member|d_string
name|gchar
modifier|*
name|d_string
decl_stmt|;
DECL|member|d_int32array
name|gint32
modifier|*
name|d_int32array
decl_stmt|;
DECL|member|d_int16array
name|gint16
modifier|*
name|d_int16array
decl_stmt|;
DECL|member|d_int8array
name|gint8
modifier|*
name|d_int8array
decl_stmt|;
DECL|member|d_floatarray
name|gdouble
modifier|*
name|d_floatarray
decl_stmt|;
DECL|member|d_stringarray
name|gchar
modifier|*
modifier|*
name|d_stringarray
decl_stmt|;
DECL|member|d_color
name|GimpParamColor
name|d_color
decl_stmt|;
DECL|member|d_region
name|GimpParamRegion
name|d_region
decl_stmt|;
DECL|member|d_display
name|gint32
name|d_display
decl_stmt|;
DECL|member|d_image
name|gint32
name|d_image
decl_stmt|;
DECL|member|d_layer
name|gint32
name|d_layer
decl_stmt|;
DECL|member|d_channel
name|gint32
name|d_channel
decl_stmt|;
DECL|member|d_drawable
name|gint32
name|d_drawable
decl_stmt|;
DECL|member|d_selection
name|gint32
name|d_selection
decl_stmt|;
DECL|member|d_boundary
name|gint32
name|d_boundary
decl_stmt|;
DECL|member|d_path
name|gint32
name|d_path
decl_stmt|;
DECL|member|d_parasite
name|GimpParasite
name|d_parasite
decl_stmt|;
DECL|member|d_status
name|gint32
name|d_status
decl_stmt|;
block|}
union|;
DECL|struct|_GimpParam
struct|struct
name|_GimpParam
block|{
DECL|member|type
name|GimpPDBArgType
name|type
decl_stmt|;
DECL|member|data
name|GimpParamData
name|data
decl_stmt|;
block|}
struct|;
ifdef|#
directive|ifdef
name|G_OS_WIN32
comment|/* Define WinMain() because plug-ins are built as GUI applications. Also  * define a main() in case some plug-in still is built as a console  * application.  */
ifdef|#
directive|ifdef
name|__GNUC__
ifndef|#
directive|ifndef
name|_stdcall
DECL|macro|_stdcall
define|#
directive|define
name|_stdcall
value|__attribute__((stdcall))
endif|#
directive|endif
endif|#
directive|endif
DECL|macro|MAIN ()
define|#
directive|define
name|MAIN
parameter_list|()
define|\
value|static int				\    win32_gimp_main (int argc, char **argv)	\    {					\      extern void set_gimp_PLUG_IN_INFO_PTR(GimpPlugInInfo *);	\      set_gimp_PLUG_IN_INFO_PTR(&PLUG_IN_INFO);	\      return gimp_main (argc, argv);	\    }					\ 					\    struct HINSTANCE__;			\    int _stdcall				\    WinMain (struct HINSTANCE__ *hInstance, \ 	    struct HINSTANCE__ *hPrevInstance,	\ 	    char *lpszCmdLine,		\ 	    int   nCmdShow)		\    {					\      return win32_gimp_main (__argc, __argv);	\    }					\ 					\    int					\    main (int argc, char *argv[])	\    {					\      return win32_gimp_main (argc, argv);	\    }
else|#
directive|else
ifndef|#
directive|ifndef
name|__EMX__
DECL|macro|MAIN ()
define|#
directive|define
name|MAIN
parameter_list|()
define|\
value|int					\    main (int argc, char *argv[])	\    {					\      return gimp_main (argc, argv);	\    }
else|#
directive|else
DECL|macro|MAIN ()
define|#
directive|define
name|MAIN
parameter_list|()
define|\
value|int						\    main (int argc, char *argv[])		\    {						\      set_gimp_PLUG_IN_INFO(&PLUG_IN_INFO);	\      return gimp_main (argc, argv);		\    }
endif|#
directive|endif
endif|#
directive|endif
comment|/* The main procedure that should be called with the  *  'argc' and 'argv' that are passed to "main".  */
name|gint
name|gimp_main
parameter_list|(
name|gint
name|argc
parameter_list|,
name|gchar
modifier|*
name|argv
index|[]
parameter_list|)
function_decl|;
comment|/* Forcefully causes the gimp library to exit and  *  close down its connection to main gimp application.  */
name|void
name|G_GNUC_NORETURN
name|gimp_quit
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Specify a range of data to be associated with 'id'.  *  The data will exist for as long as the main gimp  *  application is running.  */
name|void
name|gimp_set_data
parameter_list|(
name|gchar
modifier|*
name|id
parameter_list|,
name|gpointer
name|data
parameter_list|,
name|guint32
name|length
parameter_list|)
function_decl|;
comment|/* Retrieve the piece of data stored within the main  *  gimp application specified by 'id'. The data is  *  stored in the supplied buffer.  Make sure enough  *  space is allocated.  */
name|void
name|gimp_get_data
parameter_list|(
name|gchar
modifier|*
name|id
parameter_list|,
name|gpointer
name|data
parameter_list|)
function_decl|;
comment|/* Get the size in bytes of the data stored by a gimp_get_data  * id. As size of zero may indicate that there is no such  * identifier in the database.  */
name|guint32
name|gimp_get_data_size
parameter_list|(
name|gchar
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/* Initialize the progress bar with "message". If "message"  *  is NULL, the message displayed in the progress window will  *  be the name of the plug-in.  */
name|void
name|gimp_progress_init
parameter_list|(
name|gchar
modifier|*
name|message
parameter_list|)
function_decl|;
comment|/* Update the progress bar. If the progress bar has not been  *  initialized then it will be automatically initialized as if  *  "gimp_progress_init (NULL)" were called. "percentage" is a  *  value between 0 and 1.  */
name|void
name|gimp_progress_update
parameter_list|(
name|gdouble
name|percentage
parameter_list|)
function_decl|;
comment|/* Returns the default gdisplay (given at plug-in config time).  */
name|gint32
name|gimp_default_display
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Pops up a dialog box with "message". Useful for status and  * error reports. If "message" is NULL, do nothing.  */
name|void
name|gimp_message
parameter_list|(
specifier|const
name|gchar
modifier|*
name|message
parameter_list|)
function_decl|;
comment|/* Query the gimp application's procedural database.  *  The arguments are regular expressions which select  *  which procedure names will be returned in 'proc_names'.  */
name|void
name|gimp_query_database
parameter_list|(
name|gchar
modifier|*
name|name_regexp
parameter_list|,
name|gchar
modifier|*
name|blurb_regexp
parameter_list|,
name|gchar
modifier|*
name|help_regexp
parameter_list|,
name|gchar
modifier|*
name|author_regexp
parameter_list|,
name|gchar
modifier|*
name|copyright_regexp
parameter_list|,
name|gchar
modifier|*
name|date_regexp
parameter_list|,
name|gchar
modifier|*
name|proc_type_regexp
parameter_list|,
name|gint
modifier|*
name|nprocs
parameter_list|,
name|gchar
modifier|*
modifier|*
modifier|*
name|proc_names
parameter_list|)
function_decl|;
comment|/* Query the gimp application's procedural database  *  regarding a particular procedure.  */
name|gboolean
name|gimp_query_procedure
parameter_list|(
name|gchar
modifier|*
name|proc_name
parameter_list|,
name|gchar
modifier|*
modifier|*
name|proc_blurb
parameter_list|,
name|gchar
modifier|*
modifier|*
name|proc_help
parameter_list|,
name|gchar
modifier|*
modifier|*
name|proc_author
parameter_list|,
name|gchar
modifier|*
modifier|*
name|proc_copyright
parameter_list|,
name|gchar
modifier|*
modifier|*
name|proc_date
parameter_list|,
name|gint
modifier|*
name|proc_type
parameter_list|,
name|gint
modifier|*
name|nparams
parameter_list|,
name|gint
modifier|*
name|nreturn_vals
parameter_list|,
name|GimpParamDef
modifier|*
modifier|*
name|params
parameter_list|,
name|GimpParamDef
modifier|*
modifier|*
name|return_vals
parameter_list|)
function_decl|;
comment|/* Query the gimp application regarding all open images.  *  The list of open image id's is returned in 'image_ids'.  */
name|gint32
modifier|*
name|gimp_query_images
parameter_list|(
name|gint
modifier|*
name|nimages
parameter_list|)
function_decl|;
comment|/* Install a procedure in the procedure database.  */
name|void
name|gimp_install_procedure
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gchar
modifier|*
name|blurb
parameter_list|,
name|gchar
modifier|*
name|help
parameter_list|,
name|gchar
modifier|*
name|author
parameter_list|,
name|gchar
modifier|*
name|copyright
parameter_list|,
name|gchar
modifier|*
name|date
parameter_list|,
name|gchar
modifier|*
name|menu_path
parameter_list|,
name|gchar
modifier|*
name|image_types
parameter_list|,
name|gint
name|type
parameter_list|,
name|gint
name|nparams
parameter_list|,
name|gint
name|nreturn_vals
parameter_list|,
name|GimpParamDef
modifier|*
name|params
parameter_list|,
name|GimpParamDef
modifier|*
name|return_vals
parameter_list|)
function_decl|;
comment|/* Install a temporary procedure in the procedure database.  */
name|void
name|gimp_install_temp_proc
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gchar
modifier|*
name|blurb
parameter_list|,
name|gchar
modifier|*
name|help
parameter_list|,
name|gchar
modifier|*
name|author
parameter_list|,
name|gchar
modifier|*
name|copyright
parameter_list|,
name|gchar
modifier|*
name|date
parameter_list|,
name|gchar
modifier|*
name|menu_path
parameter_list|,
name|gchar
modifier|*
name|image_types
parameter_list|,
name|gint
name|type
parameter_list|,
name|gint
name|nparams
parameter_list|,
name|gint
name|nreturn_vals
parameter_list|,
name|GimpParamDef
modifier|*
name|params
parameter_list|,
name|GimpParamDef
modifier|*
name|return_vals
parameter_list|,
name|GimpRunProc
name|run_proc
parameter_list|)
function_decl|;
comment|/* Uninstall a temporary procedure  */
name|void
name|gimp_uninstall_temp_proc
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/* Install a load file format handler in the procedure database.  */
name|void
name|gimp_register_magic_load_handler
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gchar
modifier|*
name|extensions
parameter_list|,
name|gchar
modifier|*
name|prefixes
parameter_list|,
name|gchar
modifier|*
name|magics
parameter_list|)
function_decl|;
comment|/* Install a load file format handler in the procedure database.  */
name|void
name|gimp_register_load_handler
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gchar
modifier|*
name|extensions
parameter_list|,
name|gchar
modifier|*
name|prefixes
parameter_list|)
function_decl|;
comment|/* Install a save file format handler in the procedure database.  */
name|void
name|gimp_register_save_handler
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gchar
modifier|*
name|extensions
parameter_list|,
name|gchar
modifier|*
name|prefixes
parameter_list|)
function_decl|;
comment|/* Run a procedure in the procedure database. The parameters are  *  specified via the variable length argument list. The return  *  values are returned in the 'GimpParam*' array.  */
name|GimpParam
modifier|*
name|gimp_run_procedure
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gint
modifier|*
name|nreturn_vals
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* Run a procedure in the procedure database. The parameters are  *  specified as an array of GimpParam.  The return  *  values are returned in the 'GimpParam*' array.  */
name|GimpParam
modifier|*
name|gimp_run_procedure2
parameter_list|(
name|gchar
modifier|*
name|name
parameter_list|,
name|gint
modifier|*
name|nreturn_vals
parameter_list|,
name|gint
name|nparams
parameter_list|,
name|GimpParam
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/* Destroy the an array of parameters. This is useful for  *  destroying the return values returned by a call to  *  'gimp_run_procedure'.  */
name|void
name|gimp_destroy_params
parameter_list|(
name|GimpParam
modifier|*
name|params
parameter_list|,
name|gint
name|nparams
parameter_list|)
function_decl|;
comment|/* Destroy the an array of GimpParamDef's. This is useful for  *  destroying the return values returned by a call to  *  'gimp_query_procedure'.  */
name|void
name|gimp_destroy_paramdefs
parameter_list|(
name|GimpParamDef
modifier|*
name|paramdefs
parameter_list|,
name|gint
name|nparams
parameter_list|)
function_decl|;
name|gdouble
name|gimp_gamma
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|gboolean
name|gimp_install_cmap
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|gboolean
name|gimp_use_xshm
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|guchar
modifier|*
name|gimp_color_cube
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|gint
name|gimp_min_colors
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|gimp_request_wakeups
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|gchar
modifier|*
name|gimp_get_progname
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/****************************************  *           Localisation               *  ****************************************/
name|void
name|gimp_plugin_domain_add
parameter_list|(
name|gchar
modifier|*
name|domain_name
parameter_list|)
function_decl|;
name|void
name|gimp_plugin_domain_add_with_path
parameter_list|(
name|gchar
modifier|*
name|domain_name
parameter_list|,
name|gchar
modifier|*
name|domain_path
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GIMP_H__ */
end_comment

end_unit

