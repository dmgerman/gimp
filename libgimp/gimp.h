begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* LIBGIMP - The GIMP Library                                                     * Copyright (C) 1995-1997 Peter Mattis and Spencer Kimball                  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public  * License as published by the Free Software Foundation; either  * version 2 of the License, or (at your option) any later version.               *                                                                                * This library is distributed in the hope that it will be useful,                * but WITHOUT ANY WARRANTY; without even the implied warranty of                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU              * Library General Public License for more details.  *  * You should have received a copy of the GNU Library General Public  * License along with this library; if not, write to the  * Free Software Foundation, Inc., 59 Temple Place - Suite 330,  * Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GIMP_H__
end_ifndef

begin_define
DECL|macro|__GIMP_H__
define|#
directive|define
name|__GIMP_H__
end_define

begin_include
include|#
directive|include
file|<glib.h>
end_include

begin_include
include|#
directive|include
file|"libgimp/gimpenums.h"
end_include

begin_include
include|#
directive|include
file|"libgimp/gimpfeatures.h"
end_include

begin_include
include|#
directive|include
file|"libgimp/gimpenv.h"
end_include

begin_include
include|#
directive|include
file|"libgimp/parasite.h"
end_include

begin_include
include|#
directive|include
file|"libgimp/parasiteP.h"
end_include

begin_include
include|#
directive|include
file|"libgimp/gimpunit.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|NATIVE_WIN32
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|LIBGIMP_COMPILATION
end_ifdef

begin_define
DECL|macro|GIMPVAR
define|#
directive|define
name|GIMPVAR
value|__declspec(dllexport)
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !LIBGIMP_COMPILATION */
end_comment

begin_define
DECL|macro|GIMPVAR
define|#
directive|define
name|GIMPVAR
value|extern __declspec(dllimport)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !LIBGIMP_COMPILATION */
end_comment

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !NATIVE_WIN32 */
end_comment

begin_define
DECL|macro|GIMPVAR
define|#
directive|define
name|GIMPVAR
value|extern
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
DECL|variable|gimp_major_version
name|GIMPVAR
name|guint
name|gimp_major_version
decl_stmt|;
DECL|variable|gimp_minor_version
name|GIMPVAR
name|guint
name|gimp_minor_version
decl_stmt|;
DECL|variable|gimp_micro_version
name|GIMPVAR
name|guint
name|gimp_micro_version
decl_stmt|;
DECL|variable|_readchannel
name|GIMPVAR
name|GIOChannel
modifier|*
name|_readchannel
decl_stmt|;
DECL|typedef|GPlugInInfo
typedef|typedef
name|struct
name|_GPlugInInfo
name|GPlugInInfo
typedef|;
DECL|typedef|GTile
typedef|typedef
name|struct
name|_GTile
name|GTile
typedef|;
DECL|typedef|GDrawable
typedef|typedef
name|struct
name|_GDrawable
name|GDrawable
typedef|;
DECL|typedef|GPixelRgn
typedef|typedef
name|struct
name|_GPixelRgn
name|GPixelRgn
typedef|;
DECL|typedef|GParamDef
typedef|typedef
name|struct
name|_GParamDef
name|GParamDef
typedef|;
DECL|typedef|GParamColor
typedef|typedef
name|struct
name|_GParamColor
name|GParamColor
typedef|;
DECL|typedef|GParamRegion
typedef|typedef
name|struct
name|_GParamRegion
name|GParamRegion
typedef|;
DECL|typedef|GParamData
typedef|typedef
name|union
name|_GParamData
name|GParamData
typedef|;
DECL|typedef|GParam
typedef|typedef
name|struct
name|_GParam
name|GParam
typedef|;
DECL|typedef|GRunProc
typedef|typedef
name|void
function_decl|(
modifier|*
name|GRunProc
function_decl|)
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|int
name|nparams
parameter_list|,
name|GParam
modifier|*
name|param
parameter_list|,
name|int
modifier|*
name|nreturn_vals
parameter_list|,
name|GParam
modifier|*
modifier|*
name|return_vals
parameter_list|)
function_decl|;
DECL|struct|_GPlugInInfo
struct|struct
name|_GPlugInInfo
block|{
comment|/* called when the gimp application initially starts up */
DECL|member|init_proc
name|void
function_decl|(
modifier|*
name|init_proc
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* called when the gimp application exits */
DECL|member|quit_proc
name|void
function_decl|(
modifier|*
name|quit_proc
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* called by the gimp so that the plug-in can inform the    *  gimp of what it does. (ie. installing a procedure database    *  procedure).    */
DECL|member|query_proc
name|void
function_decl|(
modifier|*
name|query_proc
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* called to run a procedure the plug-in installed in the    *  procedure database.    */
DECL|member|run_proc
name|GRunProc
name|run_proc
decl_stmt|;
block|}
struct|;
if|#
directive|if
name|defined
argument_list|(
name|NATIVE_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|LIBGIMP_COMPILATION
argument_list|)
comment|/* Define PLUG_IN_INFO as an exported symbol (when compiling a plug-in).  * In gimp.c, we don't declare it at all, but fetch the address  * of it with GetProcAddress.  */
ifdef|#
directive|ifdef
name|__GNUC__
DECL|variable|PLUG_IN_INFO
name|GPlugInInfo
name|PLUG_IN_INFO
decl_stmt|;
else|#
directive|else
name|__declspec
argument_list|(
argument|dllexport
argument_list|)
name|GPlugInInfo
name|PLUG_IN_INFO
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
DECL|struct|_GTile
struct|struct
name|_GTile
block|{
DECL|member|ewidth
name|guint
name|ewidth
decl_stmt|;
comment|/* the effective width of the tile */
DECL|member|eheight
name|guint
name|eheight
decl_stmt|;
comment|/* the effective height of the tile */
DECL|member|bpp
name|guint
name|bpp
decl_stmt|;
comment|/* the bytes per pixel (1, 2, 3 or 4 ) */
DECL|member|tile_num
name|guint
name|tile_num
decl_stmt|;
comment|/* the number of this tile within the drawable */
DECL|member|ref_count
name|guint16
name|ref_count
decl_stmt|;
comment|/* reference count for the tile */
DECL|member|dirty
name|guint
name|dirty
range|:
literal|1
decl_stmt|;
comment|/* is the tile dirty? has it been modified? */
DECL|member|shadow
name|guint
name|shadow
range|:
literal|1
decl_stmt|;
comment|/* is this a shadow tile */
DECL|member|data
name|guchar
modifier|*
name|data
decl_stmt|;
comment|/* the pixel data for the tile */
DECL|member|drawable
name|GDrawable
modifier|*
name|drawable
decl_stmt|;
comment|/* the drawable this tile came from */
block|}
struct|;
DECL|struct|_GDrawable
struct|struct
name|_GDrawable
block|{
DECL|member|id
name|gint32
name|id
decl_stmt|;
comment|/* drawable ID */
DECL|member|width
name|guint
name|width
decl_stmt|;
comment|/* width of drawble */
DECL|member|height
name|guint
name|height
decl_stmt|;
comment|/* height of drawble */
DECL|member|bpp
name|guint
name|bpp
decl_stmt|;
comment|/* bytes per pixel of drawable */
DECL|member|ntile_rows
name|guint
name|ntile_rows
decl_stmt|;
comment|/* # of tile rows */
DECL|member|ntile_cols
name|guint
name|ntile_cols
decl_stmt|;
comment|/* # of tile columns */
DECL|member|tiles
name|GTile
modifier|*
name|tiles
decl_stmt|;
comment|/* the normal tiles */
DECL|member|shadow_tiles
name|GTile
modifier|*
name|shadow_tiles
decl_stmt|;
comment|/* the shadow tiles */
block|}
struct|;
DECL|struct|_GPixelRgn
struct|struct
name|_GPixelRgn
block|{
DECL|member|data
name|guchar
modifier|*
name|data
decl_stmt|;
comment|/* pointer to region data */
DECL|member|drawable
name|GDrawable
modifier|*
name|drawable
decl_stmt|;
comment|/* pointer to drawable */
DECL|member|bpp
name|guint
name|bpp
decl_stmt|;
comment|/* bytes per pixel */
DECL|member|rowstride
name|guint
name|rowstride
decl_stmt|;
comment|/* bytes per pixel row */
DECL|member|x
DECL|member|y
name|guint
name|x
decl_stmt|,
name|y
decl_stmt|;
comment|/* origin */
DECL|member|w
DECL|member|h
name|guint
name|w
decl_stmt|,
name|h
decl_stmt|;
comment|/* width and height of region */
DECL|member|dirty
name|guint
name|dirty
range|:
literal|1
decl_stmt|;
comment|/* will this region be dirtied? */
DECL|member|shadow
name|guint
name|shadow
range|:
literal|1
decl_stmt|;
comment|/* will this region use the shadow or normal tiles */
DECL|member|process_count
name|guint
name|process_count
decl_stmt|;
comment|/* used internally */
block|}
struct|;
DECL|struct|_GParamDef
struct|struct
name|_GParamDef
block|{
DECL|member|type
name|GParamType
name|type
decl_stmt|;
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|description
name|char
modifier|*
name|description
decl_stmt|;
block|}
struct|;
DECL|struct|_GParamColor
struct|struct
name|_GParamColor
block|{
DECL|member|red
name|guint8
name|red
decl_stmt|;
DECL|member|green
name|guint8
name|green
decl_stmt|;
DECL|member|blue
name|guint8
name|blue
decl_stmt|;
block|}
struct|;
DECL|struct|_GParamRegion
struct|struct
name|_GParamRegion
block|{
DECL|member|x
name|gint32
name|x
decl_stmt|;
DECL|member|y
name|gint32
name|y
decl_stmt|;
DECL|member|width
name|gint32
name|width
decl_stmt|;
DECL|member|height
name|gint32
name|height
decl_stmt|;
block|}
struct|;
DECL|union|_GParamData
union|union
name|_GParamData
block|{
DECL|member|d_int32
name|gint32
name|d_int32
decl_stmt|;
DECL|member|d_int16
name|gint16
name|d_int16
decl_stmt|;
DECL|member|d_int8
name|gint8
name|d_int8
decl_stmt|;
DECL|member|d_float
name|gdouble
name|d_float
decl_stmt|;
DECL|member|d_string
name|gchar
modifier|*
name|d_string
decl_stmt|;
DECL|member|d_int32array
name|gint32
modifier|*
name|d_int32array
decl_stmt|;
DECL|member|d_int16array
name|gint16
modifier|*
name|d_int16array
decl_stmt|;
DECL|member|d_int8array
name|gint8
modifier|*
name|d_int8array
decl_stmt|;
DECL|member|d_floatarray
name|gdouble
modifier|*
name|d_floatarray
decl_stmt|;
DECL|member|d_stringarray
name|gchar
modifier|*
modifier|*
name|d_stringarray
decl_stmt|;
DECL|member|d_color
name|GParamColor
name|d_color
decl_stmt|;
DECL|member|d_region
name|GParamRegion
name|d_region
decl_stmt|;
DECL|member|d_display
name|gint32
name|d_display
decl_stmt|;
DECL|member|d_image
name|gint32
name|d_image
decl_stmt|;
DECL|member|d_layer
name|gint32
name|d_layer
decl_stmt|;
DECL|member|d_channel
name|gint32
name|d_channel
decl_stmt|;
DECL|member|d_drawable
name|gint32
name|d_drawable
decl_stmt|;
DECL|member|d_selection
name|gint32
name|d_selection
decl_stmt|;
DECL|member|d_boundary
name|gint32
name|d_boundary
decl_stmt|;
DECL|member|d_path
name|gint32
name|d_path
decl_stmt|;
DECL|member|d_parasite
name|Parasite
name|d_parasite
decl_stmt|;
DECL|member|d_status
name|gint32
name|d_status
decl_stmt|;
block|}
union|;
DECL|struct|_GParam
struct|struct
name|_GParam
block|{
DECL|member|type
name|GParamType
name|type
decl_stmt|;
DECL|member|data
name|GParamData
name|data
decl_stmt|;
block|}
struct|;
ifdef|#
directive|ifdef
name|NATIVE_WIN32
comment|/* Define WinMain() as plug-ins are built as GUI applications. Also  * define a main() in case some plug-in still is built as a console  * application.  */
ifdef|#
directive|ifdef
name|__GNUC__
comment|/* With gcc these must be handled differently */
DECL|macro|__argc
define|#
directive|define
name|__argc
value|_argc
DECL|macro|__argv
define|#
directive|define
name|__argv
value|_argv
DECL|macro|_stdcall
define|#
directive|define
name|_stdcall
value|__attribute__((stdcall))
endif|#
directive|endif
DECL|macro|MAIN ()
define|#
directive|define
name|MAIN
parameter_list|()
define|\
value|int _stdcall				\    WinMain (int hInstance,		\ 	    int hPrevInstance,		\ 	    char *lpszCmdLine,		\ 	    int nCmdShow)		\    {					\      return gimp_main (__argc, __argv);	\    }					\ 					\    int					\    main (int argc, char *argv[])	\    {					\      return gimp_main (argc, argv);	\    }
else|#
directive|else
ifndef|#
directive|ifndef
name|__EMX__
DECL|macro|MAIN ()
define|#
directive|define
name|MAIN
parameter_list|()
define|\
value|int					\    main (int argc, char *argv[])	\    {					\      return gimp_main (argc, argv);	\    }
else|#
directive|else
DECL|macro|MAIN ()
define|#
directive|define
name|MAIN
parameter_list|()
define|\
value|int						\    main (int argc, char *argv[])		\    {						\      set_gimp_PLUG_IN_INFO(&PLUG_IN_INFO);	\      return gimp_main (argc, argv);		\    }
endif|#
directive|endif
endif|#
directive|endif
comment|/* The main procedure that should be called with the  *  'argc' and 'argv' that are passed to "main".  */
name|int
name|gimp_main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
function_decl|;
comment|/* Forcefully causes the gimp library to exit and  *  close down its connection to main gimp application.  */
name|void
name|G_GNUC_NORETURN
name|gimp_quit
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Specify a range of data to be associated with 'id'.  *  The data will exist for as long as the main gimp  *  application is running.  */
name|void
name|gimp_set_data
parameter_list|(
name|gchar
modifier|*
name|id
parameter_list|,
name|gpointer
name|data
parameter_list|,
name|guint32
name|length
parameter_list|)
function_decl|;
comment|/* Retrieve the piece of data stored within the main  *  gimp application specified by 'id'. The data is  *  stored in the supplied buffer.  Make sure enough  *  space is allocated.  */
name|void
name|gimp_get_data
parameter_list|(
name|gchar
modifier|*
name|id
parameter_list|,
name|gpointer
name|data
parameter_list|)
function_decl|;
comment|/* Get the size in bytes of the data stored by a gimp_get_data  * id. As size of zero may indicate that there is no such  * identifier in the database.  */
name|guint32
name|gimp_get_data_size
parameter_list|(
name|gchar
modifier|*
name|id
parameter_list|)
function_decl|;
comment|/* Initialize the progress bar with "message". If "message"  *  is NULL, the message displayed in the progress window will  *  be the name of the plug-in.  */
name|void
name|gimp_progress_init
parameter_list|(
name|char
modifier|*
name|message
parameter_list|)
function_decl|;
comment|/* Update the progress bar. If the progress bar has not been  *  initialized then it will be automatically initialized as if  *  "gimp_progress_init (NULL)" were called. "percentage" is a  *  value between 0 and 1.  */
name|void
name|gimp_progress_update
parameter_list|(
name|gdouble
name|percentage
parameter_list|)
function_decl|;
comment|/* Returns the default gdisplay (given at plug-in config time).  */
name|gint32
name|gimp_default_display
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Pops up a dialog box with "message". Useful for status and  * error reports. If "message" is NULL, do nothing.  */
name|void
name|gimp_message
parameter_list|(
specifier|const
name|gchar
modifier|*
name|message
parameter_list|)
function_decl|;
comment|/* Query the gimp application's procedural database.  *  The arguments are regular expressions which select  *  which procedure names will be returned in 'proc_names'.  */
name|void
name|gimp_query_database
parameter_list|(
name|char
modifier|*
name|name_regexp
parameter_list|,
name|char
modifier|*
name|blurb_regexp
parameter_list|,
name|char
modifier|*
name|help_regexp
parameter_list|,
name|char
modifier|*
name|author_regexp
parameter_list|,
name|char
modifier|*
name|copyright_regexp
parameter_list|,
name|char
modifier|*
name|date_regexp
parameter_list|,
name|char
modifier|*
name|proc_type_regexp
parameter_list|,
name|int
modifier|*
name|nprocs
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
name|proc_names
parameter_list|)
function_decl|;
comment|/* Query the gimp application's procedural database  *  regarding a particular procedure.  */
name|gint
name|gimp_query_procedure
parameter_list|(
name|char
modifier|*
name|proc_name
parameter_list|,
name|char
modifier|*
modifier|*
name|proc_blurb
parameter_list|,
name|char
modifier|*
modifier|*
name|proc_help
parameter_list|,
name|char
modifier|*
modifier|*
name|proc_author
parameter_list|,
name|char
modifier|*
modifier|*
name|proc_copyright
parameter_list|,
name|char
modifier|*
modifier|*
name|proc_date
parameter_list|,
name|int
modifier|*
name|proc_type
parameter_list|,
name|int
modifier|*
name|nparams
parameter_list|,
name|int
modifier|*
name|nreturn_vals
parameter_list|,
name|GParamDef
modifier|*
modifier|*
name|params
parameter_list|,
name|GParamDef
modifier|*
modifier|*
name|return_vals
parameter_list|)
function_decl|;
comment|/* Query the gimp application regarding all open images.  *  The list of open image id's is returned in 'image_ids'.  */
name|gint32
modifier|*
name|gimp_query_images
parameter_list|(
name|int
modifier|*
name|nimages
parameter_list|)
function_decl|;
comment|/* Install a procedure in the procedure database.  */
name|void
name|gimp_install_procedure
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|blurb
parameter_list|,
name|char
modifier|*
name|help
parameter_list|,
name|char
modifier|*
name|author
parameter_list|,
name|char
modifier|*
name|copyright
parameter_list|,
name|char
modifier|*
name|date
parameter_list|,
name|char
modifier|*
name|menu_path
parameter_list|,
name|char
modifier|*
name|image_types
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|nparams
parameter_list|,
name|int
name|nreturn_vals
parameter_list|,
name|GParamDef
modifier|*
name|params
parameter_list|,
name|GParamDef
modifier|*
name|return_vals
parameter_list|)
function_decl|;
comment|/* Install a temporary procedure in the procedure database.  */
name|void
name|gimp_install_temp_proc
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|blurb
parameter_list|,
name|char
modifier|*
name|help
parameter_list|,
name|char
modifier|*
name|author
parameter_list|,
name|char
modifier|*
name|copyright
parameter_list|,
name|char
modifier|*
name|date
parameter_list|,
name|char
modifier|*
name|menu_path
parameter_list|,
name|char
modifier|*
name|image_types
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|nparams
parameter_list|,
name|int
name|nreturn_vals
parameter_list|,
name|GParamDef
modifier|*
name|params
parameter_list|,
name|GParamDef
modifier|*
name|return_vals
parameter_list|,
name|GRunProc
name|run_proc
parameter_list|)
function_decl|;
comment|/* Uninstall a temporary procedure  */
name|void
name|gimp_uninstall_temp_proc
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/* Install a load file format handler in the procedure database.  */
name|void
name|gimp_register_magic_load_handler
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|extensions
parameter_list|,
name|char
modifier|*
name|prefixes
parameter_list|,
name|char
modifier|*
name|magics
parameter_list|)
function_decl|;
comment|/* Install a load file format handler in the procedure database.  */
name|void
name|gimp_register_load_handler
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|extensions
parameter_list|,
name|char
modifier|*
name|prefixes
parameter_list|)
function_decl|;
comment|/* Install a save file format handler in the procedure database.  */
name|void
name|gimp_register_save_handler
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|extensions
parameter_list|,
name|char
modifier|*
name|prefixes
parameter_list|)
function_decl|;
comment|/* Run a procedure in the procedure database. The parameters are  *  specified via the variable length argument list. The return  *  values are returned in the 'GParam*' array.  */
name|GParam
modifier|*
name|gimp_run_procedure
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|int
modifier|*
name|nreturn_vals
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* Run a procedure in the procedure database. The parameters are  *  specified as an array of GParam.  The return  *  values are returned in the 'GParam*' array.  */
name|GParam
modifier|*
name|gimp_run_procedure2
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|int
modifier|*
name|nreturn_vals
parameter_list|,
name|int
name|nparams
parameter_list|,
name|GParam
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/* Destroy the an array of parameters. This is useful for  *  destroying the return values returned by a call to  *  'gimp_run_procedure'.  */
name|void
name|gimp_destroy_params
parameter_list|(
name|GParam
modifier|*
name|params
parameter_list|,
name|int
name|nparams
parameter_list|)
function_decl|;
comment|/* Destroy the an array of GParamDef's. This is useful for  *  destroying the return values returned by a call to  *  'gimp_query_procedure'.  */
name|void
name|gimp_destroy_paramdefs
parameter_list|(
name|GParamDef
modifier|*
name|paramdefs
parameter_list|,
name|int
name|nparams
parameter_list|)
function_decl|;
name|gdouble
name|gimp_gamma
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|gint
name|gimp_install_cmap
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|gint
name|gimp_use_xshm
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|guchar
modifier|*
name|gimp_color_cube
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|gimp_request_wakeups
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/****************************************  *              Images                  *  ****************************************/
name|gint32
name|gimp_image_new
parameter_list|(
name|guint
name|width
parameter_list|,
name|guint
name|height
parameter_list|,
name|GImageType
name|type
parameter_list|)
function_decl|;
name|void
name|gimp_image_delete
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_image_width
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_image_height
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|GImageType
name|gimp_image_base_type
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_floating_selection
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_add_channel
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|channel_ID
parameter_list|,
name|gint
name|position
parameter_list|)
function_decl|;
name|void
name|gimp_image_add_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|position
parameter_list|)
function_decl|;
name|void
name|gimp_image_add_layer_mask
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|,
name|gint32
name|mask_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_clean_all
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_disable_undo
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_enable_undo
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_undo_push_group_start
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_undo_push_group_end
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_clean_all
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_flatten
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_lower_channel
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_lower_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_merge_visible_layers
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
name|merge_type
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_pick_correlate_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
name|x
parameter_list|,
name|gint
name|y
parameter_list|)
function_decl|;
name|void
name|gimp_image_raise_channel
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_raise_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_remove_channel
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_remove_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_remove_layer_mask
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|mode
parameter_list|)
function_decl|;
name|void
name|gimp_image_resize
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|guint
name|new_width
parameter_list|,
name|guint
name|new_height
parameter_list|,
name|gint
name|offset_x
parameter_list|,
name|gint
name|offset_y
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_get_active_channel
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_get_active_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|gint32
modifier|*
name|gimp_image_get_channels
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
modifier|*
name|nchannels
parameter_list|)
function_decl|;
name|guchar
modifier|*
name|gimp_image_get_cmap
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
modifier|*
name|ncolors
parameter_list|)
function_decl|;
name|gint
name|gimp_image_get_component_active
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
name|component
parameter_list|)
function_decl|;
name|gint
name|gimp_image_get_component_visible
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
name|component
parameter_list|)
function_decl|;
name|char
modifier|*
name|gimp_image_get_filename
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|gint32
modifier|*
name|gimp_image_get_layers
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
modifier|*
name|nlayers
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_get_selection
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_active_channel
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_active_layer
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_cmap
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|guchar
modifier|*
name|cmap
parameter_list|,
name|gint
name|ncolors
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_component_active
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
name|component
parameter_list|,
name|gint
name|active
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_component_visible
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
name|component
parameter_list|,
name|gint
name|visible
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_filename
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|Parasite
modifier|*
name|gimp_image_find_parasite
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_image_attach_parasite
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
specifier|const
name|Parasite
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|gimp_image_attach_new_parasite
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|gimp_image_detach_parasite
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_resolution
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|double
name|xresolution
parameter_list|,
name|double
name|yresolution
parameter_list|)
function_decl|;
name|void
name|gimp_image_get_resolution
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|double
modifier|*
name|xresolution
parameter_list|,
name|double
modifier|*
name|yresolution
parameter_list|)
function_decl|;
name|void
name|gimp_image_set_unit
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|GUnit
name|unit
parameter_list|)
function_decl|;
name|GUnit
name|gimp_image_get_unit
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_get_layer_by_tattoo
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|tattoo
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_get_channel_by_tattoo
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|tattoo
parameter_list|)
function_decl|;
name|guchar
modifier|*
name|gimp_image_get_thumbnail_data
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint
modifier|*
name|width
parameter_list|,
name|gint
modifier|*
name|height
parameter_list|,
name|gint
modifier|*
name|bytes
parameter_list|)
function_decl|;
comment|/****************************************  *              Guides                  *  ****************************************/
name|gint32
name|gimp_image_add_hguide
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|yposition
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_add_vguide
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|yposition
parameter_list|)
function_decl|;
name|void
name|gimp_image_delete_guide
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|guide_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_find_next_guide
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|guide_ID
parameter_list|)
function_decl|;
name|GOrientation
name|gimp_image_get_guide_orientation
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|guide_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_image_get_guide_position
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|gint32
name|guide_ID
parameter_list|)
function_decl|;
comment|/****************************************  *             Displays                 *  ****************************************/
name|gint32
name|gimp_display_new
parameter_list|(
name|gint32
name|image_ID
parameter_list|)
function_decl|;
name|void
name|gimp_display_delete
parameter_list|(
name|gint32
name|display_ID
parameter_list|)
function_decl|;
name|void
name|gimp_displays_flush
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/****************************************  *              Layers                  *  ****************************************/
name|gint32
name|gimp_layer_new
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|guint
name|width
parameter_list|,
name|guint
name|height
parameter_list|,
name|GDrawableType
name|type
parameter_list|,
name|gdouble
name|opacity
parameter_list|,
name|GLayerMode
name|mode
parameter_list|)
function_decl|;
name|gint32
name|gimp_layer_copy
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|void
name|gimp_layer_delete
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_layer_width
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_layer_height
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_layer_bpp
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|GDrawableType
name|gimp_layer_type
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|void
name|gimp_layer_add_alpha
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_layer_create_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|mask_type
parameter_list|)
function_decl|;
name|void
name|gimp_layer_resize
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|guint
name|new_width
parameter_list|,
name|guint
name|new_height
parameter_list|,
name|gint
name|offset_x
parameter_list|,
name|gint
name|offset_y
parameter_list|)
function_decl|;
name|void
name|gimp_layer_scale
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|guint
name|new_width
parameter_list|,
name|guint
name|new_height
parameter_list|,
name|gint
name|local_origin
parameter_list|)
function_decl|;
name|void
name|gimp_layer_translate
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|offset_x
parameter_list|,
name|gint
name|offset_y
parameter_list|)
function_decl|;
name|gint
name|gimp_layer_is_floating_selection
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_layer_get_image_id
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_layer_get_mask_id
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_layer_get_apply_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_layer_get_edit_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|GLayerMode
name|gimp_layer_get_mode
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|char
modifier|*
name|gimp_layer_get_name
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gdouble
name|gimp_layer_get_opacity
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_layer_get_preserve_transparency
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_layer_get_show_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_layer_get_visible
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_apply_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|apply_mask
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_edit_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|edit_mask
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_mode
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|GLayerMode
name|mode
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_name
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_offsets
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|offset_x
parameter_list|,
name|gint
name|offset_y
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_opacity
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gdouble
name|opacity
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_preserve_transparency
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|preserve_transparency
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_show_mask
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|show_mask
parameter_list|)
function_decl|;
name|void
name|gimp_layer_set_visible
parameter_list|(
name|gint32
name|layer_ID
parameter_list|,
name|gint
name|visible
parameter_list|)
function_decl|;
name|gint32
name|gimp_layer_get_tattoo
parameter_list|(
name|gint32
name|layer_ID
parameter_list|)
function_decl|;
comment|/****************************************  *             Channels                 *  ****************************************/
name|gint32
name|gimp_channel_new
parameter_list|(
name|gint32
name|image_ID
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|guint
name|width
parameter_list|,
name|guint
name|height
parameter_list|,
name|gdouble
name|opacity
parameter_list|,
name|guchar
modifier|*
name|color
parameter_list|)
function_decl|;
name|gint32
name|gimp_channel_copy
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_channel_delete
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_channel_width
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_channel_height
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_channel_get_image_id
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|gint32
name|gimp_channel_get_layer_id
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_channel_get_color
parameter_list|(
name|gint32
name|channel_ID
parameter_list|,
name|guchar
modifier|*
name|red
parameter_list|,
name|guchar
modifier|*
name|green
parameter_list|,
name|guchar
modifier|*
name|blue
parameter_list|)
function_decl|;
name|char
modifier|*
name|gimp_channel_get_name
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|gdouble
name|gimp_channel_get_opacity
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_channel_get_show_masked
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_channel_get_visible
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
name|void
name|gimp_channel_set_color
parameter_list|(
name|gint32
name|channel_ID
parameter_list|,
name|guchar
name|red
parameter_list|,
name|guchar
name|green
parameter_list|,
name|guchar
name|blue
parameter_list|)
function_decl|;
name|void
name|gimp_channel_set_name
parameter_list|(
name|gint32
name|channel_ID
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_channel_set_opacity
parameter_list|(
name|gint32
name|channel_ID
parameter_list|,
name|gdouble
name|opacity
parameter_list|)
function_decl|;
name|void
name|gimp_channel_set_show_masked
parameter_list|(
name|gint32
name|channel_ID
parameter_list|,
name|gint
name|show_masked
parameter_list|)
function_decl|;
name|void
name|gimp_channel_set_visible
parameter_list|(
name|gint32
name|channel_ID
parameter_list|,
name|gint
name|visible
parameter_list|)
function_decl|;
name|gint32
name|gimp_channel_get_tattoo
parameter_list|(
name|gint32
name|channel_ID
parameter_list|)
function_decl|;
comment|/****************************************  *             GDrawables                *  ****************************************/
name|GDrawable
modifier|*
name|gimp_drawable_get
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_detach
parameter_list|(
name|GDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_flush
parameter_list|(
name|GDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_delete
parameter_list|(
name|GDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_update
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
name|x
parameter_list|,
name|gint
name|y
parameter_list|,
name|guint
name|width
parameter_list|,
name|guint
name|height
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_merge_shadow
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
name|undoable
parameter_list|)
function_decl|;
name|gint32
name|gimp_drawable_image_id
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|char
modifier|*
name|gimp_drawable_name
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_drawable_width
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_drawable_height
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|guint
name|gimp_drawable_bpp
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|GDrawableType
name|gimp_drawable_type
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_visible
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_channel
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_color
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_gray
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_has_alpha
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_indexed
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_layer
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_layer_mask
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|)
function_decl|;
name|gint
name|gimp_drawable_mask_bounds
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
modifier|*
name|x1
parameter_list|,
name|gint
modifier|*
name|y1
parameter_list|,
name|gint
modifier|*
name|x2
parameter_list|,
name|gint
modifier|*
name|y2
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_offsets
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
modifier|*
name|offset_x
parameter_list|,
name|gint
modifier|*
name|offset_y
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_fill
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
name|fill_type
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_set_name
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_set_visible
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
name|visible
parameter_list|)
function_decl|;
name|GTile
modifier|*
name|gimp_drawable_get_tile
parameter_list|(
name|GDrawable
modifier|*
name|drawable
parameter_list|,
name|gint
name|shadow
parameter_list|,
name|gint
name|row
parameter_list|,
name|gint
name|col
parameter_list|)
function_decl|;
name|GTile
modifier|*
name|gimp_drawable_get_tile2
parameter_list|(
name|GDrawable
modifier|*
name|drawable
parameter_list|,
name|gint
name|shadow
parameter_list|,
name|gint
name|x
parameter_list|,
name|gint
name|y
parameter_list|)
function_decl|;
name|Parasite
modifier|*
name|gimp_drawable_find_parasite
parameter_list|(
name|gint32
name|drawable
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_attach_parasite
parameter_list|(
name|gint32
name|drawable
parameter_list|,
specifier|const
name|Parasite
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|gimp_layer_attach_new_parasite
parameter_list|(
name|gint32
name|drawable
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|gimp_drawable_detach_parasite
parameter_list|(
name|gint32
name|drawable
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|guchar
modifier|*
name|gimp_drawable_get_thumbnail_data
parameter_list|(
name|gint32
name|drawable_ID
parameter_list|,
name|gint
modifier|*
name|width
parameter_list|,
name|gint
modifier|*
name|height
parameter_list|,
name|gint
modifier|*
name|bytes
parameter_list|)
function_decl|;
comment|/****************************************  *               GTiles                  *  ****************************************/
name|void
name|gimp_tile_ref
parameter_list|(
name|GTile
modifier|*
name|tile
parameter_list|)
function_decl|;
name|void
name|gimp_tile_ref_zero
parameter_list|(
name|GTile
modifier|*
name|tile
parameter_list|)
function_decl|;
name|void
name|gimp_tile_unref
parameter_list|(
name|GTile
modifier|*
name|tile
parameter_list|,
name|int
name|dirty
parameter_list|)
function_decl|;
name|void
name|gimp_tile_flush
parameter_list|(
name|GTile
modifier|*
name|tile
parameter_list|)
function_decl|;
name|void
name|gimp_tile_cache_size
parameter_list|(
name|gulong
name|kilobytes
parameter_list|)
function_decl|;
name|void
name|gimp_tile_cache_ntiles
parameter_list|(
name|gulong
name|ntiles
parameter_list|)
function_decl|;
name|guint
name|gimp_tile_width
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|guint
name|gimp_tile_height
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/****************************************  *           Pixel Regions              *  ****************************************/
name|void
name|gimp_pixel_rgn_init
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|GDrawable
modifier|*
name|drawable
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|dirty
parameter_list|,
name|int
name|shadow
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_resize
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_get_pixel
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_get_row
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_get_col
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_get_rect
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_set_pixel
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_set_row
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_set_col
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|void
name|gimp_pixel_rgn_set_rect
parameter_list|(
name|GPixelRgn
modifier|*
name|pr
parameter_list|,
name|guchar
modifier|*
name|buf
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|gpointer
name|gimp_pixel_rgns_register
parameter_list|(
name|int
name|nrgns
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|gpointer
name|gimp_pixel_rgns_register2
parameter_list|(
name|int
name|nrgns
parameter_list|,
name|GPixelRgn
modifier|*
modifier|*
name|prs
parameter_list|)
function_decl|;
name|gpointer
name|gimp_pixel_rgns_process
parameter_list|(
name|gpointer
name|pri_ptr
parameter_list|)
function_decl|;
comment|/****************************************  *            The Palette               *  ****************************************/
name|void
name|gimp_palette_get_background
parameter_list|(
name|guchar
modifier|*
name|red
parameter_list|,
name|guchar
modifier|*
name|green
parameter_list|,
name|guchar
modifier|*
name|blue
parameter_list|)
function_decl|;
name|void
name|gimp_palette_get_foreground
parameter_list|(
name|guchar
modifier|*
name|red
parameter_list|,
name|guchar
modifier|*
name|green
parameter_list|,
name|guchar
modifier|*
name|blue
parameter_list|)
function_decl|;
name|void
name|gimp_palette_set_background
parameter_list|(
name|guchar
name|red
parameter_list|,
name|guchar
name|green
parameter_list|,
name|guchar
name|blue
parameter_list|)
function_decl|;
name|void
name|gimp_palette_set_foreground
parameter_list|(
name|guchar
name|red
parameter_list|,
name|guchar
name|green
parameter_list|,
name|guchar
name|blue
parameter_list|)
function_decl|;
comment|/****************************************  *            Gradients                 *  ****************************************/
name|char
modifier|*
modifier|*
name|gimp_gradients_get_list
parameter_list|(
name|gint
modifier|*
name|num_gradients
parameter_list|)
function_decl|;
name|char
modifier|*
name|gimp_gradients_get_active
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|gimp_gradients_set_active
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|gdouble
modifier|*
name|gimp_gradients_sample_uniform
parameter_list|(
name|gint
name|num_samples
parameter_list|)
function_decl|;
name|gdouble
modifier|*
name|gimp_gradients_sample_custom
parameter_list|(
name|gint
name|num_samples
parameter_list|,
name|gdouble
modifier|*
name|positions
parameter_list|)
function_decl|;
comment|/****************************************  *            Parasites                 *  ****************************************/
name|Parasite
modifier|*
name|gimp_find_parasite
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|gimp_attach_parasite
parameter_list|(
specifier|const
name|Parasite
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|gimp_attach_new_parasite
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|gimp_detach_parasite
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GIMP_H__ */
end_comment

end_unit

