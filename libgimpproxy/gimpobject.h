begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Generated data (by gimp-mkproxy) */
end_comment

begin_comment
comment|/* autogenerated from "./../app/core/gimpobject.h" */
end_comment

begin_comment
comment|/* The GIMP -- an image manipulation program  * Copyright (C) 1995-1997 Spencer Kimball and Peter Mattis  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GIMP_OBJECT_H__
end_ifndef

begin_define
DECL|macro|__GIMP_OBJECT_H__
DECL|macro|__GIMP_OBJECT_H__
define|#
directive|define
name|__GIMP_OBJECT_H__
end_define

begin_define
DECL|macro|GIMP_TYPE_OBJECT
DECL|macro|GIMP_TYPE_OBJECT
define|#
directive|define
name|GIMP_TYPE_OBJECT
value|(gimp_object_get_type ())
end_define

begin_define
DECL|macro|GIMP_OBJECT (obj)
DECL|macro|GIMP_OBJECT (obj)
define|#
directive|define
name|GIMP_OBJECT
parameter_list|(
name|obj
parameter_list|)
value|(G_TYPE_CHECK_INSTANCE_CAST ((obj), GIMP_TYPE_OBJECT, GimpObject))
end_define

begin_define
DECL|macro|GIMP_OBJECT_CLASS (klass)
DECL|macro|GIMP_OBJECT_CLASS (klass)
define|#
directive|define
name|GIMP_OBJECT_CLASS
parameter_list|(
name|klass
parameter_list|)
value|(G_TYPE_CHECK_CLASS_CAST ((klass), GIMP_TYPE_OBJECT, GimpObjectClass))
end_define

begin_define
DECL|macro|GIMP_IS_OBJECT (obj)
DECL|macro|GIMP_IS_OBJECT (obj)
define|#
directive|define
name|GIMP_IS_OBJECT
parameter_list|(
name|obj
parameter_list|)
value|(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIMP_TYPE_OBJECT))
end_define

begin_define
DECL|macro|GIMP_IS_OBJECT_CLASS (klass)
DECL|macro|GIMP_IS_OBJECT_CLASS (klass)
define|#
directive|define
name|GIMP_IS_OBJECT_CLASS
parameter_list|(
name|klass
parameter_list|)
value|(G_TYPE_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_OBJECT))
end_define

begin_define
DECL|macro|GIMP_OBJECT_GET_CLASS (obj)
DECL|macro|GIMP_OBJECT_GET_CLASS (obj)
define|#
directive|define
name|GIMP_OBJECT_GET_CLASS
parameter_list|(
name|obj
parameter_list|)
value|(G_TYPE_INSTANCE_GET_CLASS ((obj), GIMP_TYPE_OBJECT, GimpObjectClass))
end_define

begin_typedef
DECL|typedef|GimpObjectClass
DECL|typedef|GimpObjectClass
typedef|typedef
name|struct
name|_GimpObjectClass
name|GimpObjectClass
typedef|;
end_typedef

begin_struct
DECL|struct|_GimpObject
DECL|struct|_GimpObject
struct|struct
name|_GimpObject
block|{
DECL|member|parent_instance
DECL|member|parent_instance
name|GObject
name|parent_instance
decl_stmt|;
DECL|member|name
DECL|member|name
name|gchar
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
DECL|struct|_GimpObjectClass
DECL|struct|_GimpObjectClass
struct|struct
name|_GimpObjectClass
block|{
DECL|member|parent_class
DECL|member|parent_class
name|GObjectClass
name|parent_class
decl_stmt|;
comment|/*  signals  */
DECL|member|disconnect
DECL|member|disconnect
name|void
function_decl|(
modifier|*
name|disconnect
function_decl|)
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
function_decl|;
DECL|member|name_changed
DECL|member|name_changed
name|void
function_decl|(
modifier|*
name|name_changed
function_decl|)
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
function_decl|;
comment|/*  virtual functions  */
DECL|member|get_memsize
DECL|member|get_memsize
name|gsize
function_decl|(
modifier|*
name|get_memsize
function_decl|)
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_decl_stmt
name|GType
name|gimp_object_get_type
argument_list|(
name|void
argument_list|)
name|G_GNUC_CONST
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|gimp_object_set_name
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|,
specifier|const
name|gchar
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|gchar
modifier|*
name|gimp_object_get_name
parameter_list|(
specifier|const
name|GimpObject
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gimp_object_name_changed
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|gsize
name|gimp_object_get_memsize
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GIMP_OBJECT_H__ */
end_comment

begin_comment
comment|/* Generated data ends here */
end_comment

begin_expr_stmt
operator|(
name|GBaseInitFunc
operator|)
name|NULL
operator|,
operator|(
name|GBaseFinalizeFunc
operator|)
name|NULL
operator|,
operator|(
name|GClassInitFunc
operator|)
name|gimp_object_class_init
operator|,
name|NULL
operator|,
comment|/* class_finalize */
name|NULL
operator|,
comment|/* class_data     */
sizeof|sizeof
argument_list|(
name|GimpObject
argument_list|)
operator|,
literal|0
operator|,
comment|/* n_preallocs    */
operator|(
name|GInstanceInitFunc
operator|)
name|gimp_object_init
operator|,
end_expr_stmt

begin_expr_stmt
unit|};
name|object_type
operator|=
name|g_type_register_static
argument_list|(
name|G_TYPE_OBJECT
argument_list|,
literal|"GimpObject"
argument_list|,
operator|&
name|object_info
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    return
name|object_type
expr_stmt|;
end_expr_stmt

begin_function
unit|}  static
name|void
name|gimp_object_class_init
parameter_list|(
name|GimpObjectClass
modifier|*
name|klass
parameter_list|)
block|{
name|GObjectClass
modifier|*
name|object_class
decl_stmt|;
name|object_class
operator|=
name|G_OBJECT_CLASS
argument_list|(
name|klass
argument_list|)
expr_stmt|;
name|parent_class
operator|=
name|g_type_class_peek_parent
argument_list|(
name|klass
argument_list|)
expr_stmt|;
comment|/* we use the gobject marshaller names directly so libgimpproxy doesn't need    * gimpmarshal.* around. -Yosh    */
name|object_signals
index|[
name|DISCONNECT
index|]
operator|=
name|g_signal_new
argument_list|(
literal|"disconnect"
argument_list|,
name|G_TYPE_FROM_CLASS
argument_list|(
name|klass
argument_list|)
argument_list|,
name|G_SIGNAL_RUN_FIRST
argument_list|,
name|G_STRUCT_OFFSET
argument_list|(
name|GimpObjectClass
argument_list|,
name|disconnect
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|g_cclosure_marshal_VOID__VOID
argument_list|,
name|G_TYPE_NONE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|object_signals
index|[
name|NAME_CHANGED
index|]
operator|=
name|g_signal_new
argument_list|(
literal|"name_changed"
argument_list|,
name|G_TYPE_FROM_CLASS
argument_list|(
name|klass
argument_list|)
argument_list|,
name|G_SIGNAL_RUN_FIRST
argument_list|,
name|G_STRUCT_OFFSET
argument_list|(
name|GimpObjectClass
argument_list|,
name|name_changed
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|g_cclosure_marshal_VOID__VOID
argument_list|,
name|G_TYPE_NONE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|object_class
operator|->
name|dispose
operator|=
name|gimp_object_dispose
expr_stmt|;
name|object_class
operator|->
name|finalize
operator|=
name|gimp_object_finalize
expr_stmt|;
name|object_class
operator|->
name|set_property
operator|=
name|gimp_object_set_property
expr_stmt|;
name|object_class
operator|->
name|get_property
operator|=
name|gimp_object_get_property
expr_stmt|;
name|klass
operator|->
name|disconnect
operator|=
name|NULL
expr_stmt|;
name|klass
operator|->
name|name_changed
operator|=
name|NULL
expr_stmt|;
name|klass
operator|->
name|get_memsize
operator|=
name|gimp_object_real_get_memsize
expr_stmt|;
name|g_object_class_install_property
argument_list|(
name|object_class
argument_list|,
name|PROP_NAME
argument_list|,
name|g_param_spec_string
argument_list|(
literal|"name"
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|G_PARAM_READWRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|gimp_object_init
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
block|{
name|object
operator|->
name|name
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|gimp_object_dispose
parameter_list|(
name|GObject
modifier|*
name|object
parameter_list|)
block|{
name|gboolean
name|disconnected
decl_stmt|;
name|disconnected
operator|=
name|GPOINTER_TO_INT
argument_list|(
name|g_object_get_data
argument_list|(
name|G_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|,
literal|"disconnected"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|disconnected
condition|)
block|{
name|g_signal_emit
argument_list|(
name|G_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|,
name|object_signals
index|[
name|DISCONNECT
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|g_object_set_data
argument_list|(
name|G_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|,
literal|"disconnected"
argument_list|,
name|GINT_TO_POINTER
argument_list|(
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|G_OBJECT_CLASS
argument_list|(
name|parent_class
argument_list|)
operator|->
name|dispose
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|gimp_object_finalize
parameter_list|(
name|GObject
modifier|*
name|object
parameter_list|)
block|{
name|GimpObject
modifier|*
name|gimp_object
decl_stmt|;
name|gimp_object
operator|=
name|GIMP_OBJECT
argument_list|(
name|object
argument_list|)
expr_stmt|;
if|if
condition|(
name|gimp_object
operator|->
name|name
condition|)
block|{
name|g_free
argument_list|(
name|gimp_object
operator|->
name|name
argument_list|)
expr_stmt|;
name|gimp_object
operator|->
name|name
operator|=
name|NULL
expr_stmt|;
block|}
name|G_OBJECT_CLASS
argument_list|(
name|parent_class
argument_list|)
operator|->
name|finalize
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|gimp_object_set_property
parameter_list|(
name|GObject
modifier|*
name|object
parameter_list|,
name|guint
name|property_id
parameter_list|,
specifier|const
name|GValue
modifier|*
name|value
parameter_list|,
name|GParamSpec
modifier|*
name|pspec
parameter_list|)
block|{
name|GimpObject
modifier|*
name|gimp_object
decl_stmt|;
name|gimp_object
operator|=
name|GIMP_OBJECT
argument_list|(
name|object
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|property_id
condition|)
block|{
case|case
name|PROP_NAME
case|:
name|gimp_object_set_name
argument_list|(
name|gimp_object
argument_list|,
name|g_value_get_string
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|G_OBJECT_WARN_INVALID_PROPERTY_ID
argument_list|(
name|object
argument_list|,
name|property_id
argument_list|,
name|pspec
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|gimp_object_get_property
parameter_list|(
name|GObject
modifier|*
name|object
parameter_list|,
name|guint
name|property_id
parameter_list|,
name|GValue
modifier|*
name|value
parameter_list|,
name|GParamSpec
modifier|*
name|pspec
parameter_list|)
block|{
name|GimpObject
modifier|*
name|gimp_object
decl_stmt|;
name|gimp_object
operator|=
name|GIMP_OBJECT
argument_list|(
name|object
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|property_id
condition|)
block|{
case|case
name|PROP_NAME
case|:
name|g_value_set_string
argument_list|(
name|value
argument_list|,
name|gimp_object
operator|->
name|name
argument_list|)
expr_stmt|;
break|break;
default|default:
name|G_OBJECT_WARN_INVALID_PROPERTY_ID
argument_list|(
name|object
argument_list|,
name|property_id
argument_list|,
name|pspec
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
name|void
name|gimp_object_set_name
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|,
specifier|const
name|gchar
modifier|*
name|name
parameter_list|)
block|{
name|g_return_if_fail
argument_list|(
name|GIMP_IS_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|object
operator|->
name|name
operator|&&
operator|!
name|name
operator|)
operator|||
operator|(
name|object
operator|->
name|name
operator|&&
name|name
operator|&&
operator|!
name|strcmp
argument_list|(
name|object
operator|->
name|name
argument_list|,
name|name
argument_list|)
operator|)
condition|)
return|return;
name|g_free
argument_list|(
name|object
operator|->
name|name
argument_list|)
expr_stmt|;
name|object
operator|->
name|name
operator|=
name|g_strdup
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|gimp_object_name_changed
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|const
name|gchar
modifier|*
name|gimp_object_get_name
parameter_list|(
specifier|const
name|GimpObject
modifier|*
name|object
parameter_list|)
block|{
name|g_return_val_if_fail
argument_list|(
name|GIMP_IS_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|object
operator|->
name|name
return|;
block|}
end_function

begin_function
name|void
name|gimp_object_name_changed
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
block|{
name|g_return_if_fail
argument_list|(
name|GIMP_IS_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|g_signal_emit
argument_list|(
name|G_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|,
name|object_signals
index|[
name|NAME_CHANGED
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|DEBUG_MEMSIZE
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG_MEMSIZE
end_ifdef

begin_decl_stmt
name|gboolean
name|gimp_debug_memsize
init|=
name|FALSE
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|gsize
name|gimp_object_get_memsize
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
block|{
name|g_return_val_if_fail
argument_list|(
name|GIMP_IS_OBJECT
argument_list|(
name|object
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_MEMSIZE
if|if
condition|(
name|gimp_debug_memsize
condition|)
block|{
specifier|static
name|gint
name|indent_level
init|=
literal|0
decl_stmt|;
specifier|static
name|GList
modifier|*
name|aggregation_tree
init|=
name|NULL
decl_stmt|;
specifier|static
name|gchar
name|indent_buf
index|[
literal|256
index|]
decl_stmt|;
name|gsize
name|memsize
decl_stmt|;
name|gint
name|i
decl_stmt|;
name|gint
name|my_indent_level
decl_stmt|;
name|gchar
modifier|*
name|object_size
decl_stmt|;
name|indent_level
operator|++
expr_stmt|;
name|my_indent_level
operator|=
name|indent_level
expr_stmt|;
name|memsize
operator|=
name|GIMP_OBJECT_GET_CLASS
argument_list|(
name|object
argument_list|)
operator|->
name|get_memsize
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|indent_level
operator|--
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|MIN
argument_list|(
name|my_indent_level
operator|*
literal|2
argument_list|,
sizeof|sizeof
argument_list|(
name|indent_buf
argument_list|)
operator|-
literal|1
argument_list|)
condition|;
name|i
operator|++
control|)
name|indent_buf
index|[
name|i
index|]
operator|=
literal|' '
expr_stmt|;
name|indent_buf
index|[
name|i
index|]
operator|=
literal|'\0'
expr_stmt|;
name|object_size
operator|=
name|g_strdup_printf
argument_list|(
literal|"%s%s \"%s\": %d\n"
argument_list|,
name|indent_buf
argument_list|,
name|g_type_name
argument_list|(
name|G_TYPE_FROM_INSTANCE
argument_list|(
name|object
argument_list|)
argument_list|)
argument_list|,
name|object
operator|->
name|name
argument_list|,
name|memsize
argument_list|)
expr_stmt|;
name|aggregation_tree
operator|=
name|g_list_prepend
argument_list|(
name|aggregation_tree
argument_list|,
name|object_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|indent_level
operator|==
literal|0
condition|)
block|{
name|g_list_foreach
argument_list|(
name|aggregation_tree
argument_list|,
operator|(
name|GFunc
operator|)
name|g_print
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|g_list_foreach
argument_list|(
name|aggregation_tree
argument_list|,
operator|(
name|GFunc
operator|)
name|g_free
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|g_list_free
argument_list|(
name|aggregation_tree
argument_list|)
expr_stmt|;
name|aggregation_tree
operator|=
name|NULL
expr_stmt|;
block|}
return|return
name|memsize
return|;
block|}
endif|#
directive|endif
comment|/* DEBUG_MEMSIZE */
return|return
name|GIMP_OBJECT_GET_CLASS
argument_list|(
name|object
argument_list|)
operator|->
name|get_memsize
argument_list|(
name|object
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|gsize
name|gimp_object_real_get_memsize
parameter_list|(
name|GimpObject
modifier|*
name|object
parameter_list|)
block|{
name|GTypeQuery
name|type_query
decl_stmt|;
name|gsize
name|memsize
init|=
literal|0
decl_stmt|;
name|g_type_query
argument_list|(
name|G_TYPE_FROM_INSTANCE
argument_list|(
name|object
argument_list|)
argument_list|,
operator|&
name|type_query
argument_list|)
expr_stmt|;
name|memsize
operator|+=
name|type_query
operator|.
name|instance_size
expr_stmt|;
if|if
condition|(
name|object
operator|->
name|name
condition|)
name|memsize
operator|+=
name|strlen
argument_list|(
name|object
operator|->
name|name
argument_list|)
operator|+
literal|1
expr_stmt|;
return|return
end_function

end_unit

