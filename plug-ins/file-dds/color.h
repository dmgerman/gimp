begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * DDS GIMP plugin  *  * Copyright (C) 2004-2012 Shawn Kirst<skirst@gmail.com>,  * with parts (C) 2003 Arne Reuter<homepage@arnereuter.de> where specified.  *  * This program is free software: you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program.  If not, see<https://www.gnu.org/licenses/>.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__COLOR_H__
end_ifndef

begin_define
DECL|macro|__COLOR_H__
define|#
directive|define
name|__COLOR_H__
end_define

begin_include
include|#
directive|include
file|"imath.h"
end_include

begin_comment
comment|/* sRGB encoding/decoding */
end_comment

begin_function_decl
name|int
name|linear_to_sRGB
parameter_list|(
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sRGB_to_linear
parameter_list|(
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* YCoCg encoding */
end_comment

begin_function
specifier|static
specifier|inline
name|void
DECL|function|RGB_to_YCoCg (unsigned char * dst,int r,int g,int b)
name|RGB_to_YCoCg
parameter_list|(
name|unsigned
name|char
modifier|*
name|dst
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|y
init|=
operator|(
operator|(
name|r
operator|+
operator|(
name|g
operator|<<
literal|1
operator|)
operator|+
name|b
operator|)
operator|+
literal|2
operator|)
operator|>>
literal|2
decl_stmt|;
name|int
name|co
init|=
operator|(
operator|(
operator|(
operator|(
name|r
operator|<<
literal|1
operator|)
operator|-
operator|(
name|b
operator|<<
literal|1
operator|)
operator|)
operator|+
literal|2
operator|)
operator|>>
literal|2
operator|)
operator|+
literal|128
decl_stmt|;
name|int
name|cg
init|=
operator|(
operator|(
operator|(
operator|-
name|r
operator|+
operator|(
name|g
operator|<<
literal|1
operator|)
operator|-
name|b
operator|)
operator|+
literal|2
operator|)
operator|>>
literal|2
operator|)
operator|+
literal|128
decl_stmt|;
name|dst
index|[
literal|0
index|]
operator|=
literal|255
expr_stmt|;
name|dst
index|[
literal|1
index|]
operator|=
operator|(
name|cg
operator|>
literal|255
condition|?
literal|255
else|:
operator|(
name|cg
operator|<
literal|0
condition|?
literal|0
else|:
name|cg
operator|)
operator|)
expr_stmt|;
name|dst
index|[
literal|2
index|]
operator|=
operator|(
name|co
operator|>
literal|255
condition|?
literal|255
else|:
operator|(
name|co
operator|<
literal|0
condition|?
literal|0
else|:
name|co
operator|)
operator|)
expr_stmt|;
name|dst
index|[
literal|3
index|]
operator|=
operator|(
name|y
operator|>
literal|255
condition|?
literal|255
else|:
operator|(
name|y
operator|<
literal|0
condition|?
literal|0
else|:
name|y
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* other color conversions */
end_comment

begin_function
specifier|static
specifier|inline
name|int
DECL|function|rgb_to_luminance (int r,int g,int b)
name|rgb_to_luminance
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
block|{
comment|/* ITU-R BT.709 luma coefficents, scaled by 256 */
return|return
operator|(
operator|(
name|r
operator|*
literal|54
operator|+
name|g
operator|*
literal|182
operator|+
name|b
operator|*
literal|20
operator|)
operator|+
literal|128
operator|)
operator|>>
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|short
DECL|function|pack_r5g6b5 (int r,int g,int b)
name|pack_r5g6b5
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|mul8bit
argument_list|(
name|r
argument_list|,
literal|31
argument_list|)
operator|<<
literal|11
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|g
argument_list|,
literal|63
argument_list|)
operator|<<
literal|5
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|b
argument_list|,
literal|31
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|short
DECL|function|pack_rgba4 (int r,int g,int b,int a)
name|pack_rgba4
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
block|{
return|return
operator|(
name|mul8bit
argument_list|(
name|a
argument_list|,
literal|15
argument_list|)
operator|<<
literal|12
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|r
argument_list|,
literal|15
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|g
argument_list|,
literal|15
argument_list|)
operator|<<
literal|4
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|b
argument_list|,
literal|15
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|short
DECL|function|pack_rgb5a1 (int r,int g,int b,int a)
name|pack_rgb5a1
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|a
operator|>>
literal|7
operator|)
operator|&
literal|0x01
operator|)
operator|<<
literal|15
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|r
argument_list|,
literal|31
argument_list|)
operator|<<
literal|10
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|g
argument_list|,
literal|31
argument_list|)
operator|<<
literal|5
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|b
argument_list|,
literal|31
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|char
DECL|function|pack_r3g3b2 (int r,int g,int b)
name|pack_r3g3b2
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|mul8bit
argument_list|(
name|r
argument_list|,
literal|7
argument_list|)
operator|<<
literal|5
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|g
argument_list|,
literal|7
argument_list|)
operator|<<
literal|2
operator|)
operator||
operator|(
name|mul8bit
argument_list|(
name|b
argument_list|,
literal|3
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
DECL|function|pack_rgb10a2 (int r,int g,int b,int a)
name|pack_rgb10a2
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|a
parameter_list|)
block|{
return|return
operator|(
call|(
name|unsigned
name|int
call|)
argument_list|(
operator|(
name|a
operator|>>
literal|6
operator|)
operator|&
literal|0x003
argument_list|)
operator|<<
literal|30
operator|)
operator||
operator|(
call|(
name|unsigned
name|int
call|)
argument_list|(
operator|(
name|r
operator|<<
literal|2
operator|)
operator|&
literal|0x3ff
argument_list|)
operator|<<
literal|20
operator|)
operator||
operator|(
call|(
name|unsigned
name|int
call|)
argument_list|(
operator|(
name|g
operator|<<
literal|2
operator|)
operator|&
literal|0x3ff
argument_list|)
operator|<<
literal|10
operator|)
operator||
operator|(
call|(
name|unsigned
name|int
call|)
argument_list|(
operator|(
name|b
operator|<<
literal|2
operator|)
operator|&
literal|0x3ff
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __COLOR_H__ */
end_comment

end_unit

