begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * DDS GIMP plugin  *  * Copyright (C) 2004-2012 Shawn Kirst<skirst@gmail.com>,  * with parts (C) 2003 Arne Reuter<homepage@arnereuter.de> where specified.  *  * This program is free software: you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program.  If not, see<https://www.gnu.org/licenses/>.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__VEC_H__
end_ifndef

begin_define
DECL|macro|__VEC_H__
define|#
directive|define
name|__VEC_H__
end_define

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__SSE__
end_ifdef

begin_define
DECL|macro|USE_SSE
define|#
directive|define
name|USE_SSE
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_SSE
end_ifdef

begin_include
include|#
directive|include
file|<immintrin.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"imath.h"
end_include

begin_typedef
DECL|typedef|vec4_t
typedef|typedef
name|float
name|vec4_t
name|__attribute__
typedef|((
name|vector_size
typedef|(16)));
end_typedef

begin_typedef
DECL|typedef|sym3x3_t
typedef|typedef
name|float
name|sym3x3_t
index|[
literal|6
index|]
typedef|;
end_typedef

begin_define
DECL|macro|VEC4_CONST4 (x,y,z,w)
define|#
directive|define
name|VEC4_CONST4
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|,
name|w
parameter_list|)
value|{x, y, z, w}
end_define

begin_define
DECL|macro|VEC4_CONST3 (x,y,z)
define|#
directive|define
name|VEC4_CONST3
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|{x, y, z, 0.0f}
end_define

begin_define
DECL|macro|VEC4_CONST1 (x)
define|#
directive|define
name|VEC4_CONST1
parameter_list|(
name|x
parameter_list|)
value|{x, x, x, x}
end_define

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_set (float x,float y,float z,float w)
name|vec4_set
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|,
name|float
name|w
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_setr_ps
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|v
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
return|return
name|v
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_set1 (float f)
name|vec4_set1
parameter_list|(
name|float
name|f
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_set1_ps
argument_list|(
name|f
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|v
init|=
block|{
name|f
block|,
name|f
block|,
name|f
block|,
name|f
block|}
decl_stmt|;
return|return
name|v
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_zero (void)
name|vec4_zero
parameter_list|(
name|void
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_setzero_ps
argument_list|()
return|;
else|#
directive|else
name|vec4_t
name|v
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
return|return
name|v
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
DECL|function|vec4_store (float * f,const vec4_t v)
name|vec4_store
parameter_list|(
name|float
modifier|*
name|f
parameter_list|,
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
name|_mm_store_ps
argument_list|(
name|f
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|#
directive|else
name|f
index|[
literal|0
index|]
operator|=
name|v
index|[
literal|0
index|]
expr_stmt|;
name|f
index|[
literal|1
index|]
operator|=
name|v
index|[
literal|1
index|]
expr_stmt|;
name|f
index|[
literal|2
index|]
operator|=
name|v
index|[
literal|2
index|]
expr_stmt|;
name|f
index|[
literal|3
index|]
operator|=
name|v
index|[
literal|3
index|]
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_splatx (const vec4_t v)
name|vec4_splatx
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_shuffle_ps
argument_list|(
name|v
argument_list|,
name|v
argument_list|,
literal|0x00
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|r
init|=
block|{
name|v
index|[
literal|0
index|]
block|,
name|v
index|[
literal|0
index|]
block|,
name|v
index|[
literal|0
index|]
block|,
name|v
index|[
literal|0
index|]
block|}
decl_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_splaty (const vec4_t v)
name|vec4_splaty
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_shuffle_ps
argument_list|(
name|v
argument_list|,
name|v
argument_list|,
literal|0x55
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|r
init|=
block|{
name|v
index|[
literal|1
index|]
block|,
name|v
index|[
literal|1
index|]
block|,
name|v
index|[
literal|1
index|]
block|,
name|v
index|[
literal|1
index|]
block|}
decl_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_splatz (const vec4_t v)
name|vec4_splatz
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_shuffle_ps
argument_list|(
name|v
argument_list|,
name|v
argument_list|,
literal|0xaa
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|r
init|=
block|{
name|v
index|[
literal|2
index|]
block|,
name|v
index|[
literal|2
index|]
block|,
name|v
index|[
literal|2
index|]
block|,
name|v
index|[
literal|2
index|]
block|}
decl_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_splatw (const vec4_t v)
name|vec4_splatw
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_shuffle_ps
argument_list|(
name|v
argument_list|,
name|v
argument_list|,
literal|0xff
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|r
init|=
block|{
name|v
index|[
literal|3
index|]
block|,
name|v
index|[
literal|3
index|]
block|,
name|v
index|[
literal|3
index|]
block|,
name|v
index|[
literal|3
index|]
block|}
decl_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_rcp (const vec4_t v)
name|vec4_rcp
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
name|__m128
name|est
init|=
name|_mm_rcp_ps
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|__m128
name|diff
init|=
name|_mm_sub_ps
argument_list|(
name|_mm_set1_ps
argument_list|(
literal|1.0f
argument_list|)
argument_list|,
name|_mm_mul_ps
argument_list|(
name|est
argument_list|,
name|v
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|_mm_add_ps
argument_list|(
name|_mm_mul_ps
argument_list|(
name|diff
argument_list|,
name|est
argument_list|)
argument_list|,
name|est
argument_list|)
return|;
else|#
directive|else
name|vec4_t
name|one
init|=
block|{
literal|1.0f
block|,
literal|1.0f
block|,
literal|1.0f
block|,
literal|1.0f
block|}
decl_stmt|;
return|return
name|one
operator|/
name|v
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_min (const vec4_t a,const vec4_t b)
name|vec4_min
parameter_list|(
specifier|const
name|vec4_t
name|a
parameter_list|,
specifier|const
name|vec4_t
name|b
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_min_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
else|#
directive|else
return|return
name|vec4_set
argument_list|(
name|MIN
argument_list|(
name|a
index|[
literal|0
index|]
argument_list|,
name|b
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|MIN
argument_list|(
name|a
index|[
literal|1
index|]
argument_list|,
name|b
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|MIN
argument_list|(
name|a
index|[
literal|2
index|]
argument_list|,
name|b
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|MIN
argument_list|(
name|a
index|[
literal|3
index|]
argument_list|,
name|b
index|[
literal|3
index|]
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_max (const vec4_t a,const vec4_t b)
name|vec4_max
parameter_list|(
specifier|const
name|vec4_t
name|a
parameter_list|,
specifier|const
name|vec4_t
name|b
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
return|return
name|_mm_max_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
else|#
directive|else
return|return
name|vec4_set
argument_list|(
name|MAX
argument_list|(
name|a
index|[
literal|0
index|]
argument_list|,
name|b
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|MAX
argument_list|(
name|a
index|[
literal|1
index|]
argument_list|,
name|b
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|MAX
argument_list|(
name|a
index|[
literal|2
index|]
argument_list|,
name|b
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|MAX
argument_list|(
name|a
index|[
literal|3
index|]
argument_list|,
name|b
index|[
literal|3
index|]
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vec4_t
DECL|function|vec4_trunc (const vec4_t v)
name|vec4_trunc
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
ifdef|#
directive|ifdef
name|__SSE4_1__
return|return
name|_mm_round_ps
argument_list|(
name|v
argument_list|,
name|_MM_FROUND_TRUNC
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__SSE2__
argument_list|)
return|return
name|_mm_cvtepi32_ps
argument_list|(
name|_mm_cvttps_epi32
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|#
directive|else
comment|// convert to ints
name|__m128
name|in
init|=
name|v
decl_stmt|;
name|__m64
name|lo
init|=
name|_mm_cvttps_pi32
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|__m64
name|hi
init|=
name|_mm_cvttps_pi32
argument_list|(
name|_mm_movehl_ps
argument_list|(
name|in
argument_list|,
name|in
argument_list|)
argument_list|)
decl_stmt|;
comment|// convert to floats
name|__m128
name|part
init|=
name|_mm_movelh_ps
argument_list|(
name|in
argument_list|,
name|_mm_cvtpi32_ps
argument_list|(
name|in
argument_list|,
name|hi
argument_list|)
argument_list|)
decl_stmt|;
name|__m128
name|trunc
init|=
name|_mm_cvtpi32_ps
argument_list|(
name|part
argument_list|,
name|lo
argument_list|)
decl_stmt|;
comment|// clear mmx state
name|_mm_empty
argument_list|()
expr_stmt|;
return|return
name|trunc
return|;
endif|#
directive|endif
else|#
directive|else
name|vec4_t
name|r
init|=
block|{
name|v
index|[
literal|0
index|]
operator|>
literal|0.0f
operator|?
name|floorf
argument_list|(
name|v
index|[
literal|0
index|]
argument_list|)
operator|:
name|ceil
argument_list|(
name|v
index|[
literal|0
index|]
argument_list|)
block|,
name|v
index|[
literal|1
index|]
operator|>
literal|0.0f
operator|?
name|floorf
argument_list|(
name|v
index|[
literal|1
index|]
argument_list|)
operator|:
name|ceil
argument_list|(
name|v
index|[
literal|1
index|]
argument_list|)
block|,
name|v
index|[
literal|2
index|]
operator|>
literal|0.0f
operator|?
name|floorf
argument_list|(
name|v
index|[
literal|2
index|]
argument_list|)
operator|:
name|ceil
argument_list|(
name|v
index|[
literal|2
index|]
argument_list|)
block|,
name|v
index|[
literal|3
index|]
operator|>
literal|0.0f
operator|?
name|floorf
argument_list|(
name|v
index|[
literal|3
index|]
argument_list|)
operator|:
name|ceil
argument_list|(
name|v
index|[
literal|3
index|]
argument_list|)
block|, }
decl_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|float
DECL|function|vec4_accum (const vec4_t v)
name|vec4_accum
parameter_list|(
specifier|const
name|vec4_t
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
name|float
name|rv
decl_stmt|;
name|__m128
name|t
decl_stmt|;
ifdef|#
directive|ifdef
name|__SSE3__
name|t
operator|=
name|_mm_hadd_ps
argument_list|(
name|v
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|t
operator|=
name|_mm_hadd_ps
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|#
directive|else
name|t
operator|=
name|_mm_add_ps
argument_list|(
name|v
argument_list|,
name|_mm_movehl_ps
argument_list|(
name|v
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|_mm_add_ss
argument_list|(
name|t
argument_list|,
name|_mm_shuffle_ps
argument_list|(
name|t
argument_list|,
name|t
argument_list|,
literal|0x01
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|_mm_store_ss
argument_list|(
operator|&
name|rv
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
name|rv
return|;
else|#
directive|else
return|return
name|v
index|[
literal|0
index|]
operator|+
name|v
index|[
literal|1
index|]
operator|+
name|v
index|[
literal|2
index|]
operator|+
name|v
index|[
literal|3
index|]
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|float
DECL|function|vec4_dot (const vec4_t a,const vec4_t b)
name|vec4_dot
parameter_list|(
specifier|const
name|vec4_t
name|a
parameter_list|,
specifier|const
name|vec4_t
name|b
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|USE_SSE
argument_list|)
operator|&&
name|defined
argument_list|(
name|__SSE4_1__
argument_list|)
name|float
name|rv
decl_stmt|;
name|__m128
name|t
init|=
name|_mm_dp_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|0xff
argument_list|)
decl_stmt|;
name|_mm_store_ss
argument_list|(
operator|&
name|rv
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
name|rv
return|;
else|#
directive|else
return|return
name|vec4_accum
argument_list|(
name|a
operator|*
name|b
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
DECL|function|vec4_cmplt (const vec4_t a,const vec4_t b)
name|vec4_cmplt
parameter_list|(
specifier|const
name|vec4_t
name|a
parameter_list|,
specifier|const
name|vec4_t
name|b
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_SSE
name|__m128
name|bits
init|=
name|_mm_cmplt_ps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|int
name|val
init|=
name|_mm_movemask_ps
argument_list|(
name|bits
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|0
return|;
else|#
directive|else
return|return
operator|(
name|a
index|[
literal|0
index|]
operator|<
name|b
index|[
literal|0
index|]
operator|)
operator|||
operator|(
name|a
index|[
literal|1
index|]
operator|<
name|b
index|[
literal|1
index|]
operator|)
operator|||
operator|(
name|a
index|[
literal|2
index|]
operator|<
name|b
index|[
literal|2
index|]
operator|)
operator|||
operator|(
name|a
index|[
literal|3
index|]
operator|<
name|b
index|[
literal|3
index|]
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __VEC_H__ */
end_comment

end_unit

