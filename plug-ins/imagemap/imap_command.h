begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * This is a plug-in for the GIMP.  *  * Generates clickable image maps.  *  * Copyright (C) 1998-1999 Maurits Rijk  lpeek.mrijk@consunet.nl  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IMAP_COMMAND_H
end_ifndef

begin_define
DECL|macro|_IMAP_COMMAND_H
define|#
directive|define
name|_IMAP_COMMAND_H
end_define

begin_include
include|#
directive|include
file|"imap_object.h"
end_include

begin_typedef
DECL|typedef|CommandClass_t
typedef|typedef
name|struct
name|CommandClass_t
name|CommandClass_t
typedef|;
end_typedef

begin_typedef
DECL|typedef|Command_t
typedef|typedef
name|struct
name|Command_t
name|Command_t
typedef|;
end_typedef

begin_typedef
DECL|typedef|CommandList_t
typedef|typedef
name|struct
name|CommandList_t
name|CommandList_t
typedef|;
end_typedef

begin_define
DECL|macro|COMMAND_PROTO (class)
define|#
directive|define
name|COMMAND_PROTO
parameter_list|(
name|class
parameter_list|)
define|\
value|static void class##_destruct(Command_t *command); \ static gboolean class##_execute(Command_t *command); \ static void class##_undo(Command_t *command); \ static void class##_redo(Command_t *command)
end_define

begin_struct
DECL|struct|CommandClass_t
struct|struct
name|CommandClass_t
block|{
DECL|member|destruct
name|void
function_decl|(
modifier|*
name|destruct
function_decl|)
parameter_list|(
name|Command_t
modifier|*
parameter_list|)
function_decl|;
DECL|member|execute
name|gboolean
function_decl|(
modifier|*
name|execute
function_decl|)
parameter_list|(
name|Command_t
modifier|*
parameter_list|)
function_decl|;
DECL|member|undo
name|void
function_decl|(
modifier|*
name|undo
function_decl|)
parameter_list|(
name|Command_t
modifier|*
parameter_list|)
function_decl|;
DECL|member|redo
name|void
function_decl|(
modifier|*
name|redo
function_decl|)
parameter_list|(
name|Command_t
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
DECL|struct|Command_t
struct|struct
name|Command_t
block|{
DECL|member|class
name|CommandClass_t
modifier|*
name|class
decl_stmt|;
DECL|member|sub_commands
name|CommandList_t
modifier|*
name|sub_commands
decl_stmt|;
DECL|member|name
specifier|const
name|gchar
modifier|*
name|name
decl_stmt|;
DECL|member|locked
name|gboolean
name|locked
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
DECL|typedef|CommandFactory_t
typedef|typedef
name|Command_t
modifier|*
function_decl|(
modifier|*
name|CommandFactory_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
DECL|typedef|CommandListCallbackFunc_t
typedef|typedef
name|void
function_decl|(
modifier|*
name|CommandListCallbackFunc_t
function_decl|)
parameter_list|(
name|Command_t
modifier|*
parameter_list|,
name|gpointer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
DECL|struct|__anon2a3af69d0108
typedef|typedef
struct|struct
block|{
DECL|member|func
name|CommandListCallbackFunc_t
name|func
decl_stmt|;
DECL|member|data
name|gpointer
name|data
decl_stmt|;
DECL|typedef|CommandListCB_t
block|}
name|CommandListCB_t
typedef|;
end_typedef

begin_typedef
DECL|struct|__anon2a3af69d0208
typedef|typedef
struct|struct
block|{
DECL|member|list
name|GList
modifier|*
name|list
decl_stmt|;
DECL|typedef|CommandListCallback_t
block|}
name|CommandListCallback_t
typedef|;
end_typedef

begin_struct
DECL|struct|CommandList_t
struct|struct
name|CommandList_t
block|{
DECL|member|parent
name|CommandList_t
modifier|*
name|parent
decl_stmt|;
DECL|member|undo_levels
name|gint
name|undo_levels
decl_stmt|;
DECL|member|list
name|GList
modifier|*
name|list
decl_stmt|;
DECL|member|undo
name|GList
modifier|*
name|undo
decl_stmt|;
comment|/* Pointer to current undo command */
DECL|member|redo
name|GList
modifier|*
name|redo
decl_stmt|;
comment|/* Pointer to current redo command */
DECL|member|update_cb
name|CommandListCallback_t
name|update_cb
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|CommandList_t
modifier|*
name|command_list_new
parameter_list|(
name|gint
name|undo_levels
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_destruct
parameter_list|(
name|CommandList_t
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_set_undo_level
parameter_list|(
name|gint
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_add
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_remove_all
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_undo
parameter_list|(
name|CommandList_t
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_undo_all
parameter_list|(
name|CommandList_t
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_redo
parameter_list|(
name|CommandList_t
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_redo_all
parameter_list|(
name|CommandList_t
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_list_add_update_cb
parameter_list|(
name|CommandListCallbackFunc_t
name|func
parameter_list|,
name|gpointer
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Command_t
modifier|*
name|command_list_get_redo_command
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Command_t
modifier|*
name|command_new
parameter_list|(
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Command_t
modifier|*
name|command_init
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|,
specifier|const
name|gchar
modifier|*
name|name
parameter_list|,
name|CommandClass_t
modifier|*
name|class
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_execute
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_undo
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_redo
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_set_name
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|,
specifier|const
name|gchar
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|command_add_subcommand
parameter_list|(
name|Command_t
modifier|*
name|command
parameter_list|,
name|Command_t
modifier|*
name|sub_command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|last_command_undo
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|last_command_redo
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|subcommand_list_add
parameter_list|(
name|CommandList_t
modifier|*
name|list
parameter_list|,
name|Command_t
modifier|*
name|command
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Command_t
modifier|*
name|subcommand_start
parameter_list|(
specifier|const
name|gchar
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|subcommand_end
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_define
DECL|macro|command_lock (command)
define|#
directive|define
name|command_lock
parameter_list|(
name|command
parameter_list|)
value|((command)->locked = TRUE)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _IMAP_COMMAND_H */
end_comment

end_unit

