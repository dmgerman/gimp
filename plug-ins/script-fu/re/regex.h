begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_REGEX_H_
end_ifndef

begin_define
DECL|macro|_REGEX_H_
define|#
directive|define
name|_REGEX_H_
end_define

begin_comment
DECL|macro|_REGEX_H_
comment|/* never again */
end_comment

begin_comment
comment|/* Added by dsouflis - include files should be self contained */
end_comment

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_comment
comment|/* ========= begin header generated by ././mkh ========= */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* === regex2.h === */
ifdef|#
directive|ifdef
name|WIN32
DECL|macro|API_EXPORT (type)
define|#
directive|define
name|API_EXPORT
parameter_list|(
name|type
parameter_list|)
value|__declspec(dllexport) type __stdcall
else|#
directive|else
define|#
directive|define
name|API_EXPORT
parameter_list|(
name|type
parameter_list|)
value|type
endif|#
directive|endif
DECL|typedef|regoff_t
typedef|typedef
name|off_t
name|regoff_t
typedef|;
DECL|struct|__anon2760f6180108
typedef|typedef
struct|struct
block|{
DECL|member|re_magic
name|int
name|re_magic
decl_stmt|;
DECL|member|re_nsub
name|size_t
name|re_nsub
decl_stmt|;
comment|/* number of parenthesized subexpressions */
DECL|member|re_endp
specifier|const
name|char
modifier|*
name|re_endp
decl_stmt|;
comment|/* end pointer for REG_PEND */
DECL|member|re_g
name|struct
name|re_guts
modifier|*
name|re_g
decl_stmt|;
comment|/* none of your business :-) */
DECL|typedef|regex_t
block|}
name|regex_t
typedef|;
DECL|struct|__anon2760f6180208
typedef|typedef
struct|struct
block|{
DECL|member|rm_so
name|regoff_t
name|rm_so
decl_stmt|;
comment|/* start of match */
DECL|member|rm_eo
name|regoff_t
name|rm_eo
decl_stmt|;
comment|/* end of match */
DECL|typedef|regmatch_t
block|}
name|regmatch_t
typedef|;
comment|/* === regcomp.c === */
name|API_EXPORT
argument_list|(
argument|int
argument_list|)
name|regcomp
argument_list|(
name|regex_t
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|)
expr_stmt|;
DECL|macro|REG_BASIC
define|#
directive|define
name|REG_BASIC
value|0000
DECL|macro|REG_EXTENDED
define|#
directive|define
name|REG_EXTENDED
value|0001
DECL|macro|REG_ICASE
define|#
directive|define
name|REG_ICASE
value|0002
DECL|macro|REG_NOSUB
define|#
directive|define
name|REG_NOSUB
value|0004
DECL|macro|REG_NEWLINE
define|#
directive|define
name|REG_NEWLINE
value|0010
DECL|macro|REG_NOSPEC
define|#
directive|define
name|REG_NOSPEC
value|0020
DECL|macro|REG_PEND
define|#
directive|define
name|REG_PEND
value|0040
DECL|macro|REG_DUMP
define|#
directive|define
name|REG_DUMP
value|0200
comment|/* === regerror.c === */
DECL|macro|REG_NOMATCH
define|#
directive|define
name|REG_NOMATCH
value|1
DECL|macro|REG_BADPAT
define|#
directive|define
name|REG_BADPAT
value|2
DECL|macro|REG_ECOLLATE
define|#
directive|define
name|REG_ECOLLATE
value|3
DECL|macro|REG_ECTYPE
define|#
directive|define
name|REG_ECTYPE
value|4
DECL|macro|REG_EESCAPE
define|#
directive|define
name|REG_EESCAPE
value|5
DECL|macro|REG_ESUBREG
define|#
directive|define
name|REG_ESUBREG
value|6
DECL|macro|REG_EBRACK
define|#
directive|define
name|REG_EBRACK
value|7
DECL|macro|REG_EPAREN
define|#
directive|define
name|REG_EPAREN
value|8
DECL|macro|REG_EBRACE
define|#
directive|define
name|REG_EBRACE
value|9
DECL|macro|REG_BADBR
define|#
directive|define
name|REG_BADBR
value|10
DECL|macro|REG_ERANGE
define|#
directive|define
name|REG_ERANGE
value|11
DECL|macro|REG_ESPACE
define|#
directive|define
name|REG_ESPACE
value|12
DECL|macro|REG_BADRPT
define|#
directive|define
name|REG_BADRPT
value|13
DECL|macro|REG_EMPTY
define|#
directive|define
name|REG_EMPTY
value|14
DECL|macro|REG_ASSERT
define|#
directive|define
name|REG_ASSERT
value|15
DECL|macro|REG_INVARG
define|#
directive|define
name|REG_INVARG
value|16
DECL|macro|REG_ATOI
define|#
directive|define
name|REG_ATOI
value|255
comment|/* convert name to number (!) */
DECL|macro|REG_ITOA
define|#
directive|define
name|REG_ITOA
value|0400
comment|/* convert number to name (!) */
name|API_EXPORT
argument_list|(
argument|size_t
argument_list|)
name|regerror
argument_list|(
name|int
argument_list|,
specifier|const
name|regex_t
operator|*
argument_list|,
name|char
operator|*
argument_list|,
name|size_t
argument_list|)
expr_stmt|;
comment|/* === regexec.c === */
name|API_EXPORT
argument_list|(
argument|int
argument_list|)
name|regexec
argument_list|(
specifier|const
name|regex_t
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|size_t
argument_list|,
name|regmatch_t
index|[]
argument_list|,
name|int
argument_list|)
expr_stmt|;
DECL|macro|REG_NOTBOL
define|#
directive|define
name|REG_NOTBOL
value|00001
DECL|macro|REG_NOTEOL
define|#
directive|define
name|REG_NOTEOL
value|00002
DECL|macro|REG_STARTEND
define|#
directive|define
name|REG_STARTEND
value|00004
DECL|macro|REG_TRACE
define|#
directive|define
name|REG_TRACE
value|00400
comment|/* tracing of execution */
DECL|macro|REG_LARGE
define|#
directive|define
name|REG_LARGE
value|01000
comment|/* force large representation */
DECL|macro|REG_BACKR
define|#
directive|define
name|REG_BACKR
value|02000
comment|/* force use of backref code */
comment|/* === regfree.c === */
name|API_EXPORT
argument_list|(
argument|void
argument_list|)
name|regfree
argument_list|(
name|regex_t
operator|*
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ========= end header generated by ././mkh ========= */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

