begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* GIMP - The GNU Image Manipulation Program  * Copyright (C) 1995 Spencer Kimball and Peter Mattis  *  * screenshot-win32-dwm-api.h  * Copyright (C) 2018 Gil Eliyahu<gileli121@gmail.com>  *  * This program is free software: you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program.  If not, see<http://www.gnu.org/licenses/>.  */
end_comment

begin_function_decl
name|void
name|UnloadRequiredDwmFunctions
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|BOOL
name|LoadRequiredDwmFunctions
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
DECL|typedef|DWMGETWINDOWATTRIBUTE
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|DWMGETWINDOWATTRIBUTE
function_decl|)
parameter_list|(
name|HWND
parameter_list|,
name|DWORD
parameter_list|,
name|_Out_
name|PVOID
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
DECL|variable|DwmGetWindowAttribute
name|DWMGETWINDOWATTRIBUTE
name|DwmGetWindowAttribute
decl_stmt|;
end_decl_stmt

begin_typedef
DECL|enum|_DWMWINDOWATTRIBUTE
typedef|typedef
enum|enum
name|_DWMWINDOWATTRIBUTE
block|{
DECL|enumerator|DWMWA_NCRENDERING_ENABLED
name|DWMWA_NCRENDERING_ENABLED
init|=
literal|1
block|,
DECL|enumerator|DWMWA_NCRENDERING_POLICY
name|DWMWA_NCRENDERING_POLICY
block|,
DECL|enumerator|DWMWA_TRANSITIONS_FORCEDISABLED
name|DWMWA_TRANSITIONS_FORCEDISABLED
block|,
DECL|enumerator|DWMWA_ALLOW_NCPAINT
name|DWMWA_ALLOW_NCPAINT
block|,
DECL|enumerator|DWMWA_CAPTION_BUTTON_BOUNDS
name|DWMWA_CAPTION_BUTTON_BOUNDS
block|,
DECL|enumerator|DWMWA_NONCLIENT_RTL_LAYOUT
name|DWMWA_NONCLIENT_RTL_LAYOUT
block|,
DECL|enumerator|DWMWA_FORCE_ICONIC_REPRESENTATION
name|DWMWA_FORCE_ICONIC_REPRESENTATION
block|,
DECL|enumerator|DWMWA_FLIP3D_POLICY
name|DWMWA_FLIP3D_POLICY
block|,
DECL|enumerator|DWMWA_EXTENDED_FRAME_BOUNDS
name|DWMWA_EXTENDED_FRAME_BOUNDS
block|,
DECL|enumerator|DWMWA_HAS_ICONIC_BITMAP
name|DWMWA_HAS_ICONIC_BITMAP
block|,
DECL|enumerator|DWMWA_DISALLOW_PEEK
name|DWMWA_DISALLOW_PEEK
block|,
DECL|enumerator|DWMWA_EXCLUDED_FROM_PEEK
name|DWMWA_EXCLUDED_FROM_PEEK
block|,
DECL|enumerator|DWMWA_CLOAK
name|DWMWA_CLOAK
block|,
DECL|enumerator|DWMWA_CLOAKED
name|DWMWA_CLOAKED
block|,
DECL|enumerator|DWMWA_FREEZE_REPRESENTATION
name|DWMWA_FREEZE_REPRESENTATION
block|,
DECL|enumerator|DWMWA_LAST
name|DWMWA_LAST
DECL|typedef|DWMWINDOWATTRIBUTE
block|}
name|DWMWINDOWATTRIBUTE
typedef|;
end_typedef

begin_decl_stmt
DECL|variable|dwmApi
specifier|static
name|HMODULE
name|dwmApi
init|=
name|NULL
decl_stmt|;
end_decl_stmt

begin_function
name|void
DECL|function|UnloadRequiredDwmFunctions (void)
name|UnloadRequiredDwmFunctions
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dwmApi
condition|)
return|return;
name|FreeLibrary
argument_list|(
name|dwmApi
argument_list|)
expr_stmt|;
name|dwmApi
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function
name|BOOL
DECL|function|LoadRequiredDwmFunctions (void)
name|LoadRequiredDwmFunctions
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
name|dwmApi
condition|)
return|return
name|TRUE
return|;
name|dwmApi
operator|=
name|LoadLibrary
argument_list|(
literal|"dwmapi"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dwmApi
condition|)
return|return
name|FALSE
return|;
name|DwmGetWindowAttribute
operator|=
operator|(
name|DWMGETWINDOWATTRIBUTE
operator|)
name|GetProcAddress
argument_list|(
name|dwmApi
argument_list|,
literal|"DwmGetWindowAttribute"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|DwmGetWindowAttribute
condition|)
block|{
name|UnloadRequiredDwmFunctions
argument_list|()
expr_stmt|;
return|return
name|FALSE
return|;
block|}
return|return
name|TRUE
return|;
block|}
end_function

end_unit

